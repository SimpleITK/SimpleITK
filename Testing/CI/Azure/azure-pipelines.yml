# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master
  - next
  - release
variables:
  ExternalDataVersion: 1.2.0
jobs:

  - job: WindowsR
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 300
    pool:
      vmImage: 'windows-latest'
    steps:
      - template: templates/git-download-steps.yml
      - pwsh: |
          Invoke-WebRequest "https://github.com/richardbeare/choco-rtools/raw/master/rtools.4.0.nupkg" -OutFile "rtools.3.5.0.nupkg"
          choco install rtools --source . -f -y --no-progress
          Invoke-WebRequest "https://github.com/richardbeare/choco-rtools/raw/master/rtesting.3.7.nupkg" -OutFile "rtesting.3.7.nupkg"
          choco install rtesting --source . -f -y --no-progress
          choco install ninja
          # Set the timezone
          tzutil /s "GMT Standard Time"
        displayName: 'Installing R, rtools and ninja'
      - pwsh: |
          Write-Host "##vso[task.setvariable variable=PATH]C:\rtools40\bin;C:\rtools40\mingw64\bin;${env:PATH};C:\Progra~1\R\R-testing\bin"
        displayName: 'Setting PATH'
      - bash: |
          set -x
          which R
          which ninja
          gcc --version
          echo "$(Build.SourcesDirectory)/Testing/CI/Azure/azure.cmake"
          echo "$(Agent.BuildDirectory)"
          ls
          ls SimpleITK-dashboard
          echo $(Build.Repository.URI)
        displayName: Display config
        workingDirectory: $(Agent.BuildDirectory)
      - script: |
          cmake --version
          which R
          which ninja
          gcc --version
          ctest -S "$(Build.SourcesDirectory)/Testing/CI/Azure/azure.cmake" -VV -j 4
          ls
        displayName: Build and test
        env:
          CTEST_CONFIGURATION_TYPE: MinSizeRel
          CTEST_OUTPUT_ON_FAILURE: 1
          CTEST_CMAKE_GENERATOR: "Ninja"
          CXX: 'C:\rtools40\mingw64\bin\c++.exe'
          CC: 'C:\rtools40\mingw64\bin\gcc.exe'
          DASHBOARD_BRANCH_DIRECTORY: $(Agent.BuildDirectory)/SimpleITK-dashboard
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
          CXXFLAGS: "-Wa,-mbig-obj --param ggc-min-expand=0 --param ggc-min-heapsize=2648000"
          CFLAGS: "-Wa,-mbig-obj --param ggc-min-expand=0 --param ggc-min-heapsize=2648000"
          CTEST_CACHE: |
            BUILD_DOCUMENTS:BOOL=OFF
            BUILD_EXAMPLES:BOOL=ON
            BUILD_SHARED_LIBS:BOOL=OFF
            BUILD_TESTING:BOOL=ON
            WRAP_DEFAULT:BOOL=OFF
            WRAP_R:BOOL=ON
            ITK_GIT_TAG:STRING=master
        workingDirectory: $(Agent.BuildDirectory)
      - script: |
          ls $(Agent.BuildDirectory)/
          echo $(Agent.BuildDirectory)
          grep CXXFLAGS -r $(Agent.BuildDirectory)
        condition: succeededOrFailed()
        displayName: Diagnostics
      - script: |
          ci_addons ctest_junit_formatter $(Build.SourcesDirectory)-build > $(Agent.BuildDirectory)/JUnitTestResults.xml
        condition: succeededOrFailed()
        displayName: 'Format CTest output in JUnit format'
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: "$(Agent.BuildDirectory)/JUnitTestResults.xml"
          testRunTitle: 'CTest $(Agent.OS)'
        condition: succeededOrFailed()
        displayName: 'Publish test results'
