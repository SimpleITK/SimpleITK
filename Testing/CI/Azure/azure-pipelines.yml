# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master
  - next
  - release
variables:
  ExternalDataVersion: 1.2.0
jobs:

  - job: WindowsR
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 300
    pool:
      vmImage: 'windows-latest'
    steps:
      - template: templates/git-download-steps.yml
      - pwsh: |
          choco install r.project -y --no-progress
          Invoke-WebRequest "https://github.com/hannesmuehleisen/choco-rtools/raw/master/rtools.3.5.0.nupkg" -OutFile "..\rtools.3.5.0.nupkg"
          choco install rtools -s ..\rtools.3.5.0.nupkg -f -y --no-progress
          choco install ninja
          # Set the timezone
          tzutil /s "GMT Standard Time"
        displayName: 'Installing R, rtools and ninja'
      - pwsh: |
          Write-Host "##vso[task.setvariable variable=PATH]C:\Rtools\bin;C:\Rtools\mingw_64\bin;${env:PATH};C:\Progra~1\R\R-3.6.1\bin"
        displayName: 'Setting PATH'
      - script: |
          cmake --version
          which R
          gcc --version
          ctest -S "$(Build.SourcesDirectory)/Testing/CI/Azure/azure.cmake" -V -j 4
        displayName: Build and test
        env:
          CTEST_CONFIGURATION_TYPE: MinSizeRel
          CTEST_OUTPUT_ON_FAILURE: 1
          CTEST_CMAKE_GENERATOR: "Ninja"
          DASHBOARD_BRANCH_DIRECTORY: $(Agent.BuildDirectory)/SimpleITK-dashboard
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
          CXXFLAGS: "--param ggc-min-expand=0 --param ggc-min-heapsize=2648000"
          CFLAGS: "--param ggc-min-expand=0 --param ggc-min-heapsize=2648000"
          CTEST_CACHE: |
            BUILD_DOCUMENTS:BOOL=OFF
            BUILD_EXAMPLES:BOOL=ON
            BUILD_SHARED_LIBS:BOOL=OFF
            BUILD_TESTING:BOOL=ON
            WRAP_DEFAULT:BOOL=OFF
            WRAP_R:BOOL=ON
        workingDirectory: $(Agent.BuildDirectory)
      - script: |
          ls $(Agent.BuildDirectory)/
          grep CMAKE_CXX_COMPILER_ID -r $(Agent.BuildDirectory)/
        condition: succeededOrFailed()
        displayName: Diagnostics
      - script: |
          ci_addons ctest_junit_formatter $(Build.SourcesDirectory)-build > $(Agent.BuildDirectory)/JUnitTestResults.xml
        condition: succeededOrFailed()
        displayName: 'Format CTest output in JUnit format'
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: "$(Agent.BuildDirectory)/JUnitTestResults.xml"
          testRunTitle: 'CTest $(Agent.OS)'
        condition: succeededOrFailed()
        displayName: 'Publish test results'
