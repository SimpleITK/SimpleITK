# These pipelines are executed on every PR, and merge. They should provide quick
# coverage for the common wrapped language and the SimpleITK core and examples.

trigger:
  - master
  - next
  - release
jobs:
  - job: WindowsR
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 300
    pool:
      vmImage: 'windows-latest'
    steps:
      - template: templates/git-download-steps.yml
      - pwsh: |
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyInstaller.psm1"
          choco install -y rtools
          choco install -y r.project --params "'/AddToPath'"
          #choco install -y ninja
          refreshenv
          # Set the timezone
          tzutil /s "GMT Standard Time"
        displayName: 'Installing R and rtools'
      - pwsh: |
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyInstaller.psm1"
          refreshenv
          c:\rtools40\usr\bin\bash -login $(Build.SourcesDirectory)/Testing/CI/Azure/scripts/win_rtools_setup.sh
        displayName: 'pacman stuff - tbb'
        env:
          MSYS2_PATH_TYPE: inherit
          MSYSTEM: MSYS
      - pwsh: |
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyInstaller.psm1"
          refreshenv
          c:\rtools40\usr\bin\bash -login $(Build.SourcesDirectory)/Testing/CI/Azure/scripts/win_rtools_build.sh
          echo "Done"
        displayName: 'RTools build and test'
        env:
          MSYS2_PATH_TYPE: inherit
          MSYSTEM: MINGW64
          CTEST_CONFIGURATION_TYPE: MinSizeRel
          CTEST_OUTPUT_ON_FAILURE: 1
          CTEST_CMAKE_GENERATOR: MSYS Makefiles
          CTEST_BUILD_FLAGS: -j2
          DASHBOARD_BRANCH_DIRECTORY: $(Agent.BuildDirectory)/SimpleITK-dashboard
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
          CTEST_CACHE: |
            CMAKE_MODULE_LINKER_FLAGS:STRING=-Wl,--hash-size=31
            CMAKE_VERBOSE_MAKEFILE:BOOL=ON
            EXTERNAL_ITK_Module_ITKTBB:BOOL=ON
            BUILD_DOCUMENTS:BOOL=OFF
            BUILD_EXAMPLES:BOOL=OFF
            BUILD_SHARED_LIBS:BOOL=OFF
            BUILD_TESTING:BOOL=OFF
            ITK_GIT_TAG=8307a0b784c0271d45256cdf9626452eef37ab0b
            WRAP_DEFAULT:BOOL=OFF
            WRAP_R:BOOL=ON
            WRAP_TCL:BOOL=OFF
            WRAP_PYTHON:BOOL=OFF
        workingDirectory: $(Agent.BuildDirectory)

  - job: Linux
    timeoutInMinutes: 0
    pool:
      name: 'Default'
      demands:
      - Agent.OS -equals Linux
    variables:
      PYTHONUSERBASE: $(Agent.BuildDirectory)/.pypkgs
    workspace:
      clean: all
    steps:
      - template: templates/git-download-steps.yml
      - script: |
          mkdir -p ${PYTHONUSERBASE}
          python --version
          python -m site --user-site
          python -m pip install --upgrade --user pip
          python -m pip install --user setuptools
          python -m pip install --user numpy scikit-ci-addons
        displayName: 'Install python tools and dependency'
      - bash: |
          set -x
          c++ --version
          cmake --version
          ninja --version
          ctest -S ${BUILD_SOURCESDIRECTORY}/Testing/CI/Azure/azure.cmake -V -j 4
        displayName: Build and test
        env:
          CTEST_CONFIGURATION_TYPE: MinSizeRel
          CTEST_OUTPUT_ON_FAILURE: 1
          DASHBOARD_BRANCH_DIRECTORY: $(Agent.BuildDirectory)/SimpleITK-dashboard
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
          CTEST_CACHE: |
            BUILD_DOCUMENTS:BOOL=OFF
            BUILD_EXAMPLES:BOOL=ON
            BUILD_SHARED_LIBS:BOOL=OFF
            BUILD_TESTING:BOOL=ON
            WRAP_DEFAULT:BOOL=OFF
            WRAP_R:BOOL=OFF
            WRAP_PYTHON:BOOL=ON
        workingDirectory: $(Agent.BuildDirectory)
      - script: |
          python -m ci_addons ctest_junit_formatter $(Build.SourcesDirectory)-build > $(Agent.BuildDirectory)/JUnitTestResults.xml
        condition: succeededOrFailed()
        displayName: 'Format CTest output in JUnit format'
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: "$(Agent.BuildDirectory)/JUnitTestResults.xml"
          testRunTitle: 'CTest $(Agent.OS)'
        condition: succeededOrFailed()
        displayName: 'Publish test results'

  - job: macOS
    timeoutInMinutes: 0
    variables:
      imageName: 'macos-10.14'
      xcodeVersion: 10.2
    pool:
      vmImage: $(imageName)

    steps:
      - template: templates/git-download-steps.yml
      - task: UsePythonVersion@0
        displayName: Enable Python
        inputs:
          versionSpec: '3.6'
          architecture: 'x64'
          addToPath: true
      - script: |
          python --version
          sudo python -m pip install setuptools numpy
          sudo python -m pip install ninja scikit-ci-addons
        displayName: 'Install ninja dependency'
      - bash: |
          set -x
          xcode-select -p
          sudo xcode-select -s /Applications/Xcode_$(xcodeVersion).app/Contents/Developer/
          xcode-select -p
          c++ --version
          cmake --version
          ninja --version
          ctest -S ${BUILD_SOURCESDIRECTORY}/Testing/CI/Azure/azure.cmake -V -j 2
        displayName: Build and test
        env:
          CTEST_CONFIGURATION_TYPE: MinSizeRel
          CTEST_OUTPUT_ON_FAILURE: 1
          DASHBOARD_BRANCH_DIRECTORY: $(Agent.BuildDirectory)/SimpleITK-dashboard
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
          CTEST_CACHE: |
            BUILD_DOCUMENTS:BOOL=OFF
            BUILD_EXAMPLES:BOOL=ON
            BUILD_SHARED_LIBS:BOOL=OFF
            BUILD_TESTING:BOOL=ON
            WRAP_DEFAULT:BOOL=OFF
            WRAP_PYTHON:BOOL=ON
            WRAP_JAVA:BOOL=ON
        workingDirectory: $(Agent.BuildDirectory)
      - script: |
          python -m ci_addons ctest_junit_formatter $(Build.SourcesDirectory)-build > $(Agent.BuildDirectory)/JUnitTestResults.xml
        condition: succeededOrFailed()
        displayName: 'Format CTest output in JUnit format'
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: "$(Agent.BuildDirectory)/JUnitTestResults.xml"
          testRunTitle: 'CTest $(Agent.OS)'
        condition: succeededOrFailed()
        displayName: 'Publish test results'

  - job: Windows
    timeoutInMinutes: 0
    pool:
      vmImage: 'vs2017-win2016'
    steps:
      - template: templates/git-download-steps.yml
      - task: UsePythonVersion@0
        displayName: Enable Python
        inputs:
          versionSpec: '3.6'
          architecture: 'x64'
          addToPath: true
      - script: |
          python --version
          python -m pip install setuptools numpy
          python -m pip install ninja scikit-ci-addons
        displayName: 'Install ninja dependency'
      - script: |
          cmake --version
          ctest -S "$(Build.SourcesDirectory)/Testing/CI/Azure/azure.cmake" -V -j 4
        displayName: Build and test
        env:
          CTEST_CONFIGURATION_TYPE: MinSizeRel
          CTEST_OUTPUT_ON_FAILURE: 1
          CTEST_CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
          CTEST_CMAKE_GENERATOR_TOOLSET: v141,host=x64
          DASHBOARD_BRANCH_DIRECTORY: $(Agent.BuildDirectory)/SimpleITK-dashboard
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
          CXXFLAGS: /MP
          CFLAGS: /MP
          CTEST_CACHE: |
            BUILD_DOCUMENTS:BOOL=OFF
            BUILD_EXAMPLES:BOOL=ON
            BUILD_SHARED_LIBS:BOOL=OFF
            BUILD_TESTING:BOOL=ON
            WRAP_DEFAULT:BOOL=OFF
            WRAP_CSHARP:BOOL=OFF
            WRAP_PYTHON:BOOL=ON
        workingDirectory: $(Agent.BuildDirectory)
      - script: |
          python -m ci_addons ctest_junit_formatter $(Build.SourcesDirectory)-build > $(Agent.BuildDirectory)/JUnitTestResults.xml
        condition: succeededOrFailed()
        displayName: 'Format CTest output in JUnit format'
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: "$(Agent.BuildDirectory)/JUnitTestResults.xml"
          testRunTitle: 'CTest $(Agent.OS)'
        condition: succeededOrFailed()
        displayName: 'Publish test results'
