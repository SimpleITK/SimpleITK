#==========================================================================
#
#   Copyright NumFOCUS
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#          http://www.apache.org/licenses/LICENSE-2.0.txt
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#==========================================================================*/

# WARNING: DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.

# This is Tcl code to test {{ name }}

set inputs {{ number_of_inputs | default(1) }}

if { [llength [set argv]] < ( [set inputs] + 1 ) } {
  puts "Usage: {{ name }} tag <input(s)> output"
  exit 1
}
set tag [lindex [set argv] 0]
set ValidTags ""
ImageFileWriter writer
{{ name }} filter

{% for test in tests %}
lappend ValidTags "{{ test.tag }}"
if { [set tag] == "{{ test.tag }}" } {
{% for setting in test.settings %}
{% if setting.parameter == "SeedList" and setting.tcl_value %}
  filter ClearSeeds
{% for value in setting.tcl_value %}
  filter AddSeed [list {{ value }}]
{% endfor %}
{% elif setting.parameter == "TrialPoints" and setting.tcl_value %}
  filter ClearTrialPoints
{% for value in setting.tcl_value %}
  filter AddTrialPoint [list {{ value }}]
{% endfor %}
{% elif setting.parameter == "TrialPoints" %}
  filter ClearTrialPoints
{% for value in setting.value %}
  filter AddTrialPoint [list {{ value }}]
{% endfor %}
{% elif setting.point_vec %}
  filter Clear{{ setting.parameter }}
{% for value in setting.tcl_value %}
  filter Add{{ setting.parameter | regex_replace('s([0-9]?)$', '\\1') }} [list {{ value }}]
{% endfor %}
{% elif setting.tcl_value %}
  filter Set{{ setting.parameter }} {{ setting.tcl_value }}
{% elif setting.dim_vec %}
  filter Set{{ setting.parameter }} [list {{ setting.value | join(' ') }}]
{% else %}
  filter Set{{ setting.parameter }} {{ setting.value }}
{% endif %}
{% endfor %}

  set inputs {}
  for {set i 1} { $i < $argc-1 } {incr i } {
      puts "reading [lindex $argv $i]"
      lappend inputs [ ReadImage [lindex $argv $i] ]
  }

{% if test.inputA_cast %}
      set inputs [lreplace $inputs 0 0 [ Cast [lindex $inputs 0] [set {{ test.inputA_cast }}] ] ]
{% endif %}
{% if test.inputB_cast %}
      set inputs [lreplace $inputs 1 1 [ Cast [lindex $inputs 1] [set {{ test.inputB_cast }}] ] ]
{% endif %}

  set output [eval filter Execute $inputs ]
{% if not no_return_image -%}
  set labelIDs [ list [set sitkLabelUInt8] [set sitkLabelUInt16] [set sitkLabelUInt32] [set sitkLabelUInt64] ]
  if { [lsearch $labelIDs [$output GetPixelIDValue] ] >= 0 } {
      set output [ LabelMapToLabel $output ]
  }
  writer UseCompressionOn
  writer SetFileName [lindex $argv end]
  writer Execute $output

{%- endif %}
  exit
}
{% endfor %}

puts stderr "Tag [set tag] was not found, must be one of [set ValidTags]"
exit 1
