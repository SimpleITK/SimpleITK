#==========================================================================
#
#   Copyright NumFOCUS
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#          http://www.apache.org/licenses/LICENSE-2.0.txt
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#==========================================================================*/

# WARNING: DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.

# This is R code to test {{ name }}

library(SimpleITK)

inputs <- {{ number_of_inputs | default(1) }}

# arguments after --args
args <- commandArgs(TRUE)

numberOfArguments <- length(args)

if (numberOfArguments < inputs + 2) {
    print("Usage: {{ name }} tag <input(s)> output")
    quit(save="no", status=1)
}

# print each value of args
for (i in 1:numberOfArguments) {
    print(paste("args[", i, "] = ", args[[i]], sep=""))
}

tag <- args[[1]]
writer <- ImageFileWriter()
filter <- {{ name }}()

{% if tests|length == 0 %}
print('No tests defined!')
quit(save="no", status=1)
{% endif %}

lastargument <- tail(args, 1)
args <- head(args, -1)

{% for test in tests %}
if (tag == "{{ test.tag }}") {
{%- for setting in test.settings %}
{%- if setting.parameter == "SeedList" %}
  filter$ClearSeeds()
{%- for value in setting.R_value %}
  filter$AddSeed({{ value }})
{% endfor %}
{%- elif setting.R_value %}
  filter$Set{{ setting.parameter }}({{ setting.R_value }})
{%- elif setting.dim_vec %}
  filter$Set{{ setting.parameter }}(c({{ setting.value | join(", ") }}))
{%- else %}
  filter$Set{{ setting.parameter }}({{ setting.value }})
{%- endif %}
{% endfor %}




  inputs <- lapply(tail(args, -1), ReadImage)

# print length of inputs
  print(paste("length(inputs) = ", length(inputs), sep=""))

{% if test.inputA_cast %}
  inputs[[1]] <- Cast(inputs[[1]], '{{ test.inputA_cast }}')
{% endif %}
{% if test.inputB_cast %}
  inputs[[2]] <- Cast(inputs[[2]], '{{ test.inputB_cast }}')
{% endif %}

  output <- filter$Execute({% if test.inputs|length > 0 %}inputs[[1]]{% endif %}{% for i in range(2, test.inputs|length + 1) %}, inputs[[{{ i }}]]{% endfor %})

{% if not no_return_image %}
  pixelID <- output$GetPixelID()

  if (pixelID == 'sitkLabelUInt8' || pixelID == 'sitkLabelUInt16' || pixelID == 'sitkLabelUInt32' || pixelID == 'sitkLabelUInt64') {
    output <- LabelMapToLabel(output)
  }

  writer$UseCompressionOn()
  writer$SetFileName(lastargument)
  writer$Execute(output)
{% endif %}

}
{% endfor %}

quit(save="no", status=0)
