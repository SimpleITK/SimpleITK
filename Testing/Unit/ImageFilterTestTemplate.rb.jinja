#==========================================================================
#
#   Copyright NumFOCUS
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#          http://www.apache.org/licenses/LICENSE-2.0.txt
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#==========================================================================

#
# WARNING: DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
# Please look at RubyImageFilterTestTemplate.rb.jinja to make changes.
#

# This is Ruby code to test {{ name }}
require 'simpleitk'

inputs = {{ number_of_inputs|default(1) }}

if ARGV.length < inputs + 2 then
    puts("Usage: {{ name }} tag <input(s)> output")
    exit(1)
end

tag = ARGV[0]

reader = Simpleitk::ImageFileReader.new
writer = Simpleitk::ImageFileWriter.new
filter = Simpleitk::{{ name }}.new

{% if tests|length == 0 %}
puts("No tests defined!")
exit(1)
{% endif %}

{% for test in tests %}
if tag == "{{ test.tag }}" then

  {% for setting in test.settings %}
  {% if setting.parameter == "SeedList" and setting.ruby_value %}
  filter.clear_seeds()
  {% for value in setting.ruby_value %}
  v = Simpleitk::VectorUInt32.new
  for i in {{ value }} do v << i end
  filter.add_seed(v)
  {% endfor %}
  {% elif setting.parameter == "TrialPoints" and setting.ruby_value %}
  filter.clear_trial_points()
  {% for value in setting.ruby_value %}
  v = Simpleitk::VectorUInt32.new
  for i in {{ value }} do v << i end
  filter.add_trial_point(v)
  {% endfor %}
  {% elif setting.dim_vec == 1 %}
  {% if setting.type == "bool" %}
  v = Simpleitk::VectorBool.new
  {% elif setting.type == "uint8_t" %}
  v = Simpleitk::VectorUInt8.new
  {% elif setting.type == "int" %}
  v = Simpleitk::VectorInt32.new
  {% elif setting.type == "double" %}
  v = Simpleitk::VectorDouble.new
  {% else %}
  v = Simpleitk::VectorUInt32.new
  {% endif %}

   for i in
{%- if ruby_value -%}
  {{ ruby_value }}
{%- else -%}
  [ {{ setting.value | join(', ') }} ]
  {%- endif -%}
     do v << i end
  filter.set_{{ setting.parameter|regex_replace("([a-z])([A-Z])", "\\1_\\2")|lower }}(v)
  {% else %}
  filter.set_{{ setting.parameter|regex_replace("([a-z])([A-Z])", "\\1_\\2")|lower }}({{ setting.ruby_value|default(setting.value) }})
  {% endif %}
  {% endfor %}

  inputs = []
  for i in 1..ARGV.length-2
    puts "reading.." + ARGV[i]
    inputs.push(Simpleitk::read_image(ARGV[i]))
  end

  {% if test.inputA_cast %}
  caster = Simpleitk::CastImageFilter.new
  caster.set_output_pixel_type(Simpleitk::{{ test.inputA_cast|ruby_capitalize }})
  inputs[0] = caster.execute(inputs[0])
  {% endif %}
  {% if test.inputB_cast %}
  caster = Simpleitk::CastImageFilter.new
  caster.set_output_pixel_type(Simpleitk::{{ test.inputB_cast|ruby_capitalize }})
  inputs[1] = caster.execute(inputs[1])
  {% endif %}

  output = filter.execute(*inputs)

  {% if not no_return_image %}
  labelIDs = [Simpleitk::SitkLabelUInt8, Simpleitk::SitkLabelUInt16, Simpleitk::SitkLabelUInt32, Simpleitk::SitkLabelUInt64]
  if labelIDs.include?(output.get_pixel_id()) then
    caster = Simpleitk::LabelMapToLabelImageFilter.new
    output = caster.execute(output)
  end
  writer.use_compression_on()
  writer.set_file_name(ARGV[ARGV.length-1])
  writer.execute(output)
  {% endif %}
end
{% endfor %}
