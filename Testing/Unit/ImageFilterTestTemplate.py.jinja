#==========================================================================
#
#   Copyright NumFOCUS
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#          http://www.apache.org/licenses/LICENSE-2.0.txt
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#==========================================================================*/

# WARNING: DO NOT EDIT THIS FILE!
# THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.

# This is Python code to test {{ name }}
import SimpleITK
import sys

inputs = {{ number_of_inputs | default(1) }}

if len(sys.argv) < inputs + 2:
    print("Usage: {{ name }} tag <input(s)> output")
    sys.exit(1)

tag = sys.argv[1]

reader = SimpleITK.ImageFileReader()
writer = SimpleITK.ImageFileWriter()
filter = SimpleITK.{{ name }}()

{% if tests|length == 0 %}
print("No tests defined!")
sys.exit(1)
{% endif %}

{% for test in tests %}
if tag == "{{ test.tag }}":
    {% for setting in test.settings %}
    {% if setting.parameter == "SeedList" and setting.python_value %}
    filter.ClearSeeds()
    {% for value in setting.python_value %}
    filter.AddSeed({{ value }})
    {% endfor %}
    {% elif setting.parameter == "TrialPoints" and setting.python_value %}
    filter.ClearTrialPoints()
    {% for value in setting.python_value %}
    filter.AddTrialPoint({{ value }})
    {% endfor %}
    {% elif setting.python_value %}
    filter.Set{{ setting.parameter }}({{ setting.python_value }})
    {% elif setting.dim_vec and setting.dim_vec == 1 %}
    filter.Set{{ setting.parameter }}(({{ setting.value | join(", ") }}))
    {% else %}
    filter.Set{{ setting.parameter }}({{ setting.value }})
    {% endif %}
    {% endfor %}

    inputs = []

    for i in range(2, len(sys.argv) - 1):
        print("reading", sys.argv[i])
        inputs.append(SimpleITK.ReadImage(sys.argv[i]))

    {% if test.inputA_cast %}
    inputs[0] = SimpleITK.Cast(inputs[0], SimpleITK.{{ test.inputA_cast }})
    {% endif %}

    {% if test.inputB_cast %}
    inputs[1] = SimpleITK.Cast(inputs[1], SimpleITK.{{ test.inputB_cast }})
    {% endif %}

    {% if not no_return_image %}output = {% endif %}filter.Execute(*tuple(inputs))

    labelIDs = [SimpleITK.sitkLabelUInt8, SimpleITK.sitkLabelUInt16, SimpleITK.sitkLabelUInt32, SimpleITK.sitkLabelUInt64]
    {% if not no_return_image %}
    # no_return_image: {{ no_return_image }}
    if output.GetPixelIDValue() in labelIDs:
        output = SimpleITK.LabelMapToLabel(output)

    writer.UseCompressionOn()
    writer.SetFileName(sys.argv[-1])
    writer.Execute(output)
    {% endif %}
{% endfor %}
