/*=========================================================================
 *
 *  Copyright NumFOCUS
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/

/*
 * WARNING: DO NOT EDIT THIS FILE!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
 * Please look at ImageFilterTestTemplate.java.jinja to make changes.
 */

import java.math.BigInteger;
import org.itk.simple.*;
import java.util.Arrays;

class {{ name }}Test {

  public static long ConvertFixUInt64(long referenceType, long value) {
    return value;
  }

  public static BigInteger ConvertFixUInt64(BigInteger referenceType, long value) {
    return BigInteger.valueOf(value);
  }

  public static void main(String argv[]) {

    // Get the right number of inputs
    int num_inputs = {{ number_of_inputs | default(1) }};

    // Check the command line arguments
    if (argv.length < num_inputs + 1) {
      System.out.println("Usage: {{ name }} tag <input(s)> output");
      return;
    }

    String tag = argv[0];

    // Instantiate objects
    ImageFileReader reader = new ImageFileReader();
    ImageFileWriter writer = new ImageFileWriter();
    {{ name }} filter = new {{ name }}();

    {% if tests|length == 0 %}
    // No tests defined => exit with error code
    System.out.println("No tests defined!");
    System.exit(1);
    {% endif %}

    // Run each test
    {% for test in tests %}
    if (tag.equals("{{ test.tag }}")) {

      Image[] inputs;
      inputs = new Image[{{ test.inputs|length }}];

      // Read image(s)
      {% for i in range(test.inputs|length) %}
      reader.setFileName(argv[{{ i + 1 }}]);
      inputs[{{ i }}] = reader.execute();
      {% endfor %}

      CastImageFilter caster = new CastImageFilter();
      {% if test.inputA_cast %}
      caster.setOutputPixelType(PixelIDValueEnum.{{ test.inputA_cast }});
      inputs[0] = caster.execute(inputs[0]);
      {% endif %}
      {% if test.inputB_cast %}
      caster.setOutputPixelType(PixelIDValueEnum.{{ test.inputB_cast }});
      inputs[1] = caster.execute(inputs[1]);
      {% endif %}

      {% for setting in test.settings %}
      {% if setting.parameter == "SeedList" %}
      filter.clearSeeds();
      {% for value in setting.value %}
      {
        long v[] = {{ value }};
        VectorUInt32 idx = new VectorUInt32(v);
        filter.addSeed(idx);
      }
      {% endfor %}
      {% elif setting.parameter == "TrialPoints" %}
      filter.clearTrialPoints();
      {% for value in setting.value %}
      {
        long v[] = {{ value }};
        VectorUInt32 idx = new VectorUInt32(v);
        filter.addTrialPoint(idx);
      }
      {% endfor %}
      {% elif setting.point_vec == 1 %}
      filter.clear{{ setting.parameter }}();
      {% for value in setting.value %}
      {
        long v[] = {{ value }};
        VectorUInt32 pts = new VectorUInt32(v);
        filter.add{{ setting.parameter | regex_replace('s([0-9]?)$', '\\1')  }}(pts);
      }
      {% endfor %}
      {% elif setting.dim_vec == 1 %}
      {
        {% if  setting.type == "bool" -%}
          Boolean
        {%- elif setting.type == "unsigned int" -%}
          long
        {%- elif setting.type == "unsigned long" -%}
          long
        {%- elif setting.type == "unsigned short" -%}
          int
        {%- elif setting.type == "uint8_t" -%}
          short
        {%- elif setting.type == "uint16_t" -%}
          int
        {%- elif setting.type == "uint32_t" -%}
          long
        {%- elif setting.type == "uint64_t" -%}
          long
        {%- else -%}
          {{ setting.type }}
        {%- endif %}  v[] = {% if setting.java_value %}{{ setting.java_value }}{% else %}{ {% for v in setting.value %}{{ v }}{% if not loop.last %}, {% endif %}{% endfor %}{% endif %} };
        {% if setting.type == "bool" %}
        VectorBool idx = new VectorBool();
        for (int i = 0; i < v.length; i++) {
          idx.add(i, v[i]);
        }
        {% elif setting.type == "unsigned int" %}
         VectorUInt32 idx = new VectorUInt32(v);
        {% elif setting.type == "int" %}
          VectorInt32 idx = new VectorInt32(v);
        {% elif setting.type == "unsigned long" %}
          VectorULong idx = new VectorULong(v);
        {% elif setting.type == "long" %}
          VectorLong idx = new VectorLong(v);
        {% elif setting.type == "unsigned short" %}
          VectorUShort idx = new VectorUShort(v);
        {% elif setting.type == "short" %}
          VectorShort idx = new VectorShort(v);
        {% elif setting.type == "float" %}
          VectorFloat idx = new VectorFloat(v);
        {% elif setting.type == "double" %}
          VectorDouble idx = new VectorDouble(v);
        {% elif setting.type == "uint8_t" %}
          VectorUInt8 idx = new VectorUInt8(v);
        {% elif setting.type == "uint16_t" %}
          VectorUInt16 idx = new VectorUInt16(v);
        {% elif setting.type == "uint32_t" %}
          VectorUInt32 idx = new VectorUInt32(v);
        {% elif setting.type == "uint64_t" %}
          VectorUInt64 idx = new VectorUInt64(v);
        {% elif setting.type == "int8_t" %}
          VectorInt8 idx = new VectorInt8(v);
        {% elif setting.type == "int16_t" %}
          VectorInt16 idx = new VectorInt16(v);
        {% elif setting.type == "int32_t" %}
          VectorInt32 idx = new VectorInt32(v);
        {% elif setting.type == "int64_t" %}
          VectorInt64 idx = new VectorInt64(v);
        {% else %}
          // Unknown type: {{ setting.type }}
        {% endif %}
        filter.set{{ setting.parameter }}(idx);
      }
      {% elif setting.type == "uint64_t" %}
      filter.set{{ setting.parameter }}(ConvertFixUInt64(filter.get{{ setting.parameter }}(), {{ setting.value|default('') }}));
      {% else %}
      filter.set{{ setting.parameter }}({{ setting.java_value if setting.java_value else setting.value }});
      {% endif %}
      {% endfor %}

      // Run the filter
      {% if not no_return_image %}Image output = {% endif %}filter.execute({% for inum in range(test.inputs|length) %}inputs[{{ inum }}]{% if not loop.last %}, {% endif %}{% endfor %});

      PixelIDValueEnum[] labelIDs = {PixelIDValueEnum.sitkLabelUInt8, PixelIDValueEnum.sitkLabelUInt16, PixelIDValueEnum.sitkLabelUInt32, PixelIDValueEnum.sitkLabelUInt64};

      {% if not no_return_image %}
      if (Arrays.asList(labelIDs).contains(output.getPixelID())) {
        LabelMapToLabelImageFilter toImage = new LabelMapToLabelImageFilter();
        output = toImage.execute(output);
      }

      // Write output
      writer.useCompressionOn();
      writer.setFileName(argv[argv.length - 1]);
      writer.execute(output);
      {% endif %}
    }
    {% endfor %}
  }
}
