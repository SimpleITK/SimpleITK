/*
 * WARNING: DO NOT EDIT THIS FILE!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
 * Please look at JavaImageFilterTestTemplate.java.in to make changes.
 */

package org.itk.simple.testing;
// This is Java code to test ${name}
import org.itk.simple.*;

class ${name}ImageFilterTest {

  public static void main( String argv[] ) {

    // Get the right number of inputs
    int inputs = 1;
    $(if number_of_inputs then
        OUT=[[inputs = ${number_of_inputs};]]
      end)

    // Check the command line arguments
    if ( argv.length < inputs + 1 ) {
      System.out.println("Usage: ${name} tag <input(s)> output");
      return;
    }

    String tag = argv[0];

    // Instantiate objects
    ImageFileReader reader = new ImageFileReader();
    ImageFileWriter writer = new ImageFileWriter();
    ${name}ImageFilter filter = new ${name}ImageFilter();

    $(if #tests == 0 then
    OUT=[[
    // No tests defined => exit with error code
    System.out.println ( "No tests defined!" );
    System.exit ( 1 );
    ]]
    end)

    // Run each test
$(foreach tests
    if (tag.equals( "${tag}" )) {

      // Read image(s)
      Image inputA = reader.setFileName( argv[1] ).execute();
$(if inputB then
      OUT=[[
      Image inputB = reader.setFileName ( argv[2] ).execute();]]
end)

      $(when settings
      // Set parameters
      $(foreach settings
$(if parameter == "SeedList" then
      OUT=[[filter.clearSeeds();
      $(for i=1,#value do OUT=OUT .. "{\
        int v[] = " .. value[i] .. ";\
        VectorUInt32 idx = new VectorUInt32();\
        for (int i = 0; i < inputA.getDimension(); i++) {\
          idx.push_back(v[i]);\
        }\
        filter.addSeed(idx);\
      }\
      " end)]]
elseif dim_vec == 1 then
      OUT=[[
      {
        $(if type == "bool" then
          OUT="Boolean"
        elseif type == "unsigned int" then
          OUT="int"
        elseif type == "unsigned long" then
          OUT="long"
        elseif type == "unsigned short" then
          OUT="short"
        elseif type == "uint8_t" then
          OUT="short"
        elseif type == "uint16_t" then
          OUT="short"
        elseif type == "uint32_t" then
          OUT="int"
        elseif type == "uint64_t" then
          OUT="long"
        else
          OUT="${type}"
        end) v[] = $(if java_value then OUT='${java_value}' else OUT='${value}' end);
        $(if type == "bool" then
          OUT="VectorBool idx = new VectorBool( inputA.getDimension() );"
        elseif type == "unsigned int" then
          OUT="VectorUInt32 idx = new VectorUInt32( inputA.getDimension() );"
        elseif type == "int" then
          OUT="VectorInt idx = new VectorInt( inputA.getDimension() );"
        elseif type == "unsigned long" then
         OUT="VectorULong idx = new VectorULong( inputA.getDimension() );"
        elseif type == "long" then
         OUT="VectorLong idx = new VectorLong( inputA.getDimension() );"
        elseif type == "unsigned short" then
          OUT="VectorUShort idx = new VectorUShort( inputA.getDimension() );"
        elseif type == "short" then
          OUT="VectorShort idx = new VectorShort( inputA.getDimension() );"
        elseif type == "float" then
          OUT="VectorFloat idx = new VectorFloat( inputA.getDimension() );"
        elseif type == "double" then
          OUT="VectorDouble idx = new VectorDouble( inputA.getDimension() );"
        elseif type == "uint8_t" then
          OUT="VectorUInt16 idx = new VectorUInt16( inputA.getDimension() );"
        elseif type == "uint16_t" then
          OUT="VectorUInt16 idx = new VectorUInt16( inputA.getDimension() );"
        elseif type == "uint32_t" then
          OUT="VectorUInt32 idx = new VectorUInt32( inputA.getDimension() );"
        elseif type == "uint64_t" then
          OUT="VectorUInt64 idx = new VectorUInt64( inputA.getDimension() );"
        elseif type == "int8_t" then
          OUT="VectorInt16 idx = new VectorInt16( inputA.getDimension() );"
        elseif type == "int16_t" then
          OUT="VectorInt16 idx = new VectorInt16( inputA.getDimension() );"
        elseif type == "int32_t" then
          OUT="VectorInt32 idx = new VectorInt32( inputA.getDimension() );"
        elseif type == "int64_t" then
          OUT="VectorInt64 idx = new VectorInt63( inputA.getDimension() );"
        end)
       
        for (int i = 0; i < inputA.getDimension( ); i++) {
          idx.set( i, v[i] );
        }
        filter.set${parameter}(idx);
      }]]
else
OUT=[[
      filter.set${parameter}( $(if java_value then OUT='${java_value}' else OUT='${value}' end) );]]
end)
)
)

      // Run the filter
$(if inputB then
      OUT=[[
      Image output = filter.execute ( inputA, inputB );]]
else
      OUT=[[
      Image output = filter.execute ( inputA );]]
end)

      // Write output
      writer.setFileName( argv[argv.length - 1] ).execute( output );
    }
)
  }
}
