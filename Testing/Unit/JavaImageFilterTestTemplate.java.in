package org.itk.simple.testing;
// This is Java code to test ${name}
import org.itk.simple.*;

class ${name}ImageFilterTest {

  public static void main( String argv[] ) {

    // Get the right number of inputs
    int inputs = 1;
    $(if number_of_inputs then
        OUT=[[inputs = ${number_of_inputs};]]
      end)

    // Check the command line arguments
    if ( argv.length < inputs + 1 ) {
      System.out.println("Usage: ${name} tag <input(s)> output");
      return;
    }

    String tag = argv[0];

    // Instantiate objects
    ImageFileReader reader = new ImageFileReader();
    ImageFileWriter writer = new ImageFileWriter();
    ${name}ImageFilter filter = new ${name}ImageFilter();

    $(if #tests == 0 then
    OUT=[[
    // No tests defined => exit with error code
    System.out.println ( "No tests defined!" );
    System.exit ( 1 );
    ]]
    end)

    // Run each test
$(foreach tests
    if (tag.equals( "${tag}" )) {

      // Read image(s)
      SmartPointerImage inputA = reader.setFileName( argv[1] ).execute();
$(if inputB then
      OUT=[[
      SmartPointerImage inputB = reader.setFileName ( argv[2] ).execute();]]
end)

      $(when settings 
      // Set parameters
      $(foreach settings
$(if parameter == "SeedList" then
      OUT=[[filter.clearSeeds();
      $(for i=1,#value do OUT=OUT .. "{\
        int v[] = " .. value[i] .. ";\
        VectorUInt idx = new VectorUInt();\
        for (int i = 0; i < inputA.getDimension(); i++) {\
          idx.push_back(v[i]);\
        }\
        filter.addSeed(idx);\
      }\
      " end)]]
elseif dim_vec == 1 then
      OUT=[[
      {
        $(if type == "unsigned int" then
        OUT="int"
        elseif type == "unsigned long" then
        OUT="long"
        elseif type == "unsigned short" then
        OUT="short"
        else OUT="${type}" end) v[] = $(if java_value then OUT='${java_value}' else OUT='${value}' end);
        VectorUInt idx = new VectorUInt();
        for (int i = 0; i < inputA.getDimension(); i++) {
          idx.push_back(v[i]);
        }
        filter.set${parameter}(idx);
      }]]
else
OUT=[[
      filter.set${parameter}( $(if java_value then OUT='${java_value}' else OUT='${value}' end) );]]
end)
)
)

      // Run the filter
$(if inputB then
      OUT=[[
      SmartPointerImage output = filter.execute ( inputA, inputB );]]
else
      OUT=[[
      SmartPointerImage output = filter.execute ( inputA );]]
end)

      // Write output
      writer.setFileName( argv[argv.length - 1] ).execute( output );
    }
)
  }
}
