name: Batch Build and Test

on:
  push:
   branches: ['master', 'release']
  pull_request:
    paths: .github/workflows/BatchBuild.yml
  # Enable manual running of workflow
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }}@${{ github.event.pull_request.head.sha || github.head_ref || github.ref }}'
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build:
    # The CMake configure and build commands are platform-agnostic and should work a cross
    # platforms.
    runs-on: ${{ matrix.os }}
    env:
      CTEST_SOURCE_DIRECTORY: "${{ github.workspace }}"
      CTEST_BINARY_DIRECTORY: "${{ github.workspace }}/bld"
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:

          - os: self-hosted-arm
            cmake-build-type: "Release"
            cmake-generator: "Ninja"
            ctest-cache: |
              WRAP_PYTHON:BOOL=ON
              WRAP_JAVA:BOOL=ON
              WRAP_CSHARP:BOOL=ON
              WRAP_R:BOOL=ON
              WRAP_TCL:BOOL=ON
              WRAP_RUBY:BOOL=ON
              SimpleITK_USE_ELASTIX:BOOL=ON

          - os: self-hosted-x64
            cmake-build-type: "Release"
            cmake-generator: "Ninja"
            ctest-cache: |
              WRAP_PYTHON:BOOL=ON
              SimpleITK_USE_ELASTIX:BOOL=ON

          - os: self-hosted-x64
            cmake-build-type: "Release"
            cmake-generator: "Ninja"
            CXX: "g++-10"
            CC: "gcc-10"
            ctest-cache: |
              ITK_GIT_TAG:STRING=master

          - os: ubuntu-22.04
            cmake-build-type: "Release"
            cmake-generator: "Ninja"
            CXX: "g++-11"
            CC: "gcc-11"
            ctest-cache: |
              WRAP_DEFAULT:BOOL=OFF
          - os: ubuntu-22.04
            cmake-build-type: "Release"
            cmake-generator: "Ninja"
            CXX: "g++-12"
            CC: "gcc-12"
            ctest-cache: |
              WRAP_DEFAULT:BOOL=OFF

          - os: windows-2022
            cmake-build-type: "MinSizeRel"
            cmake-generator: "Visual Studio 17 2022"
            cmake-generator-toolset: v143,host=x64
            cmake-generator-platform: x64
            ctest-cache: |
              SimpleITK_USE_ELASTIX:BOOL=ON
              BUILD_EXAMPLES:BOOL=ON
              CXXFLAGS:STRING= /wd4251 /MP

          - os: windows-2022
            cmake-build-type: "Release"
            cmake-generator: "Visual Studio 17 2022"
            cmake-generator-toolset: v143,host=x64
            cmake-generator-platform: x64
            ctest-cache: |
              WRAP_CSHARP:BOOL=ON
              WRAP_JAVA:BOOL=ON
              CXXFLAGS:STRING= /wd4251 /MP
              BUILD_SHARED_LIBS:BOOL=ON

          - os: windows-2022
            cmake-build-type: "Release"
            cmake-generator: "Visual Studio 17 2022"
            cmake-generator-toolset: v143,host=x64
            cmake-generator-platform: Win32
            ctest-cache: |
              WRAP_DEFAULT:BOOL=OFF

          - os: windows-2022
            cmake-build-type: "Release"
            cmake-generator: "Visual Studio 17 2022"
            cmake-generator-toolset: v142,host=x64
            cmake-generator-platform: x64
            ctest-cache: |
              WRAP_CSHARP:BOOL=ON
              WRAP_PYTHON:BOOL=ON
              CXXFLAGS:STRING= /wd4251 /MP

          - os: macos-12
            cmake-build-type: "Release"
            cmake-generator: "Ninja"
            xcode-version: 13.1
            ctest-cache: |
              SimpleITK_USE_ELASTIX:BOOL=ON
              WRAP_PYTHON:BOOL=ON

          - os: macos-12
            cmake-build-type: "Release"
            cmake-generator: "Ninja"
            xcode-version: 14.2
            ctest-cache: |
              WRAP_PYTHON:BOOL=ON

          - os: macos-12
            cmake-build-type: "Release"
            cmake-generator: "Ninja"
            xcode-version: 13.4.1
            ctest-cache: |
              WRAP_PYTHON:BOOL=ON
              WRAP_JAVA:BOOL=ON
              WRAP_CSHARP:BOOL=ON

          - os: macos-11
            cmake-build-type: "MinSizeRel"
            cmake-generator: "Ninja"
            xcode-version: 12.5.1
            ctest-cache: |

          - os: macos-11
            cmake-build-type: "MinSizeRel"
            cmake-generator: "Ninja"
            xcode-version: 11.7
            ctest-cache: |

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: "${{ github.event.pull_request.head.sha }}"
      - uses: actions/checkout@v3
        with:
          path: SimpleITK-dashboard
          ref: dashboard
      - name: Generate External Data Hash
        shell: bash
        run: |
          git log -n 1 "${{ github.workspace }}/Testing/Data/" | tee "${{ github.workspace }}/external-data.hashable"
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ runner.temp }}/.ExternalData
          key: external-data-v1-${{ hashFiles( format( '{0}/{1}', github.workspace, 'external-data.hashable') ) }}
          enableCrossOsArchive: true
          restore-keys: |
            external-data-v1-
      - name: Set up Python 3.8
        if: matrix.os != 'self-hosted-arm'
        uses: actions/setup-python@v4
        id: cpy
        with:
          python-version: 3.8
      - name: Update Path for shared libraries
        shell: bash
        if: contains( ${{ matrix.ctest-cache }}, 'BUILD_SHARED_LIBS:BOOL=ON' ) && contains( ${{ matrix.os }}, 'windows' )
        run: |
          echo "${{ env.CTEST_BINARY_DIRECTORY }}\ITK-prefix\bin" >> $GITHUB_PATH
          echo "${{ env.CTEST_BINARY_DIRECTORY }}\SimpleITK-build\bin\${{ matrix.cmake-build-type }}" >> $GITHUB_PATH
      - name: Install build dependencies
        if: matrix.os != 'self-hosted-arm'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install ninja cmake~=3.24.0

          if [  ! -z "${{ matrix.xcode-version }}" ]; then
            sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode-version }}.app/Contents/Developer/
            xcode-select -p
          fi

          if [ ! -z "${{ matrix.apt-get-dependencies }}" ]; then
            sudo apt-get update
            sudo apt-get install -y ${{ matrix.apt-get-dependencies }}
          fi

      - name: Build and Test
        shell: bash
        env:
          DASHBOARD_BRANCH_DIRECTORY: "${{ github.workspace }}/SimpleITK-dashboard"
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
          CTEST_CONFIGURATION_TYPE: ${{ matrix.cmake-build-type }}
          CTEST_CMAKE_GENERATOR: "${{ matrix.cmake-generator }}"
          CTEST_CMAKE_GENERATOR_TOOLSET: "${{ matrix.cmake-generator-toolset }}"
          CTEST_CMAKE_GENERATOR_PLATFORM: "${{ matrix.cmake-generator-platform }}"
          CTEST_OUTPUT_ON_FAILURE: 1
          CTEST_CACHE: |
            WRAP_DEFAULT:BOOL=OFF
            BUILD_EXAMPLES:BOOL=ON
            BUILD_TESTING:BOOL=ON
            Python_EXECUTABLE:FILEPATH=${{ steps.cpy.outputs.python-path }}
            ${{ matrix.ctest-cache }}
        run: |
          if [ ! -z "${{ matrix.GCC }} ]; then
            export CC=${{ matrix.CC }}
          fi
          if [ ! -z "${{ matrix.CXX }} ]; then
            export CXX=${{ matrix.CXX }}
          fi

          cmake --version
          ninja --version
          ctest -S ${CTEST_SOURCE_DIRECTORY}/.github/workflows/github_actions.cmake -V -j 2
