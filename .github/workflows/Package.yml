name: Package

on:
  push:
    tags:
      - 'latest'
      - 'v*'
    branches-ignore:
      - '**'
    pull_request:
      paths: .github/workflows/Package.yml



jobs:
  package-docker:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        include:
          - os: self-hosted-arm
            dockerfile: Dockerfile-2014-aarch64
          - os: ubuntu-latest
            dockerfile: Dockerfile-2014-x86_64

    env:
      PYTHON_VERSIONS: "cp38-cp38 cp39-cp39 cp310-cp310 cp311-cp311 cp312-cp312"
      BUILD_CSHARP: 0

    steps:
      - uses: actions/checkout@v4
      - name: Docker Build Image
        shell: bash
        working-directory: Utilities/Distribution/manylinux
        run: |
          docker build --pull=true --rm=true -t simpleitk_manylinux -f "${{ matrix.dockerfile }}"   .
      - name: Build ${{ matrix.dockerfile }}
        shell: bash
        working-directory: Utilities/Distribution/manylinux
        run: |
          docker run --rm \
               --user "$(id -u):$(id -g)" \
               --env SIMPLEITK_GIT_TAG=${{github.ref}} \
               --env PYTHON_VERSIONS \
               --env BUILD_CSHARP \
                -v "$(pwd):/work/io" \
                -t simpleitk_manylinux
      - name: ls
        shell: bash
        working-directory: Utilities/Distribution/manylinux
        run: |
          ls -lhR .
      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels
          path: |
            Utilities/Distribution/manylinux/wheelhouse/*.whl

  build:


    # The CMake configure and build commands are platform-agnostic and should work a cross
    # platforms.
    if: github.repository == 'SimpleITK/SimpleITK'
    runs-on: ${{ matrix.os }}
    env:
      CTEST_SOURCE_DIRECTORY: "${{ github.workspace }}"
      CTEST_BINARY_DIRECTORY: "${{ github.workspace }}/bld"
    strategy:
      max-parallel: 4
      matrix:
        include:
          - os: macos-13
            cmake-build-type: "Release"
            cmake-generator: "Ninja"
            xcode-version: 15.2
            ctest-cache: |
              CMAKE_CXX_FLAGS:STRING=-fvisibility=hidden -fvisibility-inlines-hidden
              CMAKE_C_FLAGS:STRING=-fvisibility=hidden
              CMAKE_OSX_DEPLOYMENT_TARGET=10.9
              ITK_C_OPTIMIZATION_FLAGS:STRING=
              ITK_CXX_OPTIMIZATION_FLAGS:STRING=
    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          path: SimpleITK-dashboard
          ref: dashboard
      - name: Generate External Data Hash
        shell: bash
        run: |
          mkdir -p ${{ runner.temp }}/.ExternalData
          ls -la "${{ github.workspace }}/Testing/Data/"
          git log -n 1 "${{ github.workspace }}/Testing/Data/" | tee "${{ github.workspace }}/external-data.hashable"
      - uses: actions/cache@v4
        id: cache
        with:
          path: ${{ runner.temp }}/.ExternalData
          key: external-data-v1-${{ hashFiles( format( '{0}/{1}', github.workspace, 'external-data.hashable') ) }}
          enableCrossOsArchive: true
          restore-keys: |
            external-data-v1-
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        id: cpy
        with:
          python-version: 3.11

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ninja cmake~=3.22.0

          if [  ! -z "${{ matrix.xcode-version }}" ]; then
            sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode-version }}.app/Contents/Developer/
            xcode-select -p
          fi

      - name: Build and Test
        shell: bash
        env:
          DASHBOARD_BRANCH_DIRECTORY: "${{ github.workspace }}/SimpleITK-dashboard"
          ExternalData_OBJECT_STORES: "${{ runner.temp }}/.ExternalData"
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
          CTEST_CONFIGURATION_TYPE: ${{ matrix.cmake-build-type }}
          CTEST_CMAKE_GENERATOR: "${{ matrix.cmake-generator }}"
          CTEST_OUTPUT_ON_FAILURE: 1
          CTEST_CACHE: |
            WRAP_DEFAULT:BOOL=OFF
            BUILD_EXAMPLES:BOOL=ON
            BUILD_TESTING:BOOL=ON
            ${{ matrix.ctest-cache }}
        run: |
          cmake --version
          ninja --version
          ctest -D "dashboard_track:STRING=Package" -S ${CTEST_SOURCE_DIRECTORY}/.github/workflows/github_actions.cmake -V