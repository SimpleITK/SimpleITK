referenced:
  defaults: &defaults
    docker:
     - image: cimg/python:3.8
    working_directory: ~/
    resource_class: medium
  default_environment_keys:  &default_environment
    <<: &default_environment_keys
      CTEST_DASHBOARD_ROOT: /home/circleci
      CTEST_SOURCE_DIRECTORY: /home/circleci/SimpleITK
      CTEST_BINARY_DIRECTORY: /home/circleci/SimpleITK-build
      ROOT_BINARY_DIRECTORY: /home/circleci/SimpleITK-build
      CTEST_BUILD_FLAGS: "-j 1"
      CTEST_CONFIGURATION_TYPE: "MinSizeRel"
      CTEST_OUTPUT_ON_FAILURE: 1
      ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
      PARALLEL_LEVEL: 2
      DASHBOARD_BRANCH_DIRECTORY: /home/circleci/dashboard
      ExternalData_OBJECT_STORES: /home/circleci/.ExternalData
      CCACHE_NODIRECT: 1
  dependencies: &dependencies
    run:
      name: Dependencies
      command: |
        sudo apt-get update
        sudo apt-get install -y rsync lua5.3 ccache python3-dev file
        python -m pip install --upgrade pip
        python -m pip install scikit-ci-addons lxml # Provides "ctest_junit_formatter" add-on
  generate-hash-step: &generate-hash-step
    run:
      name: Generate external data hash
      command: |
        cd SimpleITK
        git log -n 1 ${CTEST_SOURCE_DIRECTORY}/Testing/Data/ | tee /home/circleci/external-data.hashable
  restore-data-step: &restore-data-step
     restore_cache:
       keys:
         - 'v1-external-data-{{ checksum "/home/circleci/external-data.hashable" }}'
         - 'v1-external-data'
  restore-ccache-step: &restore-ccache-step
    restore_cache:
      keys:
        - ccache-{{ arch }}-{{ .Branch }}
        - ccache-{{ arch }}-master
        - ccache-{{ arch }}
  clone-dashboard-step: &clone-dashboard-step
     run:
       name: Cloning dashboard branch
       command: |
         git clone --single-branch ${CIRCLE_REPOSITORY_URL} -b dashboard ${DASHBOARD_BRANCH_DIRECTORY}
  env-step: &env-step
     run:
       name: Additional Environment Variables
       command: |
         echo 'export DASHBOARD_MODEL=$( [[ "$CIRCLE_BRANCH" = "master" || "$CIRCLE_BRANCH" = "next"  || "$CIRCLE_BRANCH" = "release" ]] && echo Continuous || echo Experimental )' >> $BASH_ENV
         echo 'export PATH=/usr/lib/ccache:${PATH}' >> $BASH_ENV
  junit-formatting: &junit-formatting
     run:
       name: Formatting CTest for JUnit
       when: always
       command: |
         mkdir -p /tmp/test-results
         python -m ci_addons ctest_junit_formatter ${CTEST_BINARY_DIRECTORY} > /tmp/test-results/JUnit-${CIRCLE_NODE_INDEX}.xml
  junit-store-test-results: &junit-store-test-results
    store_test_results:
          path: /tmp/test-results
          destination: ctest

version: 2
jobs:
  build-and-test:
    <<: *defaults
    environment:
      <<: *default_environment_keys
      PARALLEL_LEVEL: 4
      CTEST_BUILD_FLAGS: "-j 4"
    resource_class: large
    steps:
      - checkout:
          path : ~/SimpleITK
      - *generate-hash-step
      - *restore-data-step
      - *restore-ccache-step
      - *clone-dashboard-step
      - *dependencies
      - *env-step
      - run:
          name: CCache initialization
          command: |
            ccache --show-stats
            ccache --zero-stats
            ccache --max-size=2.0G
      - run:
          name: Build and Testing with CTest
          no_output_timeout: 20.0m
          command: |
            export LD_LIBRARY_PATH="${ROOT_BINARY_DIRECTORY}/ITK-prefix/lib/:${ROOT_BINARY_DIRECTORY}/SimpleITK-build/lib"
            export CTEST_CACHE="
              BUILD_EXAMPLES:BOOL=OFF
              BUILD_SHARED_LIBS:BOOL=ON

              SimpleITK_USE_SYSTEM_LUA:BOOL=ON
              SimpleITK_EXPLICIT_INSTANTIATION:BOOL=OFF

              WRAP_DEFAULT:BOOL=OFF"
            ctest -V -S "${CTEST_SOURCE_DIRECTORY}/.circleci/circleci.cmake"
      - run:
          name: ccache stats
          when: always
          command: |
            ccache --show-stats
      - *junit-formatting
      - *junit-store-test-results
      - save_cache:
          key: 'ccache-{{ arch }}-{{ .Branch }}-{{ epoch }}'
          paths: [ "/home/circleci/.ccache" ]
      - save_cache:
          key: 'v1-external-data-{{ checksum "/home/circleci/external-data.hashable" }}'
          paths: [ "/home/circleci/.ExternalData" ]
      - run:
          name: Cleanup build
          command: |
            rm -rf "${CTEST_BINARY_DIRECTORY}/ITK" "${CTEST_BINARY_DIRECTORY}/ITK-build"
            rm -rf "${CTEST_BINARY_DIRECTORY}/SimpleITK" "${CTEST_BINARY_DIRECTORY}/SimpleITK-build"
      - persist_to_workspace:
          root: /home/circleci/SimpleITK-build
          paths:
            - "*"
  python3.8-and-test:
    <<: *defaults
    docker:
      - image: cimg/python:3.8
    environment:
      <<: *default_environment_keys
      CTEST_BINARY_DIRECTORY: "/home/circleci/SimpleITK-py"
    resource_class: medium
    steps:
      - checkout:
          path : ~/SimpleITK
      - *generate-hash-step
      - *restore-data-step
      - *clone-dashboard-step
      - *dependencies
      - *env-step
      - attach_workspace:
          at: /home/circleci/SimpleITK-build
      - run:
          name: Build Python and Testing with CTest
          no_output_timeout: 20.0m
          command: |
            env
            export LD_LIBRARY_PATH="${ROOT_BINARY_DIRECTORY}/ITK-prefix/lib/:${ROOT_BINARY_DIRECTORY}/lib"
            export CTEST_CACHE="
                        CMAKE_PREFIX_PATH:PATH=${ROOT_BINARY_DIRECTORY}
                        SWIG_EXECUTABLE:PATH=${ROOT_BINARY_DIRECTORY}/Swig/bin/swig
                        BUILD_EXAMPLES:BOOL=ON
                        PYTHON_INCLUDE_DIR:PATH=/home/circleci/.pyenv/versions/3.8.15/include/python3.8"
            ctest -V -Ddashboard_source_config_dir:PATH="Wrapping/Python" -S "${CTEST_SOURCE_DIRECTORY}/.circleci/circleci.cmake"
      - run:
          name: "CMake Cache Dump"
          command: |
            ls ${CTEST_BINARY_DIRECTORY}
            cat ${CTEST_BINARY_DIRECTORY}/CMakeCache.txt
          when: on_fail
      - *junit-formatting
      - *junit-store-test-results

  python3.10-and-test:
    <<: *defaults
    docker:
     - image: cimg/python:3.10
    environment:
      <<: *default_environment_keys
      CTEST_BINARY_DIRECTORY: "/home/circleci/SimpleITK-py"
    resource_class: medium
    steps:
      - checkout:
          path : ~/SimpleITK
      - *generate-hash-step
      - *restore-data-step
      - *clone-dashboard-step
      - *dependencies
      - *env-step
      - attach_workspace:
          at: /home/circleci/SimpleITK-build
      - run:
          name: Build Python and Testing with CTest
          no_output_timeout: 20.0m
          command: |
            env
            export LD_LIBRARY_PATH="${ROOT_BINARY_DIRECTORY}/ITK-prefix/lib/:${ROOT_BINARY_DIRECTORY}/lib"
            export CTEST_CACHE="
                        CMAKE_PREFIX_PATH:PATH=${ROOT_BINARY_DIRECTORY}
                        SWIG_EXECUTABLE:PATH=${ROOT_BINARY_DIRECTORY}/Swig/bin/swig
                        BUILD_EXAMPLES:BOOL=ON"
            ctest -V -Ddashboard_source_config_dir:PATH="Wrapping/Python" -S "${CTEST_SOURCE_DIRECTORY}/.circleci/circleci.cmake"
      - *junit-formatting
      - *junit-store-test-results
  r-and-test:
    <<: *defaults
    resource_class: medium
    environment:
      <<: *default_environment_keys
      CTEST_BINARY_DIRECTORY: "/home/circleci/SimpleITK-R"
    steps:
      - checkout:
          path : ~/SimpleITK
      - *generate-hash-step
      - *restore-data-step
      - *clone-dashboard-step
      - *dependencies
      - *env-step
      - run:
          name: Additional Dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get install -y r-base r-base-dev
      - attach_workspace:
          at: /home/circleci/SimpleITK-build
      - run:
          name: Build R and Testing with CTest
          no_output_timeout: 20.0m
          command: |
            export LD_LIBRARY_PATH="${ROOT_BINARY_DIRECTORY}/ITK-prefix/lib/:${ROOT_BINARY_DIRECTORY}/lib"
            export CTEST_CACHE="
                        CMAKE_PREFIX_PATH:PATH=${ROOT_BINARY_DIRECTORY}
                        SWIG_EXECUTABLE:PATH=${ROOT_BINARY_DIRECTORY}/Swig/bin/swig
                        BUILD_EXAMPLES:BOOL=ON"
            ctest -V -Ddashboard_source_config_dir:PATH="Wrapping/R" -S "${CTEST_SOURCE_DIRECTORY}/.circleci/circleci.cmake"
      - *junit-formatting
      - *junit-store-test-results
  java-and-test:
    <<: *defaults
    docker:
      - image: cimg/python:3.8
    resource_class: medium
    environment:
      <<: *default_environment_keys
      CTEST_BINARY_DIRECTORY: "/home/circleci/SimpleITK-Java"
    steps:
      - checkout:
          path : ~/SimpleITK
      - *generate-hash-step
      - *restore-data-step
      - *clone-dashboard-step
      - *dependencies
      - run:
          name: Prerequisite Dependencies
          command: |
            sudo apt-get install default-jdk
      - *env-step
      - run:
          name: Additional Dependencies
          command: |
            echo "none"
      - attach_workspace:
          at: /home/circleci/SimpleITK-build
      - run:
          name: Build Java and Testing with CTest
          no_output_timeout: 20.0m
          command: |
            export LD_LIBRARY_PATH="${ROOT_BINARY_DIRECTORY}/ITK-prefix/lib/:${ROOT_BINARY_DIRECTORY}/lib"
            export CTEST_CACHE="
                        CMAKE_PREFIX_PATH:PATH=${ROOT_BINARY_DIRECTORY}
                        SWIG_EXECUTABLE:PATH=${ROOT_BINARY_DIRECTORY}/Swig/bin/swig
                        BUILD_EXAMPLES:BOOL=ON"
            ctest -V -Ddashboard_source_config_dir:PATH="Wrapping/Java" -S "${CTEST_SOURCE_DIRECTORY}/.circleci/circleci.cmake"
      - *junit-formatting
      - *junit-store-test-results
workflows:
  version: 2
  build_and_test:
    jobs:
      - build-and-test:
          filters:
            branches:
               ignore:
                 - gh-pages
                 - dashboard
                 - hooks
      - python3.8-and-test:
          requires:
            - build-and-test
      - python3.10-and-test:
          requires:
            - build-and-test
      - r-and-test:
          requires:
            - build-and-test
      - java-and-test:
          requires:
            - build-and-test
