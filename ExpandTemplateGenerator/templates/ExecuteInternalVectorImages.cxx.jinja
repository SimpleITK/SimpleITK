{% if vector_pixel_types_by_component %}
//
// Dispatched methods to call ExecuteInternal on each component of the VectorImage
//
template <class TImageType> {{ "void" if no_return_image else "Image" }} {{ name }}::ExecuteInternalVectorImage ( const Image& inImage1 )
{
  using VectorInputImageType = TImageType;
  using ComponentType = typename VectorInputImageType::InternalPixelType;
  using ComponentImageType = typename itk::Image<ComponentType, VectorInputImageType::ImageDimension>;

  // we must define the input and output image types should be the
  // same as the scalar execute internal method
  using InputImageType = ComponentImageType;
  {% if output_image_type %}
  //Define output image type
  using OutputImageType = {{ output_image_type }};
  {% elif output_pixel_type %}
  // Define output image type
  using OutputImageType = itk::Image< {{ output_pixel_type }}, InputImageType::ImageDimension >;
  {% else %}
  // Define output image type
  using OutputImageType = InputImageType;
  {% endif %}

  // Get the pointer to the ITK image contained in image1
  typename VectorInputImageType::ConstPointer image1 =
    this->CastImageToITK<VectorInputImageType>( inImage1 );

  using ComponentExtractorType = itk::VectorIndexSelectionCastImageFilter< VectorInputImageType, ComponentImageType >;
  typename ComponentExtractorType::Pointer extractor = ComponentExtractorType::New();
  extractor->SetInput( image1 );

  using ToVectorFilterType = itk::ComposeImageFilter<OutputImageType>;
  typename ToVectorFilterType::Pointer toVector = ToVectorFilterType::New();

  unsigned int numComps = image1->GetNumberOfComponentsPerPixel();
  for ( unsigned int i = 0; i < numComps; ++i )
    {
    extractor->SetIndex( i );
    extractor->UpdateLargestPossibleRegion();

    Image tmp = this->ExecuteInternal<InputImageType>( Image( extractor->GetOutput() ) );

    typename OutputImageType::ConstPointer tempITKImage = this->CastImageToITK<OutputImageType>( tmp );

    toVector->SetInput( i, tempITKImage );
    }

  toVector->Update();

  return Image( toVector->GetOutput() );
}
//-----------------------------------------------------------------------------
{% endif %}
