#ifndef __sitk${name}ImageFilter_h
#define __sitk${name}ImageFilter_h

$(include components/DoNotEditWarning.h.in)

#include <memory>

#include "sitkDualImageFilter.h"
$(include components/AddExtraIncludes.h.in)

namespace itk {
  namespace simple {

    /** \class ${name}ImageFilter
     *
     * ${doc}
     */
$(include components/ClassDeclaration.h.in)
$(include components/PublicDeclarations.h.in)
$(include components/MemberGetSetDeclarations.h.in)
      /** Kernel radius as a scale for isotropic structures */
      Self& SetKernelRadius(uint32_t r);

      /** Set/Get the radius of the kernel structuring element as a
       * vector.
       *
       * If the dimension of the image is greater then the length of
       * r, then the radius will be padded. If it is less the r will
       * be truncated.
       */
      Self& SetKernelRadius(const std::vector<uint32_t>  &r );
      std::vector<uint32_t> GetKernelRadius() const;

      /** Set/Get the kernel or structuring elemenent used for the
       * morphology */
      Self& SetKernelType(KernelType t);
      KernelType GetKernelType() const;

$(include components/ClassNameAndPrint.h.in)

$(include components/ExecuteMethodNoParameters.h.in)$(include components/ExecuteMethodWithParameters.h.in)$(include components/CustomMethods.h.in)

$(include components/ExecuteInternalMethod.h.in)

$(include components/MemberFunctionDispatch.h.in)

$(include components/PrivateMemberDeclarations.h.in)
      /** boolean value to indicate if the vector or scalar should be
       *  used for the radius of the kernel */
      bool m_BVectorRadius;

      /* Kernel Radius as a vector */
      std::vector<uint32_t> m_VectorKernelRadius;

      /** Isotropic Kernel Radius */
      uint32_t m_KernelRadius;

      /** KernelType */
      KernelType m_KernelType;
$(include components/ClassEnd.h.in)


    /**
     * itk::simple::${name}ImageFilter Functional Interface
     *
     * This function directly calls the execute method of ${name}ImageFilter
     * in order to support a fully functional API
     */
  Image ${name} ( const Image&$(if number_of_inputs == 2 then OUT=', const Image&' end),
                   uint32_t inRadius = 1, ${name}ImageFilter::KernelType inKernel =${name}ImageFilter::Ball
                   $(when members $(foreach members , ${type} in${name} = ${default})) );

   /**
     * itk::simple::${name}ImageFilter Functional Interface
     *
     * This function directly calls the execute method of ${name}ImageFilter
     * in order to support a fully functional API
     */
  Image ${name} ( const Image&$(if number_of_inputs == 2 then OUT=', const Image&' end),
                   const std::vector<uint32_t> inVectorRadius, ${name}ImageFilter::KernelType inKernel =${name}ImageFilter::Ball
                   $(when members $(foreach members , ${type} in${name} = ${default})) );
  }
}
#endif
