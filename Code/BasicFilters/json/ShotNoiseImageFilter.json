{
  "name" : "ShotNoiseImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 1,
  "pixel_types" : "BasicPixelIDTypeList",
  "vector_pixel_types_by_component" : "VectorPixelIDTypeList",
  "members" : [
    {
      "name" : "Scale",
      "type" : "double",
      "default" : "1.0",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/Get the value to map the pixel value to the actual particle counting. The scaling can be seen as the inverse of the gain used during the acquisition. The noisy signal is then scaled back to its input intensity range. Defaults to 1.0.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set/Get the value to map the pixel value to the actual particle counting. The scaling can be seen as the inverse of the gain used during the acquisition. The noisy signal is then scaled back to its input intensity range. Defaults to 1.0."
    },
    {
      "name" : "Seed",
      "type" : "uint32_t",
      "default" : "0u",
      "custom_itk_cast" : "if (m_Seed) filter->SetSeed(m_Seed);"
    }
  ],
  "tests" : [
    {
      "tag" : "2d",
      "description" : "2D - baseline as zero noise",
      "no_procedure" : 1,
      "settings" : [
        {
          "parameter" : "Seed",
          "cxx_value" : "123u",
          "value" : "123"
        }
      ],
      "tolerance" : 500.0,
      "inputs" : [
        "Input/cthead1.png"
      ]
    },
    {
      "tag" : "3d",
      "description" : "3D - baseline as zero noise",
      "no_procedure" : 1,
      "settings" : [
        {
          "parameter" : "Seed",
          "cxx_value" : "123u",
          "value" : "123"
        }
      ],
      "tolerance" : 500.0,
      "inputs" : [
        "Input/RA-Short.nrrd"
      ]
    },
    {
      "tag" : "rgb",
      "description" : "vector image - baseline as zero noise",
      "no_procedure" : 1,
      "settings" : [
        {
          "parameter" : "Seed",
          "cxx_value" : "123u",
          "value" : "123"
        }
      ],
      "tolerance" : 500.0,
      "inputs" : [
        "Input/VM1111Shrink-RGB.png"
      ]
    }
  ],
  "briefdescription" : "Alter an image with shot noise.",
  "detaileddescription" : "The shot noise follows a Poisson distribution:\n\n\\par \n\\f$ I = N(I_0) \\f$ \n\n\\par \nwhere \\f$ N(I_0) \\f$ is a Poisson-distributed random variable of mean \\f$ I_0 \\f$ . The noise is thus dependent on the pixel intensities in the image.\n\nThe intensities in the image can be scaled by a user provided value to map pixel values to the actual number of particles. The scaling can be seen as the inverse of the gain used during the acquisition. The noisy signal is then scaled back to its input intensity range:\n\n\\par \n\\f$ I = \\frac{N(I_0 \\times s)}{s} \\f$ \n\n\\par \nwhere \\f$ s \\f$ is the scale factor.\n\nThe Poisson-distributed variable \\f$ \\lambda \\f$ is computed by using the algorithm:\n\n\\par \n\\f$ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1 \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l} k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U() \\end{array} \\right. \\\\ \\textbf{until } p > e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} \\f$ \n\n\\par \nwhere \\f$ U() \\f$ provides a uniformly distributed random variable in the interval \\f$ [0,1] \\f$ .\n\nThis algorithm is very inefficient for large values of \\f$ \\lambda \\f$ , though. Fortunately, the Poisson distribution can be accurately approximated by a Gaussian distribution of mean and variance \\f$ \\lambda \\f$ when \\f$ \\lambda \\f$ is large enough. In this implementation, this value is considered to be 50. This leads to the faster algorithm:\n\n\\par \n\\f$ \\lambda + \\sqrt{\\lambda} \\times N()\\f$ \n\n\\par \nwhere \\f$ N() \\f$ is a normally distributed random variable of mean 0 and variance 1.\n\n\\author Gaetan Lehmann\n\nThis code was contributed in the Insight Journal paper \"Noise\nSimulation\". https://hdl.handle.net/10380/3158"
}
