{
  "name" : "RecursiveGaussianImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "doc" : "",
  "number_of_inputs" : 1,
  "pixel_types" : "typelist::Append<BasicPixelIDTypeList, VectorPixelIDTypeList>::Type",
  "output_image_type" : "typename InputImageType::template Rebind<float>::Type",
  "members" : [
    {
      "name" : "Sigma",
      "type" : "double",
      "default" : "1.0",
      "doc" : "",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/Get the Sigma, measured in world coordinates, of the Gaussian kernel. The default is 1.0. An exception will be generated if the Sigma value is less than or equal to zero.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set/Get the Sigma, measured in world coordinates, of the Gaussian kernel. The default is 1.0. An exception will be generated if the Sigma value is less than or equal to zero."
    },
    {
      "name" : "NormalizeAcrossScale",
      "type" : "bool",
      "default" : "false",
      "doc" : "",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/Get the flag for normalizing the gaussian over scale-space.\n\nThis flag enables the analysis of the differential shape of features independent of their size ( both pixels and physical size ). Following the notation of Tony Lindeberg:\n\nLet \\f[ L(x; t) = g(x; t) \\ast f(x) \\f] be the scale-space representation of image \\f[ f(x) \\f] where \\f[ g(x; t) = \\frac{1}{ \\sqrt{ 2 \\pi t} } \\exp{ \\left( -\\frac{x^2}{ 2 t } \\right) } \\f] is the Gaussian function and \\f[\\ast\\f] denotes convolution. This is a change from above with \\f[ t = \\sigma^2 \\f] .\n\nThen the normalized derivative operator for normalized coordinates across scale is:\n\n \\f[ \\partial_\\xi = \\sqrt{t} \\partial_x \\f] \n\nThe resulting scaling factor is \\f[ \\sigma^N \\f] where N is the order of the derivative.\n\nWhen this flag is ON the filter will be normalized in such a way that the values of derivatives are not biased by the size of the object. That is to say the maximum value a feature reaches across scale is independent of the scale of the object.\n\nFor analyzing an image across scale-space you want to enable this flag. It is disabled by default.\n\n\\note Not all scale space axioms are satisfied by this filter, some are only approximated. Particularly, at fine scales ( say less than 1 pixel ) other methods such as a discrete Gaussian kernel should be considered.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    },
    {
      "name" : "Order",
      "enum" : [
        "ZeroOrder",
        "FirstOrder",
        "SecondOrder"
      ],
      "default" : "itk::simple::RecursiveGaussianImageFilter::ZeroOrder",
      "itk_type" : "typename FilterType::OrderEnumType",
      "doc" : "",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/Get the Order of the Gaussian to convolve with. \n\n\\li ZeroOrder is equivalent to convolving with a Gaussian. This is the default. \n\n\\li FirstOrder is equivalent to convolving with the first derivative of a Gaussian. \n\n\\li SecondOrder is equivalent to convolving with the second derivative of a Gaussian.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set/Get the Order of the Gaussian to convolve with. \n\n\\li ZeroOrder is equivalent to convolving with a Gaussian. This is the default. \n\n\\li FirstOrder is equivalent to convolving with the first derivative of a Gaussian. \n\n\\li SecondOrder is equivalent to convolving with the second derivative of a Gaussian."
    },
    {
      "name" : "Direction",
      "type" : "unsigned int",
      "default" : "0u",
      "doc" : ""
    }
  ],
  "tests" : [
    {
      "tag" : "default",
      "description" : "Simply run with default settings",
      "settings" : [],
      "tolerance" : 0,
      "md5hash" : null,
      "inputs" : [
        "Input/RA-Float.nrrd"
      ]
    },
    {
      "tag" : "rgb_image",
      "description" : "First derivative on a vector image",
      "settings" : [
        {
          "parameter" : "Sigma",
          "value" : "3.0"
        },
        {
          "parameter" : "Direction",
          "cxx_value" : "1u",
          "value" : "1"
        },
        {
          "parameter" : "Order",
          "value" : "itk::simple::${name}::FirstOrder",
          "lua_value" : "SimpleITK.${name}_FirstOrder",
          "python_value" : "SimpleITK.${name}.FirstOrder",
          "ruby_value" : "Simpleitk::${name}::FirstOrder",
          "java_value" : "${name}.OrderType.FirstOrder",
          "tcl_value" : "$$${name}_FirstOrder",
          "csharp_value" : "${name}.OrderType.FirstOrder",
          "R_value" : "'FirstOrder'"
        }
      ],
      "tolerance" : 1e-10,
      "inputs" : [
        "Input/VM1111Shrink-RGB.png"
      ]
    }
  ],
  "briefdescription" : "Base class for computing IIR convolution with an approximation of a Gaussian kernel.",
  "detaileddescription" : "\\f[ \\frac{ 1 }{ \\sigma \\sqrt{ 2 \\pi } } \\exp{ \\left( - \\frac{x^2}{ 2 \\sigma^2 } \\right) } \\f] \n\nRecursiveGaussianImageFilter is the base class for recursive filters that approximate convolution with the Gaussian kernel. This class implements the recursive filtering method proposed by R.Deriche in IEEE-PAMI Vol.12, No.1, January 1990, pp 78-87, \"Fast Algorithms for Low-Level Vision\"\n\nDetails of the implementation are described in the technical report: R. Deriche, \"Recursively Implementing The Gaussian and Its Derivatives\", INRIA, 1993, ftp://ftp.inria.fr/INRIA/tech-reports/RR/RR-1893.ps.gz \n\nFurther improvements of the algorithm are described in: G. Farneback & C.-F. Westin, \"On Implementation of Recursive Gaussian\nFilters\", so far unpublished.\n\nAs compared to itk::DiscreteGaussianImageFilter , this filter tends to be faster for large kernels, and it can take the derivative of the blurred image in one step. Also, note that we have itk::RecursiveGaussianImageFilter::SetSigma() , but itk::DiscreteGaussianImageFilter::SetVariance() .\n\n\\see DiscreteGaussianImageFilter \n\n\\par Wiki Examples:\n\n\\li All Examples \n\n\\li Find higher derivatives of an image"
}
