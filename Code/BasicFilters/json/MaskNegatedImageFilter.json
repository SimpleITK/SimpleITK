{
  "name" : "MaskNegatedImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 0,
  "doc" : "Some global documentation",
  "pixel_types" : "BasicPixelIDTypeList",
  "filter_type" : "itk::MaskNegatedImageFilter<InputImageType, InputImageType,  OutputImageType>",
  "include_files" : [
    "sitkToPixelType.hxx"
  ],
  "inputs" : [
    {
      "name" : "Image",
      "type" : "Image"
    },
    {
      "name" : "MaskImage",
      "type" : "Image"
    }
  ],
  "members" : [
    {
      "name" : "OutsideValue",
      "type" : "double",
      "default" : 0,
      "custom_itk_cast" : "typename OutputImageType::PixelType v;  NumericTraits<typename OutputImageType::PixelType>::SetLength( v, image1->GetNumberOfComponentsPerPixel() );  ToPixelType( this->m_OutsideValue, v );  filter->SetOutsideValue( v );",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Method to explicitly set the outside value of the mask. Defaults to 0",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    },
    {
      "name" : "MaskingValue",
      "type" : "double",
      "default" : 0,
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Method to explicitly set the masking value of the mask. Defaults to 0",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Method to get the masking value of the mask."
    }
  ],
  "tests" : [
    {
      "tag" : "2d",
      "description" : "2d",
      "settings" : [],
      "md5hash" : "164809eb3ac508dd12c91c82ad8ee20c",
      "inputs" : [
        "Input/STAPLE1.png",
        "Input/STAPLE2.png"
      ]
    }
  ],
  "briefdescription" : "Mask an image with the negation (or logical compliment) of a mask.",
  "detaileddescription" : "This class is templated over the types of the input image type, the mask image type and the type of the output image. Numeric conversions (castings) are done by the C++ defaults.\n\nThe pixel type of the input 2 image must have a valid definition of the operator!=. This condition is required because internally this filter will perform the operation\n\n\\code\n* if pixel_from_mask_image != mask_value\n\n* pixel_output_image = output_value\n\n* else\n\n* pixel_output_image = pixel_input_image\n\n* \n\n\\endcode\n\nThe pixel from the input 1 is cast to the pixel type of the output image.\n\nNote that the input and the mask images must be of the same size.\n\n\\warning Only pixel value with mask_value ( defaults to 0 ) will be preserved.\n\n\\see MaskImageFilter \n\n\\par Wiki Examples:\n\n\\li All Examples \n\n\\li Apply the inverse of a mask to an image",
  "itk_module" : "ITKImageIntensity",
  "itk_group" : "ImageIntensity"
}