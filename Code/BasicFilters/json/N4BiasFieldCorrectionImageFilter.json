{
  "name": "N4BiasFieldCorrectionImageFilter",
  "template_code_filename": "ImageFilter",
  "template_test_filename": "ImageFilter",
  "number_of_inputs": 0,
  "doc": "Some global documentation",
  "pixel_types": "RealPixelIDTypeList",
  "filter_type": "itk::N4BiasFieldCorrectionImageFilter<InputImageType, itk::Image< uint8_t, TImageType::ImageDimension>, OutputImageType>",
  "include_files": [
    "sitkBiasFieldCorrectionImageFilter_helper.hxx"
  ],
  "inputs": [
    {
      "name": "Image",
      "type": "Image"
    },
    {
      "name": "MaskImage",
      "type": "Image",
      "custom_itk_cast": "filter->SetMaskImage( this->CastImageToITK<typename FilterType::MaskImageType>(*inMaskImage) );",
      "optional": true
    }
  ],
  "members": [
    {
      "name": "ConvergenceThreshold",
      "type": "double",
      "default": "0.001",
      "doc": "",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set the convergence threshold. Convergence is determined by the coefficient of variation of the difference image between the current bias field estimate and the previous estimate. If this value is less than the specified threshold, the algorithm proceeds to the next fitting level or terminates if it is at the last level.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get the convergence threshold. Convergence is determined by the coefficient of variation of the difference image between the current bias field estimate and the previous estimate. If this value is less than the specified threshold, the algorithm proceeds to the next fitting level or terminates if it is at the last level."
    },
    {
      "name": "MaximumNumberOfIterations",
      "type": "std::vector<uint32_t>",
      "default": "std::vector<uint32_t>(4,50)",
      "custom_itk_cast": "typename FilterType::VariableSizeArrayType maximumNumberOfIterations( this->m_MaximumNumberOfIterations.size() );\n  for( unsigned int i = 0; i < this->m_MaximumNumberOfIterations.size(); ++i)\n    maximumNumberOfIterations[i] = this->m_MaximumNumberOfIterations[i];\n  filter->SetMaximumNumberOfIterations( maximumNumberOfIterations );\n  filter->SetNumberOfFittingLevels( this->m_MaximumNumberOfIterations.size() );",
      "doc": "\todo this variable needs to be printed",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set the maximum number of iterations specified at each fitting level. Default = 50.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get the maximum number of iterations specified at each fitting level. Default = 50."
    },
    {
      "name": "BiasFieldFullWidthAtHalfMaximum",
      "type": "double",
      "default": "0.15",
      "doc": "",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set the full width at half maximum parameter characterizing the width of the Gaussian deconvolution. Default = 0.15.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get the full width at half maximum parameter characterizing the width of the Gaussian deconvolution. Default = 0.15."
    },
    {
      "name": "WienerFilterNoise",
      "type": "double",
      "default": "0.01",
      "doc": "",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set the noise estimate defining the Wiener filter. Default = 0.01.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get the noise estimate defining the Wiener filter. Default = 0.01."
    },
    {
      "name": "NumberOfHistogramBins",
      "type": "uint32_t",
      "default": "200u",
      "doc": "",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set number of bins defining the log input intensity histogram. Default = 200.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get number of bins defining the log input intensity histogram. Default = 200."
    },
    {
      "name": "NumberOfControlPoints",
      "type": "uint32_t",
      "default": "std::vector<uint32_t>(3, 4)",
      "doc": "",
      "dim_vec": true,
      "set_as_scalar": true,
      "itk_type": "typename FilterType::ArrayType",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set the control point grid size defining the B-spline estimate of the scalar bias field. In each dimension, the B-spline mesh size is equal to the number of control points in that dimension minus the spline order. Default = 4 control points in each dimension for a mesh size of 1 in each dimension.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get the control point grid size defining the B-spline estimate of the scalar bias field. In each dimension, the B-spline mesh size is equal to the number of control points in that dimension minus the spline order. Default = 4 control points in each dimension for a mesh size of 1 in each dimension."
    },
    {
      "name": "SplineOrder",
      "type": "uint32_t",
      "default": "3u",
      "doc": "",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set the spline order defining the bias field estimate. Default = 3.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get the spline order defining the bias field estimate. Default = 3."
    },
    {
      "name": "UseMaskLabel",
      "type": "bool",
      "default": "true",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Use a mask label for identifying mask functionality. See SetMaskLabel. Defaults to true.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Use a mask label for identifying mask functionality. See SetMaskLabel. Defaults to true."
    },
    {
      "name": "MaskLabel",
      "type": "uint8_t",
      "default": 1,
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get mask label value. If a binary mask image is specified and if UseMaskValue is true, only those input image voxels corresponding with mask image values equal to MaskLabel are used in estimating the bias field. If a MaskImage is specified and UseMaskLabel is false, all input image voxels corresponding to non-zero voxels in the MaskImage are used in estimating the bias field. Default = 1.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get mask label value. If a binary mask image is specified and if UseMaskValue is true, only those input image voxels corresponding with mask image values equal to MaskLabel are used in estimating the bias field. If a MaskImage is specified and UseMaskLabel is false, all input image voxels corresponding to non-zero voxels in the MaskImage are used in estimating the bias field. Default = 1."
    }
  ],
  "measurements": [
    {
      "name": "CurrentLevel",
      "type": "uint32_t",
      "active": true,
      "default": 0,
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get the current fitting level. This is a helper function for reporting observations."
    },
    {
      "name": "ElapsedIterations",
      "type": "uint32_t",
      "active": true,
      "default": 0,
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get the number of elapsed iterations. This is a helper function for reporting observations."
    },
    {
      "name": "CurrentConvergenceMeasurement",
      "type": "double",
      "active": true,
      "default": 0.0,
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get the current convergence measurement. This is a helper function for reporting observations."
    },
    {
      "name": "LogBiasFieldAsImage",
      "type": "Image",
      "no_print": true,
      "active": true,
      "custom_cast": "value",
      "itk_get": "BSplineLatticeToImage(f->GetLogBiasFieldControlPointLattice(), referenceImage, f->GetSplineOrder())",
      "parameters": [
        {
          "name": "referenceImage",
          "type": "Image"
        }
      ],
      "briefdescriptionGet": "The computed log bias field correction.",
      "detaileddescriptionGet": "Typically, a reduced size image is used as input to the N4 filter using something like itkShrinkImageFilter. Since the output is a corrected version of the input, the user will probably want to apply the bias field correction to the full resolution image. Returns the b-spline log bias field reconstructioned onto the space of the referenceImage parameter.\n   An input image can be corrected by: input/exp(bias_field). "
    }
  ],
  "tests": [
    {
      "tag": "defaults",
      "description": "using default parameters in 2D with a mask without the mask label",
      "settings": [
        {
          "parameter": "UseMaskLabel",
          "type": "bool",
          "value": "true",
          "python_value": "True",
          "R_value": "TRUE"
        }
      ],
      "tolerance": 0.015,
      "inputs": [
        "Input/cthead1-Float.mha",
        "Input/2th_cthead1.mha"
      ]
    }
  ],
  "briefdescription": "Implementation of the N4 bias field correction algorithm.",
  "detaileddescription": "The nonparametric nonuniform intensity normalization (N3) algorithm, as introduced by Sled et al. in 1998 is a method for correcting nonuniformity associated with MR images. The algorithm assumes a simple parametric model (Gaussian) for the bias field and does not require tissue class segmentation. In addition, there are only a couple of parameters to tune with the default values performing quite well. N3 has been publicly available as a set of perl scripts (https://www.bic.mni.mcgill.ca/ServicesSoftwareAdvancedImageProcessingTools/HomePage )\n\nThe N4 algorithm, encapsulated with this class, is a variation of the original N3 algorithm with the additional benefits of an improved B-spline fitting routine which allows for multiple resolutions to be used during the correction process. We also modify the iterative update component of algorithm such that the residual bias field is continually updated\n\nNotes for the user:\n\\li Since much of the image manipulation is done in the log space of the intensities, input images with negative and small values (< 1) can produce poor results.\n\n\\li The original authors recommend performing the bias field correction on a downsampled version of the original image.\n\n\\li A binary mask or a weighted image can be supplied. If a binary mask is specified, those voxels in the input image which correspond to the voxels in the mask image are used to estimate the bias field. If a UseMaskLabel value is set to false (the default), all non-zero voxels in the MaskImage will be masked; otherwise only voxels in the MaskImage that match the MaskLabel will be used. If a confidence image is specified, the input voxels are weighted in the b-spline fitting routine according to the confidence voxel values.\n\n\\li The filter returns the corrected image. If the bias field is wanted, one can reconstruct it using the class itkBSplineControlPointImageFilter. See the IJ article and the test file for an example.\n\n\\li The 'Z' parameter in Sled's 1998 paper is the square root of the class variable 'm_WienerFilterNoise'.\n\n\n\n\nThe basic algorithm iterates between sharpening the intensity histogram of the corrected input image and spatially smoothing those results with a B-spline scalar field estimate of the bias field.\n\n\\author Nicholas J. Tustison\n\n\nContributed by Nicholas J. Tustison, James C. Gee in the Insight Journal paper: https://doi.org/10.54294/jculxw \n\n\\par REFERENCE\n\n\n\nJ.G. Sled, A.P. Zijdenbos and A.C. Evans. \"A Nonparametric Method for\nAutomatic Correction of Intensity Nonuniformity in Data\" IEEE Transactions on Medical Imaging, Vol 17, No 1. Feb 1998.\n\nN.J. Tustison, B.B. Avants, P.A. Cook, Y. Zheng, A. Egan, P.A. Yushkevich, and J.C. Gee. \"N4ITK: Improved N3 Bias Correction\" IEEE Transactions on Medical Imaging, 29(6):1310-1320, June 2010.",
  "itk_module": "ITKBiasCorrection",
  "itk_group": "BiasCorrection",
  "in_place": false
}
