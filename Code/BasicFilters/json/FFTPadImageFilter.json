{
  "name" : "FFTPadImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 1,
  "pixel_types" : "BasicPixelIDTypeList",
  "include_files" : [
    "sitkBoundaryConditions.hxx"
  ],
  "members" : [
    {
      "name" : "BoundaryCondition",
      "enum" : [
        "ZERO_PAD",
        "ZERO_FLUX_NEUMANN_PAD",
        "PERIODIC_PAD"
      ],
      "default" : "itk::simple::FFTPadImageFilter::ZERO_FLUX_NEUMANN_PAD",
      "custom_itk_cast" : "std::unique_ptr< ImageBoundaryCondition< InputImageType > > bc( CreateNewBoundaryConditionInstance< Self, FilterType >( m_BoundaryCondition ) ); filter->SetBoundaryCondition( bc.get() );\n"
    },
    {
      "name" : "SizeGreatestPrimeFactor",
      "type" : "int",
      "default" : "5",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/Get the greatest prime factor allowed on the size of the padded image. The filter increase the size of the image to reach a size with the greatest prime factor smaller or equal to the specified value. The default value is 13, which is the greatest prime number for which the FFT are precomputed in FFTW, and thus gives very good performance. A greatest prime factor of 2 produce a size which is a power of 2, and thus is suitable for vnl base fft filters. A greatest prime factor of 1 or less - typically 0 - disable the extra padding.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set/Get the greatest prime factor allowed on the size of the padded image. The filter increase the size of the image to reach a size with the greatest prime factor smaller or equal to the specified value. The default value is 13, which is the greatest prime number for which the FFT are precomputed in FFTW, and thus gives very good performance. A greatest prime factor of 2 produce a size which is a power of 2, and thus is suitable for vnl base fft filters. A greatest prime factor of 1 or less - typically 0 - disable the extra padding."
    }
  ],
  "tests" : [
    {
      "tag" : "defaults",
      "description" : "Test with default parameters",
      "md5hash" : "7a033cbc1d72c7806a7be37c0a60932b",
      "settings" : [],
      "inputs" : [
        "Input/BrainProtonDensitySlice.png"
      ]
    },
    {
      "tag" : "more",
      "description" : "Test Periodic Pad",
      "md5hash" : "5c4bebbdfb8a340cdb5347dac3d87046",
      "settings" : [
        {
          "parameter" : "BoundaryCondition",
          "value" : "itk::simple::${name}::PERIODIC_PAD",
          "lua_value" : "SimpleITK.${name}_PERIODIC_PAD",
          "python_value" : "SimpleITK.${name}.PERIODIC_PAD",
          "ruby_value" : "Simpleitk::${name}::PERIODIC_PAD",
          "java_value" : "${name}.BoundaryConditionType.PERIODIC_PAD",
          "tcl_value" : "$$${name}_PERIODIC_PAD",
          "csharp_value" : "${name}.BoundaryConditionType.PERIODIC_PAD",
          "R_value" : "'PERIODIC_PAD'"
        },
        {
          "parameter" : "SizeGreatestPrimeFactor",
          "value" : "2"
        }
      ],
      "inputs" : [
        "Input/BrainProtonDensitySlice.png"
      ]
    }
  ],
  "briefdescription" : "Pad an image to make it suitable for an FFT transformation.",
  "detaileddescription" : "FFT filters usually requires a specific image size. The size is decomposed in several prime factors, and the filter only supports prime factors up to a maximum value. This filter automatically finds the greatest prime factor required by the available implementation and pads the input appropriately.\n\nThis code was adapted from the Insight Journal contribution:\n\n\"FFT Based Convolution\" by Gaetan Lehmann https://www.insight-journal.org/browse/publication/717 \n\n\\author Gaetan Lehmann\n\n\n\\see FFTShiftImageFilter",
  "itk_module" : "ITKFFT",
  "itk_group" : "FFT",
  "in_place" : false
}
