{
  "name": "FFTPadImageFilter",
  "template_code_filename": "ImageFilter",
  "template_test_filename": "ImageFilter",
  "number_of_inputs": 1,
  "pixel_types": "BasicPixelIDTypeList",
  "include_files": [
    "sitkBoundaryConditions.hxx"
  ],
  "members": [
    {
      "name": "BoundaryCondition",
      "enum": [
        "ZERO_PAD",
        "ZERO_FLUX_NEUMANN_PAD",
        "PERIODIC_PAD"
      ],
      "default": "itk::simple::FFTPadImageFilter::ZERO_FLUX_NEUMANN_PAD",
      "custom_itk_cast": "std::unique_ptr< ImageBoundaryCondition< InputImageType > > bc( CreateNewBoundaryConditionInstance< Self, FilterType >( m_BoundaryCondition ) ); filter->SetBoundaryCondition( bc.get() );\n"
    },
    {
      "name": "SizeGreatestPrimeFactor",
      "type": "int",
      "default": "itk::simple::FFTPadImageFilter::DefaultSizeGreatestPrimeFactor()",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get the greatest prime factor allowed on the size of the padded image. The filter increase the size of the image to reach a size with the greatest prime factor smaller or equal to the specified value. The default value is 5 for VNL, which is the greatest prime number for which the FFT are precomputed in FFTW, and thus gives very good performance. A greatest prime factor of 2 produce a size which is a power of 2, and thus is suitable for vnl base fft filters. A greatest prime factor of 1 or less - typically 0 - disable the extra padding.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get the greatest prime factor allowed on the size of the padded image. The filter increase the size of the image to reach a size with the greatest prime factor smaller or equal to the specified value. The default value is 5 for VNL, which is the greatest prime number for which the FFT are precomputed in FFTW, and thus gives very good performance. A greatest prime factor of 2 produce a size which is a power of 2, and thus is suitable for vnl base fft filters. A greatest prime factor of 1 or less - typically 0 - disable the extra padding."
    }
  ],
  "custom_methods": [
    {
      "name": "DefaultSizeGreatestPrimeFactor",
      "doc": "The largest prime factor supported by underlying FFT implementation (FFTW or VNL).",
      "static": true,
      "return_type": "int",
      "parameters": [],
      "body": "using RealImageType = itk::Image<float, 2>;\n  return itk::FFTPadImageFilter<RealImageType>::New()->GetSizeGreatestPrimeFactor();"
    }
  ],
  "tests": [
    {
      "tag": "defaults",
      "description": "Test with default parameters",
      "md5hash": "7a033cbc1d72c7806a7be37c0a60932b",
      "settings": [],
      "inputs": [
        "Input/BrainProtonDensitySlice.png"
      ]
    },
    {
      "tag": "more",
      "description": "Test Periodic Pad",
      "md5hash": "5c4bebbdfb8a340cdb5347dac3d87046",
      "settings": [
        {
          "parameter": "BoundaryCondition",
          "value": "itk::simple::FFTPadImageFilter::PERIODIC_PAD",
          "lua_value": "SimpleITK.FFTPadImageFilter_PERIODIC_PAD",
          "python_value": "SimpleITK.FFTPadImageFilter.PERIODIC_PAD",
          "ruby_value": "Simpleitk::FFTPadImageFilter::PERIODIC_PAD",
          "java_value": "FFTPadImageFilter.BoundaryConditionType.PERIODIC_PAD",
          "tcl_value": "$FFTPadImageFilter_PERIODIC_PAD",
          "csharp_value": "FFTPadImageFilter.BoundaryConditionType.PERIODIC_PAD",
          "R_value": "'PERIODIC_PAD'"
        },
        {
          "parameter": "SizeGreatestPrimeFactor",
          "value": "2"
        }
      ],
      "inputs": [
        "Input/BrainProtonDensitySlice.png"
      ]
    }
  ],
  "briefdescription": "Pad an image to make it suitable for an FFT transformation.",
  "detaileddescription": "FFT filters usually requires a specific image size. The size is decomposed in several prime factors, and the filter only supports prime factors up to a maximum value. This filter automatically finds the greatest prime factor required by the available implementation and pads the input appropriately.\n\nThis code was adapted from the Insight Journal contribution:\n\n\"FFT Based Convolution\" by Gaetan Lehmann https://doi.org/10.54294/0iky0u \n\n\\author Gaetan Lehmann\n\n\n\\see FFTShiftImageFilter",
  "itk_module": "ITKFFT",
  "itk_group": "FFT",
  "in_place": false
}
