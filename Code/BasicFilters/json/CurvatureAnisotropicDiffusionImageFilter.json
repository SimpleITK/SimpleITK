{
  "name" : "CurvatureAnisotropicDiffusionImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 1,
  "doc" : "Some global documentation",
  "pixel_types" : "RealPixelIDTypeList",
  "include_files" : [
    "algorithm"
  ],
  "members" : [
    {
      "name" : "TimeStep",
      "type" : "double",
      "default" : 0.0625,
      "doc" : "Time step for PDE solver"
    },
    {
      "name" : "ConductanceParameter",
      "type" : "double",
      "default" : 3.0,
      "doc" : "Conductance parameter governing sensitivity of the conductance equation."
    },
    {
      "name" : "ConductanceScalingUpdateInterval",
      "type" : "unsigned int",
      "default" : "1u",
      "doc" : "Interval at which a new scaling for the conductance term is calculated."
    },
    {
      "name" : "NumberOfIterations",
      "type" : "uint32_t",
      "default" : "5u",
      "doc" : "Number of iterations to run"
    }
  ],
  "custom_methods" : [
    {
      "name" : "EstimateOptimalTimeStep",
      "doc" : "This method autmatically sets the optimal timestep for an image given its spacing.",
      "return_type" : "double",
      "parameters" : [
        {
          "type" : "Image &",
          "var_name" : "inImage"
        }
      ],
      "body" : "std::vector<double> spacing = inImage.GetSpacing();\ndouble minSpacing = *std::min_element( spacing.begin(), spacing.end()); this->m_TimeStep = minSpacing / std::pow(2.0, static_cast< double >( inImage.GetDimension() ) + 1.0 ); return this->m_TimeStep;"
    }
  ],
  "tests" : [
    {
      "tag" : "defaults",
      "description" : "Simply run with default settings",
      "settings" : [
        {
          "parameter" : "TimeStep",
          "value" : 0.01
        }
      ],
      "tolerance" : 0.1,
      "inputs" : [
        "Input/RA-Float.nrrd"
      ]
    },
    {
      "tag" : "longer",
      "description" : "Change number of iterations and timestep",
      "settings" : [
        {
          "parameter" : "TimeStep",
          "value" : 0.01
        },
        {
          "parameter" : "NumberOfIterations",
          "cxx_value" : "10u",
          "value" : "10"
        }
      ],
      "tolerance" : 0.1,
      "inputs" : [
        "Input/RA-Float.nrrd"
      ]
    }
  ],
  "briefdescription" : "This filter performs anisotropic diffusion on a scalar itk::Image using the modified curvature diffusion equation (MCDE).",
  "detaileddescription" : "For detailed information on anisotropic diffusion and the MCDE see itkAnisotropicDiffusionFunction and itkCurvatureNDAnisotropicDiffusionFunction.\n\n\\par Inputs and Outputs\nThe input and output to this filter must be a scalar itk::Image with numerical pixel types (float or double). A user defined type which correctly defines arithmetic operations with floating point accuracy should also give correct results.\n\n\n\\par Parameters\nPlease first read all the documentation found in AnisotropicDiffusionImageFilter and AnisotropicDiffusionFunction . Also see CurvatureNDAnisotropicDiffusionFunction .\n\n\nThe default time step for this filter is set to the maximum theoretically stable value: 0.5 / 2^N, where N is the dimensionality of the image. For a 2D image, this means valid time steps are below 0.1250. For a 3D image, valid time steps are below 0.0625.\n\n\\see AnisotropicDiffusionImageFilter \n\n\n\\see AnisotropicDiffusionFunction \n\n\n\\see CurvatureNDAnisotropicDiffusionFunction",
  "itk_module" : "ITKAnisotropicSmoothing",
  "itk_group" : "AnisotropicSmoothing",
  "in_place" : true
}
