{
  "name" : "ScalarImageKmeansImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 1,
  "doc" : "Docs",
  "pixel_types" : "BasicPixelIDTypeList",
  "output_pixel_type" : "uint8_t",
  "members" : [
    {
      "name" : "ClassWithInitialMean",
      "type" : "std::vector<double>",
      "default" : "std::vector<double>()",
      "custom_itk_cast" : "if( this->m_ClassWithInitialMean.size() == 0 ) {\n     filter->AddClassWithInitialMean( NumericTraits<typename InputImageType::PixelType>::ZeroValue() );\n     filter->AddClassWithInitialMean( NumericTraits<typename InputImageType::PixelType>::OneValue() );\n   }\n   else\n   {\n     for( unsigned int i = 0; i < this->m_ClassWithInitialMean.size(); ++i )\n       filter->AddClassWithInitialMean( this->m_ClassWithInitialMean[i] );\n    }"
    },
    {
      "name" : "UseNonContiguousLabels",
      "type" : "bool",
      "default" : "false",
      "doc" : "",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/Get the UseNonContiguousLabels flag. When this is set to false the labels are numbered contiguously, like in {0,1,3..N}. When the flag is set to true, the labels are selected in order to span the dynamic range of the output image. This last option is useful when the output image is intended only for display. The default value is false.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set/Get the UseNonContiguousLabels flag. When this is set to false the labels are numbered contiguously, like in {0,1,3..N}. When the flag is set to true, the labels are selected in order to span the dynamic range of the output image. This last option is useful when the output image is intended only for display. The default value is false."
    }
  ],
  "measurements" : [
    {
      "name" : "FinalMeans",
      "type" : "std::vector<double>",
      "default" : "std::vector<double>()",
      "custom_itk_cast" : "this->m_FinalMeans = std::vector<double>( filter->GetFinalMeans().begin(), filter->GetFinalMeans().end() );",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Return the array of Means found after the classification."
    }
  ],
  "tests" : [
    {
      "tag" : "basic",
      "description" : "basic segmentation",
      "settings" : [
        {
          "parameter" : "ClassWithInitialMean",
          "type" : "double",
          "dim_vec" : 1,
          "value" : [
            25000,
            30000
          ]
        }
      ],
      "md5hash" : "6eb61d9e67f6d5d37e201f486bbf2bd4",
      "inputs" : [
        "Input/RA-Float.nrrd"
      ]
    }
  ],
  "briefdescription" : "Classifies the intensity values of a scalar image using the K-Means algorithm.",
  "detaileddescription" : "Given an input image with scalar values, it uses the K-Means statistical classifier in order to define labels for every pixel in the image. The filter is templated over the type of the input image. The output image is predefined as having the same dimension of the input image and pixel type unsigned char, under the assumption that the classifier will generate less than 256 classes.\n\nYou may want to look also at the RelabelImageFilter that may be used as a postprocessing stage, in particular if you are interested in ordering the labels by their relative size in number of pixels.\n\n\\see Image \n\n\\see ImageKmeansModelEstimator \n\n\\see KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator, KdTree \n\n\\see RelabelImageFilter\n\n\\par Wiki Examples:\n\n\\li All Examples \n\n\\li Cluster the pixels in a greyscale image"
}
