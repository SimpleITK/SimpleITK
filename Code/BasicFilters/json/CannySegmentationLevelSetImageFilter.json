{
  "name": "CannySegmentationLevelSetImageFilter",
  "template_code_filename": "ImageFilter",
  "template_test_filename": "ImageFilter",
  "number_of_inputs": 0,
  "pixel_types": "RealPixelIDTypeList",
  "filter_type": "itk::CannySegmentationLevelSetImageFilter<InputImageType, InputImageType>",
  "inputs": [
    {
      "name": "InitialImage",
      "type": "Image"
    },
    {
      "name": "FeatureImage",
      "type": "Image"
    }
  ],
  "members": [
    {
      "name": "Threshold",
      "type": "double",
      "default": "0.0",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set the Threshold parameter of the CannyEdgeDetectionImageFilter used by the underlying level set function.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set the Threshold parameter of the CannyEdgeDetectionImageFilter used by the underlying level set function."
    },
    {
      "name": "Variance",
      "type": "double",
      "default": "0.0",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set the Variance parameter of the CannyEdgeDetectionImageFilter used by the underlying level set function.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set the Variance parameter of the CannyEdgeDetectionImageFilter used by the underlying level set function."
    },
    {
      "name": "MaximumRMSError",
      "type": "double",
      "default": 0.02,
      "doc": "Value of RMS change below which the filter should stop. This is a convergence criterion."
    },
    {
      "name": "PropagationScaling",
      "type": "double",
      "default": "1.0",
      "doc": "Weight of direct propagation contribution to the speed term"
    },
    {
      "name": "CurvatureScaling",
      "type": "double",
      "default": "1.0",
      "doc": "Weight of the curvature contribution to the speed term"
    },
    {
      "name": "AdvectionScaling",
      "type": "double",
      "default": "1.0",
      "doc": "Weight of the advection contribution to the speed term"
    },
    {
      "name": "NumberOfIterations",
      "type": "uint32_t",
      "default": "1000u",
      "doc": "Number of iterations to run"
    },
    {
      "name": "ReverseExpansionDirection",
      "type": "bool",
      "default": "false",
      "doc": "Turn On/Off the flag which determines whether Positive or Negative speed terms will cause surface expansion.  If set to TRUE then negative speed terms will cause the surface to expand and positive speed terms will cause the surface to contract.  If set to FALSE (default) then positive speed terms will cause the surface to expand and negative speed terms will cause the surface to contract.  This method can be safely used to reverse the expansion/contraction as appropriate to a particular application or data set."
    },
    {
      "name": "IsoSurfaceValue",
      "type": "double",
      "default": "0.0",
      "doc": ""
    }
  ],
  "measurements": [
    {
      "name": "ElapsedIterations",
      "type": "uint32_t",
      "default": 0,
      "briefdescriptionGet": "Number of iterations run."
    },
    {
      "name": "RMSChange",
      "type": "double",
      "default": 0.0,
      "briefdescriptionGet": "The Root Mean Square of the levelset upon termination."
    },
    {
      "name": "CannyImage",
      "type": "Image",
      "default": "Image()",
      "custom_itk_cast": "this->m_CannyImage = this->CastITKToImage(filter->GetCannyImage());",
      "no_print": true,
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get the Canny image that was used to create the speed and advection images"
    }
  ],
  "tests": [
    {
      "tag": "cthead",
      "description": "segmentation around cerebellum in CT slice",
      "settings": [
        {
          "parameter": "Threshold",
          "value": "5.0"
        },
        {
          "parameter": "Variance",
          "value": "1.0"
        },
        {
          "parameter": "PropagationScaling",
          "value": "1.0"
        },
        {
          "parameter": "CurvatureScaling",
          "value": "0.0"
        },
        {
          "parameter": "AdvectionScaling",
          "value": "0.1"
        }
      ],
      "tolerance": 0.1,
      "measurements_results": [
        {
          "name": "ElapsedIterations",
          "value": 360,
          "tolerance": 10
        },
        {
          "name": "RMSChange",
          "value": 0.02,
          "tolerance": 0.001
        }
      ],
      "inputs": [
        "Input/cthead1-ls-seed.nrrd",
        "Input/cthead1-Float.mha"
      ]
    }
  ],
  "briefdescription": "Segments structures in images based on image features derived from pseudo-canny-edges.",
  "detaileddescription": "\\par IMPORTANT\nThe SegmentationLevelSetImageFilter class and the CannySegmentationLevelSetFunction class contain additional information necessary to the full understanding of how to use this filter.\n\n\n\\par OVERVIEW\nThis class is a level set method segmentation filter. It constructs a speed function which is designed to lock onto edges as detected by a Canny filter.\n\n\n\\par \nThe CannySegmentationLevelSetImageFilter can be a tool for refining an existing segmentation, or it can be used to try to segment a region by itself. Like all other level-set based segmentation filters (see SegmentationLevelSetImageFilter ), it works by first constructing a scalar speed term and a vector advection field based on edge features in the image. The level set front is then moved according to these two terms with the addition of a third curvature term to control the smoothness of the solution.\n\n\n\\par \nThe speed term is constructed as the Danielsson distance transform of the Canny edge image, as calculated by the CannyEdgeDetectionImageFilter . This scalar speed can be tuned in and out of the final evolution equation by setting the PropagationScaling parameter (a value of 0 removes the speed term).\n\n\n\\par \nThe advection field term is constructed by minimizing Danielsson distance squared. i.e. \\f$ \\mbox{min} \\int D^2 \\Rightarrow D \\nabla D \\f$ . This term moves the level set down the gradient of the distance transform.\n\n\n\\par \nIn practice, you may set the speed (propagation) term to zero if your initialization is already close to the edge you are interested in. If you are trying to segment a region by seeding with a small surface (blob, sphere) then you will likely want to add speed (propagation) to the equation so that the levelsets can expand along zero gradients. The relative influence of these two terms are controlled by the SetPropagationScaling and SetAdvectionScaling parameters.\n\n\n\\par INPUTS\nThis filter requires two inputs. The first input is a seed image. This seed image must contain an isosurface that you want to use as the seed for your segmentation. It can be a binary, graylevel, or floating point image. The only requirement is that it contain a closed isosurface that you will identify as the seed by setting the IsosurfaceValue parameter of the filter. For a binary image you will want to set your isosurface value halfway between your on and off values (i.e. for 0's and 1's, use an isosurface value of 0.5).\n\n\n\\par \nThe second input is the feature image. This is the image from which the speed function will be calculated. For most applications, this is the image that you want to segment. The desired isosurface in your seed image should lie within the region of your feature image that you are trying to segment.\n\n\n\\par \nSee SegmentationLevelSetImageFilter for more information on Inputs.\n\n\n\\par OUTPUTS\nThe filter outputs a single, scalar, real-valued image. Positive *values in the output image are inside the segmented region and negative *values in the image are outside of the inside region. The zero crossings of *the image correspond to the position of the level set front.\n\n\n\\par \nSee SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter for more information.\n\n\n\\par PARAMETERS\nThere are five parameters important for controlling the behavior of this filter. \n\n\n\\par \n(1) Threshold. Sets the thresholding value of the Canny edge detection. See CannyEdgeDetectionImageFilter for more information. \n\n\n\\par \n(2) Variance. Controls the smoothing parameter of the gaussian filtering done during Canny edge detection. \n\n\n\\par \n(3) CurvatureScaling. Controls the degree to which curvature influences the evolution of the level set. Higher values relative to Propagation and Advection scalings will yield a smoother surface. \n\n\n\\par \n(4) PropagationScaling. Scales the propagation (speed) term of the level set equation. Set this term to zero to allow the level set to flow only down the gradient of the distance transform. \n\n\n\\par \n(5) AdvectionScaling. Scales influence of the advection field relative to curvature and propagation terms.\n\n\n\\see SegmentationLevelSetImageFilter \n\n\n\\see CannySegmentationLevelSetFunction , \n\n\n\\see SparseFieldLevelSetImageFilter",
  "itk_module": "ITKLevelSets",
  "itk_group": "LevelSets",
  "in_place": true
}
