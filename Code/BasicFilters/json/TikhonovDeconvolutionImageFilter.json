{
  "name" : "TikhonovDeconvolutionImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 2,
  "doc" : "Some global documentation",
  "pixel_types" : "BasicPixelIDTypeList",
  "include_files" : [
    "sitkBoundaryConditions.hxx"
  ],
  "custom_set_input" : "filter->SetInput( image1 ); filter->SetKernelImage( image2 );",
  "members" : [
    {
      "name" : "RegularizationConstant",
      "type" : "double",
      "default" : "0.0",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "The regularization factor. Larger values reduce the dominance of noise in the solution, but results in higher approximation error in the deblurred image. Default value is 0.0, yielding the same results as the InverseDeconvolutionImageFilter .",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "The regularization factor. Larger values reduce the dominance of noise in the solution, but results in higher approximation error in the deblurred image. Default value is 0.0, yielding the same results as the InverseDeconvolutionImageFilter ."
    },
    {
      "name" : "Normalize",
      "type" : "bool",
      "default" : "false",
      "doc" : "",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Normalize the output image by the sum of the kernel components\n",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    },
    {
      "name" : "BoundaryCondition",
      "enum" : [
        "ZERO_PAD",
        "ZERO_FLUX_NEUMANN_PAD",
        "PERIODIC_PAD"
      ],
      "default" : "itk::simple::TikhonovDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
      "custom_itk_cast" : "nsstd::auto_ptr< ImageBoundaryCondition< InputImageType > > bc( CreateNewBoundaryConditionInstance< Self, FilterType >( m_BoundaryCondition ) ); filter->SetBoundaryCondition( bc.get() );\n"
    },
    {
      "name" : "OutputRegionMode",
      "enum" : [
        "SAME",
        "VALID"
      ],
      "default" : "itk::simple::TikhonovDeconvolutionImageFilter::SAME",
      "itk_type" : "typename FilterType::OutputRegionModeType"
    }
  ],
  "tests" : [
    {
      "tag" : "defaults",
      "description" : "Tikhonov deconvolution of image blurred with a Gaussian kernel",
      "settings" : [
        {
          "parameter" : "Normalize",
          "value" : "true",
          "python_value" : "True",
          "R_value" : "TRUE"
        }
      ],
      "tolerance" : "0.0001",
      "inputs" : [
        "Input/DeconvolutionInput.nrrd",
        "Input/DeconvolutionKernel.nrrd"
      ]
    }
  ],
  "briefdescription" : "An inverse deconvolution filter regularized in the Tikhonov sense.",
  "detaileddescription" : "The Tikhonov deconvolution filter is the inverse deconvolution filter with a regularization term added to the denominator. The filter minimizes the equation \\f[ ||\\hat{f} \\otimes h - g||_{L_2}^2 + \\mu||\\hat{f}||^2 \\f] where \\f$\\hat{f}\\f$ is the estimate of the unblurred image, \\f$h\\f$ is the blurring kernel, \\f$g\\f$ is the blurred image, and \\f$\\mu\\f$ is a non-negative real regularization function.\n\nThe filter applies a kernel described in the Fourier domain as \\f$H^*(\\omega) / (|H(\\omega)|^2 + \\mu)\\f$ where \\f$H(\\omega)\\f$ is the Fourier transform of \\f$h\\f$ . The term \\f$\\mu\\f$ is called RegularizationConstant in this filter. If \\f$\\mu\\f$ is set to zero, this filter is equivalent to the InverseDeconvolutionImageFilter .\n\n\\author Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA de Jouy-en-Josas, France \n\nCory Quammen, The University of North Carolina at Chapel Hill"
}
