{
  "name" : "MinMaxCurvatureFlowImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 1,
  "doc" : "Some global documentation",
  "pixel_types" : "RealPixelIDTypeList",
  "members" : [
    {
      "name" : "TimeStep",
      "type" : "double",
      "default" : 0.05,
      "doc" : "Time step for PDE solver"
    },
    {
      "name" : "NumberOfIterations",
      "type" : "uint32_t",
      "default" : "5u",
      "doc" : "Number of iterations to run"
    },
    {
      "name" : "StencilRadius",
      "type" : "int",
      "default" : 2,
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/Get the stencil radius.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set/Get the stencil radius."
    }
  ],
  "tests" : [
    {
      "tag" : "defaults",
      "description" : "Simply run with default settings",
      "settings" : [],
      "tolerance" : 0.01,
      "md5hash" : null,
      "inputs" : [
        "Input/RA-Float.nrrd"
      ]
    },
    {
      "tag" : "longer",
      "description" : "Change number of iterations and timestep",
      "settings" : [
        {
          "parameter" : "TimeStep",
          "value" : 0.1
        },
        {
          "parameter" : "NumberOfIterations",
          "cxx_value" : "10u",
          "value" : "10"
        }
      ],
      "tolerance" : 0.01,
      "md5hash" : null,
      "inputs" : [
        "Input/RA-Float.nrrd"
      ]
    }
  ],
  "briefdescription" : "Denoise an image using min/max curvature flow.",
  "detaileddescription" : "MinMaxCurvatureFlowImageFilter implements a curvature driven image denoising algorithm. Iso-brightness contours in the grayscale input image are viewed as a level set. The level set is then evolved using a curvature-based speed function:\n\n \\f[ I_t = F_{\\mbox{minmax}} |\\nabla I| \\f] \n\nwhere \\f$ F_{\\mbox{minmax}} = \\max(\\kappa,0) \\f$ if \\f$ \\mbox{Avg}_{\\mbox{stencil}}(x) \\f$ is less than or equal to \\f$ T_{thresold} \\f$ and \\f$ \\min(\\kappa,0) \\f$ , otherwise. \\f$ \\kappa \\f$ is the mean curvature of the iso-brightness contour at point \\f$ x \\f$ .\n\nIn min/max curvature flow, movement is turned on or off depending on the scale of the noise one wants to remove. Switching depends on the average image value of a region of radius \\f$ R \\f$ around each point. The choice of \\f$ R \\f$ , the stencil radius, governs the scale of the noise to be removed.\n\nThe threshold value \\f$ T_{threshold} \\f$ is the average intensity obtained in the direction perpendicular to the gradient at point \\f$ x \\f$ at the extrema of the local neighborhood.\n\nThis filter make use of the multi-threaded finite difference solver hierarchy. Updates are computed using a MinMaxCurvatureFlowFunction object. A zero flux Neumann boundary condition is used when computing derivatives near the data boundary.\n\n\\warning This filter assumes that the input and output types have the same dimensions. This filter also requires that the output image pixels are of a real type. This filter works for any dimensional images, however for dimensions greater than 3D, an expensive brute-force search is used to compute the local threshold.\n\nReference: \"Level Set Methods and Fast Marching Methods\", J.A. Sethian, Cambridge Press, Chapter 16, Second edition, 1999.\n\n\\see MinMaxCurvatureFlowFunction \n\n\\see CurvatureFlowImageFilter \n\n\\see BinaryMinMaxCurvatureFlowImageFilter"
}
