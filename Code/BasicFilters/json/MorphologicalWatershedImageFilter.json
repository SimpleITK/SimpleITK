{
  "name" : "MorphologicalWatershedImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 1,
  "pixel_types" : "ScalarPixelIDTypeList",
  "output_pixel_type" : "uint32_t",
  "members" : [
    {
      "name" : "Level",
      "type" : "double",
      "default" : "0.0",
      "pixeltype" : "Input",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    },
    {
      "name" : "MarkWatershedLine",
      "type" : "bool",
      "default" : "true",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/Get whether the watershed pixel must be marked or not. Default is true. Set it to false do not only avoid writing watershed pixels, it also decrease algorithm complexity.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set/Get whether the watershed pixel must be marked or not. Default is true. Set it to false do not only avoid writing watershed pixels, it also decrease algorithm complexity."
    },
    {
      "name" : "FullyConnected",
      "type" : "bool",
      "default" : "false",
      "doc" : "",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/Get whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set/Get whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn."
    }
  ],
  "custom_methods" : [],
  "tests" : [
    {
      "tag" : "defaults",
      "description" : "Simply run with default settings",
      "settings" : [],
      "md5hash" : "406079d7904d4e9ab0b5f29f7a3a1ea8",
      "inputs" : [
        "Input/cthead1-grad-mag.nrrd"
      ]
    },
    {
      "tag" : "level_1",
      "description" : "Set some parameters",
      "settings" : [
        {
          "parameter" : "Level",
          "value" : "1.0"
        },
        {
          "parameter" : "MarkWatershedLine",
          "value" : "false",
          "python_value" : "False",
          "R_value" : "FALSE"
        }
      ],
      "md5hash" : "a204ce7cf8ec4e7bc6538f0515a8910e",
      "inputs" : [
        "Input/cthead1-grad-mag.nrrd"
      ]
    }
  ],
  "briefdescription" : "Watershed segmentation implementation with morphological operators.",
  "detaileddescription" : "Watershed pixel are labeled 0. TOutputImage should be an integer type. Labels of output image are in no particular order. You can reorder the labels such that object labels are consecutive and sorted based on object size by passing the output of this filter to a RelabelComponentImageFilter .\n\nThe morphological watershed transform algorithm is described in Chapter 9.2 of Pierre Soille's book \"Morphological Image Analysis:\nPrinciples and Applications\", Second Edition, Springer, 2003.\n\nThis code was contributed in the Insight Journal paper: \"The watershed transform in ITK - discussion and new developments\" by Beare R., Lehmann G. https://www.insight-journal.org/browse/publication/92 \n\n\\author Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA de Jouy-en-Josas, France.\n\n\n\\see WatershedImageFilter , MorphologicalWatershedFromMarkersImageFilter",
  "itk_module" : "ITKWatersheds",
  "itk_group" : "Watersheds",
  "in_place" : false
}
