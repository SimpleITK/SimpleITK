{
  "name" : "TransformGeometryImageFilter",
  "template_code_filename" : "ImageFilter",
  "number_of_inputs" : 0,
  "doc" : "",
  "pixel_types" : "NonLabelPixelIDTypeList",
  "filter_type" : "itk::TransformGeometryImageFilter<InputImageType, OutputImageType>",
  "inputs" : [
    {
      "name" : "Image",
      "type" : "Image"
    },
    {
      "name" : "Transform",
      "type" : "Transform",
      "custom_itk_cast" : "const typename FilterType::TransformType *itkTx = dynamic_cast<const typename FilterType::TransformType *>(inTransform->GetITKBase() );\n  if ( !itkTx )\n    {\n    sitkExceptionMacro( \"Unexpected error converting transform! Possible miss matching dimensions!\" );\n    }\n  else { filter->SetTransform( itkTx ); }",
      "no_size_check" : 0
    }
  ],
  "members" : [],
  "custom_methods" : [],
  "tests" : [],
  "briefdescription" : "Pseudo-Resample an image by modifying the geometric meta-data and not the pixels.",
  "detaileddescription" : "The TransformGeometryImageFilter will generate a physical memory-modified version of the input image if the input transform is not identity. Its neglectful use can be a source of problems: e.g. it can exhaust the memory if the image is very large, and it WILL reduce the image quality when there are lots of transforms to be superimposed for the input image. Often times, we are not interested in the intermediate transformed images.\n\nIf all the transforms are rigid, there is a far superior way to achieve a similar result. Updating image metadata in-place removes the accumulated resampling errors as well as eliminating the expense of accessing the physical memory of the image. We need to compose all the transforms beforehand to make use of this filter.",
  "itk_module" : "ITKTransform",
  "itk_group" : "Transform",
  "in_place" : true
}
