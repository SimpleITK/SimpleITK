{
  "name" : "ProjectedLandweberDeconvolutionImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 2,
  "doc" : "Some global documentation",
  "pixel_types" : "BasicPixelIDTypeList",
  "include_files" : [
    "sitkBoundaryConditions.hxx"
  ],
  "custom_set_input" : "filter->SetInput( image1 ); filter->SetKernelImage( image2 );",
  "members" : [
    {
      "name" : "Alpha",
      "type" : "double",
      "default" : "0.1",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set the relaxation factor.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Get the relaxation factor."
    },
    {
      "name" : "NumberOfIterations",
      "type" : "int",
      "default" : "1",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set the number of iterations.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Get the number of iterations."
    },
    {
      "name" : "Normalize",
      "type" : "bool",
      "default" : "false",
      "doc" : "",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Normalize the output image by the sum of the kernel components\n",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    },
    {
      "name" : "BoundaryCondition",
      "enum" : [
        "ZERO_PAD",
        "ZERO_FLUX_NEUMANN_PAD",
        "PERIODIC_PAD"
      ],
      "default" : "itk::simple::ProjectedLandweberDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
      "custom_itk_cast" : "std::unique_ptr< ImageBoundaryCondition< InputImageType > > bc( CreateNewBoundaryConditionInstance< Self, FilterType >( m_BoundaryCondition ) ); filter->SetBoundaryCondition( bc.get() );\n"
    },
    {
      "name" : "OutputRegionMode",
      "enum" : [
        "SAME",
        "VALID"
      ],
      "default" : "itk::simple::ProjectedLandweberDeconvolutionImageFilter::SAME",
      "itk_type" : "typename FilterType::OutputRegionModeEnum"
    }
  ],
  "tests" : [
    {
      "tag" : "defaults",
      "description" : "Projected Landweber deconvolution of image blurred with a Gaussian kernel",
      "settings" : [
        {
          "parameter" : "Normalize",
          "value" : "true",
          "python_value" : "True",
          "R_value" : "TRUE"
        }
      ],
      "tolerance" : "0.0001",
      "inputs" : [
        "Input/DeconvolutionInput.nrrd",
        "Input/DeconvolutionKernel.nrrd"
      ]
    }
  ],
  "briefdescription" : "Deconvolve an image using the projected Landweber deconvolution algorithm.",
  "detaileddescription" : "This filter performs the same calculation per iteration as the LandweberDeconvolutionImageFilter . However, at each iteration, negative pixels in the intermediate result are projected (set) to zero. This is useful if the solution is assumed to always be non-negative, which is the case when dealing with images formed by counting photons, for example.\n\nThis code was adapted from the Insight Journal contribution:\n\n\"Deconvolution: infrastructure and reference algorithms\" by Gaetan Lehmann https://www.insight-journal.org/browse/publication/753 \n\n\\author Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA de Jouy-en-Josas, France \n\n\n\\author Cory Quammen, The University of North Carolina at Chapel Hill\n\n\n\\see IterativeDeconvolutionImageFilter \n\n\n\\see RichardsonLucyDeconvolutionImageFilter \n\n\n\\see LandweberDeconvolutionImageFilter",
  "itk_module" : "ITKDeconvolution",
  "itk_group" : "Deconvolution",
  "in_place" : false
}
