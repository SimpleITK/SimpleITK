{
  "name" : "FFTNormalizedCorrelationImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 2,
  "pixel_types" : "BasicPixelIDTypeList",
  "output_pixel_type" : "typename itk::NumericTraits<typename InputImageType::PixelType>::RealType",
  "filter_type" : "itk::FFTNormalizedCorrelationImageFilter<InputImageType, OutputImageType>",
  "custom_set_input" : "filter->SetFixedImage( image1 ); filter->SetMovingImage(image2 );",
  "members" : [
    {
      "name" : "RequiredNumberOfOverlappingPixels",
      "type" : "uint64_t",
      "default" : "0u"
    }
  ],
  "tests" : [
    {
      "tag" : "defaults",
      "description" : "Basic xcorr with and odd kernel",
      "settings" : [],
      "tolerance" : "0.0002",
      "inputs" : [
        "Input/DeconvolutionInput.nrrd",
        "Input/Gaussian_1.5.nrrd"
      ]
    },
    {
      "tag" : "EvenKernel",
      "description" : "Basic xcorr with an even kernel",
      "settings" : [],
      "tolerance" : "0.0001",
      "inputs" : [
        "Input/DeconvolutionInput.nrrd",
        "Input/DeconvolutionKernel.nrrd"
      ]
    },
    {
      "tag" : "3D",
      "description" : "Basic xcorr with an even kernel",
      "settings" : [
        {
          "parameter" : "RequiredNumberOfOverlappingPixels",
          "type" : "uint64_t",
          "cxx_value" : "15000u",
          "value" : "15000"
        }
      ],
      "tolerance" : "0.0001",
      "inputs" : [
        "Input/OAS1_0001_MR1_mpr-1_anon.nrrd",
        "Input/OAS1_0002_MR1_mpr-1_anon.nrrd"
      ]
    }
  ],
  "briefdescription" : "Calculate normalized cross correlation using FFTs.",
  "detaileddescription" : "This filter calculates the normalized cross correlation (NCC) of two images using FFTs instead of spatial correlation. It is much faster than spatial correlation for reasonably large structuring elements. This filter is a subclass of the more general MaskedFFTNormalizedCorrelationImageFilter and operates by essentially setting the masks in that algorithm to images of ones. As described in detail in the references below, there is no computational overhead to utilizing the more general masked algorithm because the FFTs of the images of ones are still necessary for the computations.\n\nInputs: Two images are required as inputs, fixedImage and movingImage. In the context of correlation, inputs are often defined as: \"image\" and \"template\". In this filter, the fixedImage plays the role of the image, and the movingImage plays the role of the template. However, this filter is capable of correlating any two images and is not restricted to small movingImages (templates).\n\nOptional parameters: The RequiredNumberOfOverlappingPixels enables the user to specify how many voxels of the two images must overlap; any location in the correlation map that results from fewer than this number of voxels will be set to zero. Larger values zero-out pixels on a larger border around the correlation image. Thus, larger values remove less stable computations but also limit the capture range. If RequiredNumberOfOverlappingPixels is set to 0, the default, no zeroing will take place.\n\nImage size: fixedImage and movingImage need not be the same size. Furthermore, whereas some algorithms require that the \"template\" be smaller than the \"image\" because of errors in the regions where the two are not fully overlapping, this filter has no such restriction.\n\nImage spacing: Since the computations are done in the pixel domain, all input images must have the same spacing.\n\nOutputs; The output is an image of RealPixelType that is the NCC of the two images and its values range from -1.0 to 1.0. The size of this NCC image is, by definition, size(fixedImage) + size(movingImage) - 1.\n\nExample filter usage: \\code\n* typedef itk::FFTNormalizedCorrelationImageFilter< ShortImageType, DoubleImageType > FilterType;\n\n* FilterType::Pointer filter = FilterType::New();\n\n* filter->SetFixedImage( fixedImage );\n\n* filter->SetMovingImage( movingImage );\n\n* filter->SetRequiredNumberOfOverlappingPixels(20);\n\n* filter->Update();\n\n* \n\n\\endcode\n\n\\warning The pixel type of the output image must be of real type (float or double). ConceptChecking is used to enforce the output pixel type. You will get a compilation error if the pixel type of the output image is not float or double.\n\nReferences: 1) D. Padfield. \"Masked object registration in the Fourier domain.\" Transactions on Image Processing. 2) D. Padfield. \"Masked FFT registration\". In Proc. Computer Vision and Pattern Recognition, 2010.\n\n\\author : Dirk Padfield, GE Global Research, padfield@research.ge.com"
}
