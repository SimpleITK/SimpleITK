{
  "name" : "AddImageFilter",
  "template_code_filename" : "BinaryFunctorFilter",
  "template_test_filename" : "ImageFilter",
  "constant_type" : "double",
  "number_of_inputs" : 2,
  "doc" : "Some global documentation",
  "pixel_types" : "NonLabelPixelIDTypeList",
  "members" : [],
  "tests" : [
    {
      "tag" : "2d",
      "description" : "2D",
      "settings" : [],
      "md5hash" : "bc458a17e18c79ae767e8be47451d1b4",
      "inputs" : [
        "Input/STAPLE1.png",
        "Input/STAPLE2.png"
      ]
    },
    {
      "tag" : "3d",
      "description" : "3D",
      "settings" : [],
      "md5hash" : "dfc0af11e8c30a0bd6dedd560486f419",
      "inputs" : [
        "Input/RA-Short.nrrd",
        "Input/RA-Short.nrrd"
      ]
    },
    {
      "tag" : "2d_rgb",
      "description" : "2D-RGB",
      "settings" : [],
      "md5hash" : "5f00ee8a03437b4e421eb761dc340bc8",
      "inputs" : [
        "Input/VM1111Shrink-RGBFloat.nrrd",
        "Input/VM1111Shrink-RGBFloat.nrrd"
      ]
    }
  ],
  "briefdescription" : "Pixel-wise addition of two images.",
  "detaileddescription" : "This class is templated over the types of the two input images and the type of the output image. Numeric conversions (castings) are done by the C++ defaults.\n\nThe pixel type of the input 1 image must have a valid definition of the operator+ with a pixel type of the image 2. This condition is required because internally this filter will perform the operation\n\n\\code\n* pixel_from_image_1 + pixel_from_image_2\n\n* \n\n\\endcode\n\nAdditionally the type resulting from the sum, will be cast to the pixel type of the output image.\n\nThe total operation over one pixel will be \\code\n* output_pixel = static_cast<OutputPixelType>( input1_pixel + input2_pixel )\n\n* \n\n\\endcode\n\nFor example, this filter could be used directly for adding images whose pixels are vectors of the same dimension, and to store the resulting vector in an output image of vector pixels.\n\nThe images to be added are set using the methods: \\code\n* SetInput1 ( image1 );\n\n* SetInput2 ( image2 );\n\n* \n\n\\endcode\n\nAdditionally, this filter can be used to add a constant to every pixel of an image by using \\code\n* SetInput1 ( image1 );\n\n* SetConstant2 ( constant );\n\n* \n\n\\endcode\n\n\\warning No numeric overflow checking is performed in this filter.\n\n\\par Wiki Examples:\n\n\\li All Examples \n\n\\li Add two images together \n\n\\li Add a constant to every pixel in an image"
}
