{
  "name": "LabelVotingImageFilter",
  "template_code_filename": "MultiInputImageFilter",
  "template_test_filename": "ImageFilter",
  "number_of_inputs": 1,
  "pixel_types": "typelist2::typelist< BasicPixelID<uint8_t>, BasicPixelID<uint16_t>, BasicPixelID<uint32_t>, BasicPixelID<uint64_t> >",
  "members": [
    {
      "name": "LabelForUndecidedPixels",
      "type": "uint64_t",
      "default": "std::numeric_limits<uint64_t>::max()",
      "pixeltype": "Output",
      "custom_itk_cast": "if (m_LabelForUndecidedPixels!=std::numeric_limits<uint64_t>::max()) filter->SetLabelForUndecidedPixels(this->m_LabelForUndecidedPixels);",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set label value for undecided pixels.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get label value used for undecided pixels. After updating the filter, this function returns the actual label value used for undecided pixels in the current output. Note that this value is overwritten when SetLabelForUndecidedPixels is called and the new value only becomes effective upon the next filter update."
    }
  ],
  "tests": [
    {
      "tag": "uint8_case",
      "description": "Test for a case where the undecided value may overflow",
      "inputs": [
        "Input/STAPLE1.png",
        "Input/STAPLE2.png"
      ],
      "md5hash": "a5f7ea84f72b82971f3f7476475dfdf2"
    },
    {
      "tag": "basic",
      "description": "Basic usage with required parameters",
      "inputA_cast": "sitkUInt16",
      "inputB_cast": "sitkUInt16",
      "inputs": [
        "Input/STAPLE1.png",
        "Input/STAPLE2.png"
      ],
      "md5hash": "f54bc205c5041adc279ac58e3eb22f85"
    }
  ],
  "briefdescription": "This filter performs pixelwise voting among an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).",
  "detaileddescription": "Label voting is a simple method of classifier combination applied to image segmentation. Typically, the accuracy of the combined segmentation exceeds the accuracy of any of the input segmentations. Voting is therefore commonly used as a way of boosting segmentation performance.\n\nThe use of label voting for combination of multiple segmentations is described in\n\nT. Rohlfing and C. R. Maurer, Jr., \"Multi-classifier framework for\natlas-based image segmentation,\" Pattern Recognition Letters, 2005.\n\n\\par INPUTS\nAll input volumes to this filter must be segmentations of an image, that is, they must have discrete pixel values where each value represents a different segmented object.\n\n\nInput volumes must all contain the same size RequestedRegions. Not all input images must contain all possible labels, but all label values must have the same meaning in all images.\n\n\\par OUTPUTS\nThe voting filter produces a single output volume. Each output pixel contains the label that occurred most often among the labels assigned to this pixel in all the input volumes, that is, the label that received the maximum number of \"votes\" from the input pixels.. If the maximum number of votes is not unique, i.e., if more than one label have a maximum number of votes, an \"undecided\" label is assigned to that output pixel.\n\n\nBy default, the label used for undecided pixels is the maximum label value used in the input images plus one. Since it is possible for an image with 8 bit pixel values to use all 256 possible label values, it is permissible to combine 8 bit (i.e., byte) images into a 16 bit (i.e., short) output image.\n\n\\par PARAMETERS\nThe label used for \"undecided\" labels can be set using SetLabelForUndecidedPixels. This functionality can be unset by calling UnsetLabelForUndecidedPixels.\n\n\n\\author Torsten Rohlfing, SRI International, Neuroscience Program",
  "itk_module": "ITKLabelVoting",
  "itk_group": "LabelVoting",
  "in_place": false
}
