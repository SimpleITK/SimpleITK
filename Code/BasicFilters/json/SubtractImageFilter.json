{
  "name" : "SubtractImageFilter",
  "template_code_filename" : "BinaryFunctorFilter",
  "template_test_filename" : "ImageFilter",
  "constant_type" : "double",
  "number_of_inputs" : 2,
  "doc" : "Some global documentation",
  "pixel_types" : "NonLabelPixelIDTypeList",
  "members" : [],
  "tests" : [
    {
      "tag" : "2D",
      "description" : "Default parameter settings",
      "settings" : [],
      "md5hash" : "ce338fe6899778aacfc28414f2d9498b",
      "inputs" : [
        "Input/RA-Slice-Float.nrrd",
        "Input/RA-Slice-Float.nrrd"
      ]
    },
    {
      "tag" : "3D",
      "description" : "Subtract a volume from a volume",
      "settings" : [],
      "md5hash" : "59071590099d21dd439896592338bf95",
      "inputs" : [
        "Input/RA-Short.nrrd",
        "Input/RA-Short.nrrd"
      ]
    },
    {
      "tag" : "2d_rgb",
      "description" : "2D-RGB",
      "settings" : [],
      "md5hash" : "30d54bcc6106abcac387cf9da95fe514",
      "inputs" : [
        "Input/VM1111Shrink-RGBFloat.nrrd",
        "Input/VM1111Shrink-RGBFloat.nrrd"
      ]
    }
  ],
  "briefdescription" : "Pixel-wise subtraction of two images.",
  "detaileddescription" : "Subtract each pixel from image2 from its corresponding pixel in image1:\n\n\\code\nOutput = Input1 - Input2.\n\n\\endcode\n\n\nThis is done using\n\n\\code\nSetInput1 ( image1 );\n\nSetInput2 ( image2 );\n\n\\endcode\n\n\nThis class is templated over the types of the two input images and the type of the output image. Numeric conversions (castings) are done by the C++ defaults.\n\nAdditionally, a constant can be subtracted from every pixel in an image using:\n\n\\code\nSetInput1 ( image1 );\n\nSetConstant2 ( constant );\n\n\\endcode\n\n\n\\note The result of AddImageFilter with a negative constant is not necessarily the same as SubtractImageFilter . This would be the case when the PixelType defines an operator-() that is not the inverse of operator+()",
  "itk_module" : "ITKImageIntensity",
  "itk_group" : "ImageIntensity",
  "in_place" : true
}
