{
  "name" : "XorImageFilter",
  "template_code_filename" : "BinaryFunctorFilter",
  "template_test_filename" : "ImageFilter",
  "constant_type" : "int",
  "number_of_inputs" : 2,
  "doc" : "Some global documentation",
  "pixel_types" : "IntegerPixelIDTypeList",
  "members" : [],
  "tests" : [
    {
      "tag" : "defaults",
      "description" : "Simply run with default settings",
      "settings" : [],
      "md5hash" : "f6b04487e9d8d12d737802e1a8e78c0b",
      "inputs" : [
        "Input/STAPLE1.png",
        "Input/STAPLE2.png"
      ]
    }
  ],
  "briefdescription" : "Computes the XOR bitwise operator pixel-wise between two images.",
  "detaileddescription" : "This class is templated over the types of the two input images and the type of the output image. Numeric conversions (castings) are done by the C++ defaults.\n\nSince the bitwise XOR operation is only defined in C++ for integer types, the images passed to this filter must comply with the requirement of using integer pixel type.\n\nThe total operation over one pixel will be\n\n\\code\n* output_pixel = static_cast<OutputPixelType>( input1_pixel ^ input2_pixel )\n\n* \n\n\\endcode\n\nWhere \"^\" is the boolean XOR operator in C++.\n\n\\par Wiki Examples:\n\n\\li All Examples \n\n\\li Binary XOR (exclusive OR) two images"
}
