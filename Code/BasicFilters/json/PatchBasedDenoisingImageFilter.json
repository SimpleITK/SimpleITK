{
  "name": "PatchBasedDenoisingImageFilter",
  "template_code_filename": "ImageFilter",
  "template_test_filename": "ImageFilter",
  "number_of_inputs": 1,
  "no_procedure": true,
  "doc": "",
  "pixel_types": "BasicPixelIDTypeList",
  "include_files": [
    "itkGaussianRandomSpatialNeighborSubsampler.h"
  ],
  "custom_set_input": "filter->SetInput( image1 );\n  using SamplerType = itk::Statistics::GaussianRandomSpatialNeighborSubsampler< typename FilterType::PatchSampleType, typename InputImageType::RegionType>;\n  typename SamplerType::Pointer sampler = SamplerType::New();\n  sampler->SetVariance(m_SampleVariance);\n  sampler->SetRadius(itk::Math::Floor<unsigned int>(std::sqrt(m_SampleVariance)*2.5));\n  sampler->SetNumberOfResultsRequested(m_NumberOfSamplePatches);\n  filter->SetSampler(sampler);",
  "members": [
    {
      "name": "KernelBandwidthSigma",
      "type": "double",
      "default": "400.0",
      "doc": "KernelBandwidthSigma",
      "custom_itk_cast": "typename FilterType::RealArrayType a(image1->GetNumberOfComponentsPerPixel());\n  a.Fill(m_KernelBandwidthSigma);\n  filter->SetKernelBandwidthSigma(a);",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get initial kernel bandwidth estimate. To prevent the class from automatically modifying this estimate, set KernelBandwidthEstimation to false in the base class.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get initial kernel bandwidth estimate. To prevent the class from automatically modifying this estimate, set KernelBandwidthEstimation to false in the base class."
    },
    {
      "name": "PatchRadius",
      "type": "uint32_t",
      "default": "4u",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get the patch radius specified in physical coordinates. Patch radius is preferably set to an even number. Currently, only isotropic patches in physical space are allowed; patches can be anisotropic in voxel space.\n",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get the patch radius specified in physical coordinates. Patch radius is preferably set to an even number. Currently, only isotropic patches in physical space are allowed; patches can be anisotropic in voxel space.\n"
    },
    {
      "name": "NumberOfIterations",
      "type": "uint32_t",
      "default": "1u",
      "doc": "Number of iterations to run",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get the number of denoising iterations to perform. Must be a positive integer. Defaults to 1.\n",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get the number of denoising iterations to perform. Must be a positive integer. Defaults to 1.\n"
    },
    {
      "name": "NumberOfSamplePatches",
      "type": "uint32_t",
      "default": "200u",
      "custom_itk_cast": "",
      "detaileddescriptionSet": "Set/Get the number of patches to sample for each pixel.\n"
    },
    {
      "name": "SampleVariance",
      "type": "double",
      "default": "400.0",
      "custom_itk_cast": "",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get the variance of the domain where patches are sampled.\n",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get the variance of the domain where patches are sampled.\n"
    },
    {
      "enum": [
        "NOMODEL",
        "GAUSSIAN",
        "RICIAN",
        "POISSON"
      ],
      "name": "NoiseModel",
      "default": "itk::simple::PatchBasedDenoisingImageFilter::NOMODEL",
      "itk_type": "typename FilterType::NoiseModelEnum",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get the noise model type. Defaults to GAUSSIAN. To use the noise model during denoising, FidelityWeight must be positive.\n",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get the noise model type. Defaults to GAUSSIAN. To use the noise model during denoising, FidelityWeight must be positive.\n"
    },
    {
      "name": "NoiseSigma",
      "type": "double",
      "default": "0.0",
      "custom_itk_cast": "if (this->m_NoiseSigma != 0.0) filter->SetNoiseSigma(this->m_NoiseSigma);",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get the noise sigma. Used by the noise model where appropriate, defaults to 5% of the image intensity range",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": ""
    },
    {
      "name": "NoiseModelFidelityWeight",
      "type": "double",
      "default": "0.0",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get the weight on the fidelity term (penalizes deviations from the noisy data). This option is used when a noise model is specified. This weight controls the balance between the smoothing and the closeness to the noisy data.\n",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get the weight on the fidelity term (penalizes deviations from the noisy data). This option is used when a noise model is specified. This weight controls the balance between the smoothing and the closeness to the noisy data.\n"
    },
    {
      "name": "AlwaysTreatComponentsAsEuclidean",
      "type": "bool",
      "default": "false",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get flag indicating whether all components should always be treated as if they are in euclidean space regardless of pixel type. Defaults to false.\n",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get flag indicating whether all components should always be treated as if they are in euclidean space regardless of pixel type. Defaults to false.\n"
    },
    {
      "name": "KernelBandwidthEstimation",
      "type": "bool",
      "default": "false",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get flag indicating whether kernel-bandwidth should be estimated automatically from the image data. Defaults to true.\n",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get flag indicating whether kernel-bandwidth should be estimated automatically from the image data. Defaults to true.\n"
    },
    {
      "name": "KernelBandwidthMultiplicationFactor",
      "type": "double",
      "default": "1.0",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get the kernel bandwidth sigma multiplication factor used to modify the automatically-estimated kernel bandwidth sigma. At times, it may be desirable to modify the value of the automatically-estimated sigma. Typically, this number isn't very far from 1. Note: This is used only when KernelBandwidthEstimation is True/On.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get the kernel bandwidth sigma multiplication factor used to modify the automatically-estimated kernel bandwidth sigma. At times, it may be desirable to modify the value of the automatically-estimated sigma. Typically, this number isn't very far from 1. Note: This is used only when KernelBandwidthEstimation is True/On."
    },
    {
      "name": "KernelBandwidthUpdateFrequency",
      "type": "uint32_t",
      "default": "3u",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get the update frequency for the kernel bandwidth estimation. An optimal bandwidth will be re-estimated based on the denoised image after every 'n' iterations. Must be a positive integer. Defaults to 3, i.e. bandwidth updated after every 3 denoising iteration.\n",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get the update frequency for the kernel bandwidth estimation. An optimal bandwidth will be re-estimated based on the denoised image after every 'n' iterations. Must be a positive integer. Defaults to 3, i.e. bandwidth updated after every 3 denoising iteration.\n"
    },
    {
      "name": "KernelBandwidthFractionPixelsForEstimation",
      "type": "double",
      "default": "0.2",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set/Get the fraction of the image to use for kernel bandwidth sigma estimation. To reduce the computational burden for computing sigma, a small random fraction of the image pixels can be used.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Set/Get the fraction of the image to use for kernel bandwidth sigma estimation. To reduce the computational burden for computing sigma, a small random fraction of the image pixels can be used."
    }
  ],
  "tests": [
    {
      "tag": "default",
      "description": "Simply run with default settings",
      "settings": [],
      "tolerance": 0.9,
      "inputs": [
        "Input/cthead1.png"
      ]
    }
  ],
  "briefdescription": "Derived class implementing a specific patch-based denoising algorithm, as detailed below.",
  "detaileddescription": "This class is derived from the base class PatchBasedDenoisingBaseImageFilter ; please refer to the documentation of the base class first. This class implements a denoising filter that uses iterative non-local, or semi-local, weighted averaging of image patches for image denoising. The intensity at each pixel 'p' gets updated as a weighted average of intensities of a chosen subset of pixels from the image.\n\nThis class implements the denoising algorithm using a Gaussian kernel function for nonparametric density estimation. The class implements a scheme to automatically estimated the kernel bandwidth parameter (namely, sigma) using leave-one-out cross validation. It implements schemes for random sampling of patches non-locally (from the entire image) as well as semi-locally (from the spatial proximity of the pixel being denoised at the specific point in time). It implements a specific scheme for defining patch weights (mask) as described in Awate and Whitaker 2005 IEEE CVPR and 2006 IEEE TPAMI.\n\n\\see PatchBasedDenoisingBaseImageFilter",
  "itk_module": "ITKDenoising",
  "itk_group": "Denoising",
  "in_place": false
}
