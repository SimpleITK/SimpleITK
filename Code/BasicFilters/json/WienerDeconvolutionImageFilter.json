{
  "name" : "WienerDeconvolutionImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 2,
  "doc" : "Some global documentation",
  "pixel_types" : "BasicPixelIDTypeList",
  "include_files" : [
    "sitkBoundaryConditions.hxx"
  ],
  "custom_set_input" : "filter->SetInput( image1 ); filter->SetKernelImage( image2 );",
  "members" : [
    {
      "name" : "NoiseVariance",
      "type" : "double",
      "default" : "0.0",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/get the variance of the zero-mean Gaussian white noise assumed to be added to the input.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set/get the variance of the zero-mean Gaussian white noise assumed to be added to the input."
    },
    {
      "name" : "Normalize",
      "type" : "bool",
      "default" : "false",
      "doc" : "",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Normalize the output image by the sum of the kernel components\n",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    },
    {
      "name" : "BoundaryCondition",
      "enum" : [
        "ZERO_PAD",
        "ZERO_FLUX_NEUMANN_PAD",
        "PERIODIC_PAD"
      ],
      "default" : "itk::simple::WienerDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
      "custom_itk_cast" : "std::unique_ptr< ImageBoundaryCondition< InputImageType > > bc( CreateNewBoundaryConditionInstance< Self, FilterType >( m_BoundaryCondition ) ); filter->SetBoundaryCondition( bc.get() );\n"
    },
    {
      "name" : "OutputRegionMode",
      "enum" : [
        "SAME",
        "VALID"
      ],
      "default" : "itk::simple::WienerDeconvolutionImageFilter::SAME",
      "itk_type" : "typename FilterType::OutputRegionModeEnum"
    }
  ],
  "tests" : [
    {
      "tag" : "defaults",
      "description" : "Wiener deconvolution of image blurred with a Gaussian kernel",
      "settings" : [
        {
          "parameter" : "Normalize",
          "value" : "true",
          "python_value" : "True",
          "R_value" : "TRUE"
        }
      ],
      "tolerance" : "0.0001",
      "inputs" : [
        "Input/DeconvolutionInput.nrrd",
        "Input/DeconvolutionKernel.nrrd"
      ]
    }
  ],
  "briefdescription" : "The Wiener deconvolution image filter is designed to restore an image convolved with a blurring kernel while keeping noise enhancement to a minimum.",
  "detaileddescription" : "The Wiener filter aims to minimize noise enhancement induced by frequencies with low signal-to-noise ratio. The Wiener filter kernel is defined in the frequency domain as \\f$W(\\omega) = H^*(\\omega) / (|H(\\omega)|^2 + (1 / SNR(\\omega)))\\f$ where \\f$H(\\omega)\\f$ is the Fourier transform of the blurring kernel with which the original image was convolved and the signal-to-noise ratio \\f$SNR(\\omega)\\f$ . \\f$SNR(\\omega)\\f$ is defined by \\f$P_f(\\omega) / P_n(\\omega)\\f$ where \\f$P_f(\\omega)\\f$ is the power spectral density of the uncorrupted signal and \\f$P_n(\\omega)\\f$ is the power spectral density of the noise. When applied to the input blurred image, this filter produces an estimate \\f$\\hat{f}(x)\\f$ of the true underlying signal \\f$f(x)\\f$ that minimizes the expected error between \\f$\\hat{f}(x)\\f$ and \\f$f(x)\\f$ .\n\nThis filter requires two inputs, the image to be deconvolved and the blurring kernel. These two inputs can be set using the methods SetInput() and SetKernelImage(), respectively.\n\nThe power spectral densities of the signal and noise are typically unavailable for a given problem. In particular, \\f$P_f(\\omega)\\f$ cannot be computed from \\f$f(x)\\f$ because this unknown signal is precisely the signal that this filter aims to recover. Nevertheless, it is common for the noise to have a power spectral density that is flat or decreasing significantly more slowly than the power spectral density of a typical image as the frequency \\f$\\omega\\f$ increases. Hence, \\f$P_n(\\omega)\\f$ can typically be approximated with a constant, and this filter makes this assumption (see the NoiseVariance member variable). \\f$P_f(\\omega)\\f$ , on the other hand, will vary with input. This filter computes the power spectral density of the input blurred image, subtracts the power spectral density of the noise, and uses the result as the estimate of \\f$P_f(\\omega)\\f$ .\n\nFor further information on the Wiener deconvolution filter, please see \"Digital Signal Processing\" by Kenneth R. Castleman, Prentice Hall, 1995\n\n\\author Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA de Jouy-en-Josas, France \n\n\n\\author Chris Mullins, The University of North Carolina at Chapel Hill \n\n\n\\author Cory Quammen, The University of North Carolina at Chapel Hill",
  "itk_module" : "ITKDeconvolution",
  "itk_group" : "Deconvolution",
  "in_place" : false
}
