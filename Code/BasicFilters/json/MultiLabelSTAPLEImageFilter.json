{
  "name" : "MultiLabelSTAPLEImageFilter",
  "template_code_filename" : "MultiInputImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 1,
  "pixel_types" : "UnsignedIntegerPixelIDTypeList",
  "filter_type" : "itk::MultiLabelSTAPLEImageFilter<InputImageType, OutputImageType, float>",
  "members" : [
    {
      "name" : "LabelForUndecidedPixels",
      "type" : "uint64_t",
      "default" : "std::numeric_limits<uint64_t>::max()",
      "pixeltype" : "Output",
      "custom_itk_cast" : "if (m_LabelForUndecidedPixels!=std::numeric_limits<uint64_t>::max()) filter->SetLabelForUndecidedPixels(this->m_LabelForUndecidedPixels);",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set label value for undecided pixels.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Get label value used for undecided pixels.\n\nAfter updating the filter, this function returns the actual label value used for undecided pixels in the current output. Note that this value is overwritten when SetLabelForUndecidedPixels is called and the new value only becomes effective upon the next filter update."
    },
    {
      "name" : "TerminationUpdateThreshold",
      "type" : "float",
      "default" : "1e-5f",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set termination threshold based on confusion matrix parameter updates.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set termination threshold based on confusion matrix parameter updates."
    },
    {
      "name" : "MaximumNumberOfIterations",
      "type" : "unsigned int",
      "default" : "std::numeric_limits<unsigned int>::max()",
      "custom_itk_cast" : "if (m_MaximumNumberOfIterations!=std::numeric_limits<unsigned int>::max()) filter->SetMaximumNumberOfIterations(this->m_MaximumNumberOfIterations);",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set maximum number of iterations.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set maximum number of iterations."
    },
    {
      "name" : "PriorProbabilities",
      "type" : "std::vector<float>",
      "default" : "std::vector<float>()",
      "briefdescriptionSet" : "",
      "custom_itk_cast" : "if (!m_PriorProbabilities.empty()) filter->SetPriorProbabilities(typename FilterType::PriorProbabilitiesType(&this->m_PriorProbabilities[0],this->m_PriorProbabilities.size()));",
      "detaileddescriptionSet" : "Set manual estimates for the a priori class probabilities. The size of the array must be greater than the value of the\n largest label. The index into the array corresponds to the label\n value in the segmented image for the class.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Get prior class probabilities.\n\nAfter updating the filter, this function returns the actual prior class probabilities. If these were not previously set by a call to SetPriorProbabilities, then they are estimated from the input segmentations and the result is available through this function."
    }
  ],
  "measurements" : [
    {
      "name" : "ConfusionMatrix",
      "type" : "std::vector<float>",
      "no_print" : true,
      "custom_cast" : "std::vector<float>(value.begin(), value.end())",
      "active" : true,
      "parameters" : [
        {
          "name" : "input",
          "type" : "unsigned int"
        }
      ],
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Get confusion matrix for the i-th input segmentation."
    }
  ],
  "tests" : [
    {
      "tag" : "basic",
      "description" : "Basic usage",
      "md5hash" : "77ac8604a252c5130602645a5f02cc36",
      "inputs" : [
        "Input/STAPLE1-binary.png",
        "Input/STAPLE2-binary.png"
      ]
    }
  ],
  "briefdescription" : "This filter performs a pixelwise combination of an arbitrary number of input images, where each of them represents a segmentation of the same scene (i.e., image).",
  "detaileddescription" : "The labelings in the images are weighted relative to each other based on their \"performance\" as estimated by an expectation-maximization algorithm. In the process, a ground truth segmentation is estimated, and the estimated performances of the individual segmentations are relative to this estimated ground truth.\n\nThe algorithm is based on the binary STAPLE algorithm by Warfield et al. as published originally in\n\nS. Warfield, K. Zou, W. Wells, \"Validation of image segmentation and expert\nquality with an expectation-maximization algorithm\" in MICCAI 2002: Fifth International Conference on Medical Image Computing and Computer-Assisted Intervention, Springer-Verlag, Heidelberg, Germany, 2002, pp. 298-306\n\nThe multi-label algorithm implemented here is described in detail in\n\nT. Rohlfing, D. B. Russakoff, and C. R. Maurer, Jr., \"Performance-based classifier combination in atlas-based image segmentation using expectation-maximization parameter estimation,\" IEEE Transactions on Medical Imaging, vol. 23, pp. 983-994, Aug. 2004.\n\n\\par INPUTS\nAll input volumes to this filter must be segmentations of an image, that is, they must have discrete pixel values where each value represents a different segmented object.\n\nInput volumes must all contain the same size RequestedRegions. Not all input images must contain all possible labels, but all label values must have the same meaning in all images.\n\nThe filter can optionally be provided with estimates for the a priori class probabilities through the SetPriorProbabilities function. If no estimate is provided, one is automatically generated by analyzing the relative frequencies of the labels in the input images.\n\n\\par OUTPUTS\nThe filter produces a single output volume. Each output pixel contains the label that has the highest probability of being the correct label, based on the performance models of the individual segmentations. If the maximum probaility is not unique, i.e., if more than one label have a maximum probability, then an \"undecided\" label is assigned to that output pixel.\n\nBy default, the label used for undecided pixels is the maximum label value used in the input images plus one. Since it is possible for an image with 8 bit pixel values to use all 256 possible label values, it is permissible to combine 8 bit (i.e., byte) images into a 16 bit (i.e., short) output image.\n\nIn addition to the combined image, the estimated confusion matrices for each of the input segmentations can be obtained through the GetConfusionMatrix member function.\n\n\\par PARAMETERS\nThe label used for \"undecided\" labels can be set using SetLabelForUndecidedPixels. This functionality can be unset by calling UnsetLabelForUndecidedPixels.\n\nA termination threshold for the EM iteration can be defined by calling SetTerminationUpdateThreshold. The iteration terminates once no single parameter of any confusion matrix changes by less than this threshold. Alternatively, a maximum number of iterations can be specified by calling SetMaximumNumberOfIterations. The algorithm may still terminate after a smaller number of iterations if the termination threshold criterion is satisfied.\n\n\\par EVENTS\nThis filter invokes IterationEvent() at each iteration of the E-M algorithm. Setting the AbortGenerateData() flag will cause the algorithm to halt after the current iteration and produce results just as if it had converged. The algorithm makes no attempt to report its progress since the number of iterations needed cannot be known in advance.\n\n\\author Torsten Rohlfing, SRI International, Neuroscience Program"
}
