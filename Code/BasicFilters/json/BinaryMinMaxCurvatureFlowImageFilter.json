{
  "name" : "BinaryMinMaxCurvatureFlowImageFilter",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 1,
  "doc" : "Some global documentation",
  "pixel_types" : "RealPixelIDTypeList",
  "members" : [
    {
      "name" : "TimeStep",
      "type" : "double",
      "default" : 0.05,
      "doc" : "Time step for PDE solver"
    },
    {
      "name" : "NumberOfIterations",
      "type" : "uint32_t",
      "default" : "5u",
      "doc" : "Number of iterations to run"
    },
    {
      "name" : "StencilRadius",
      "type" : "int",
      "default" : 2
    },
    {
      "name" : "Threshold",
      "type" : "double",
      "default" : 0.0,
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/Get the threshold value.",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set/Get the threshold value."
    }
  ],
  "tests" : [
    {
      "tag" : "defaults",
      "description" : "Simply run with default settings",
      "settings" : [],
      "tolerance" : 0.1,
      "inputs" : [
        "Input/RA-Float.nrrd"
      ]
    },
    {
      "tag" : "longer",
      "description" : "Change number of iterations and timestep",
      "settings" : [
        {
          "parameter" : "TimeStep",
          "value" : 0.1
        },
        {
          "parameter" : "NumberOfIterations",
          "cxx_value" : "10u",
          "value" : "10"
        }
      ],
      "tolerance" : 0.1,
      "inputs" : [
        "Input/RA-Float.nrrd"
      ]
    }
  ],
  "briefdescription" : "Denoise a binary image using min/max curvature flow.",
  "detaileddescription" : "BinaryMinMaxCurvatureFlowImageFilter implements a curvature driven image denosing algorithm. This filter assumes that the image is essentially binary: consisting of two classes. Iso-brightness contours in the input image are viewed as a level set. The level set is then evolved using a curvature-based speed function:\n\n \\f[ I_t = F_{\\mbox{minmax}} |\\nabla I| \\f] \n\nwhere \\f$ F_{\\mbox{minmax}} = \\min(\\kappa,0) \\f$ if \\f$ \\mbox{Avg}_{\\mbox{stencil}}(x) \\f$ is less than or equal to \\f$ T_{thresold} \\f$ and \\f$ \\max(\\kappa,0) \\f$ , otherwise. \\f$ \\kappa \\f$ is the mean curvature of the iso-brightness contour at point \\f$ x \\f$ .\n\nIn min/max curvature flow, movement is turned on or off depending on the scale of the noise one wants to remove. Switching depends on the average image value of a region of radius \\f$ R \\f$ around each point. The choice of \\f$ R \\f$ , the stencil radius, governs the scale of the noise to be removed.\n\nThe threshold value \\f$ T_{threshold} \\f$ is a user specified value which discriminates between the two pixel classes.\n\nThis filter make use of the multi-threaded finite difference solver hierarchy. Updates are computed using a BinaryMinMaxCurvatureFlowFunction object. A zero flux Neumann boundary condition is used when computing derivatives near the data boundary.\n\n\\warning This filter assumes that the input and output types have the same dimensions. This filter also requires that the output image pixels are of a real type. This filter works for any dimensional images.\n\nReference: \"Level Set Methods and Fast Marching Methods\", J.A. Sethian, Cambridge Press, Chapter 16, Second edition, 1999.\n\n\\see BinaryMinMaxCurvatureFlowFunction \n\n\\see CurvatureFlowImageFilter \n\n\\see MinMaxCurvatureFlowImageFilter"
}
