{
  "name": "ConvolutionImageFilter",
  "template_code_filename": "ImageFilter",
  "template_test_filename": "ImageFilter",
  "number_of_inputs": 0,
  "doc": "Some global documentation",
  "pixel_types": "BasicPixelIDTypeList",
  "filter_type": "itk::ConvolutionImageFilter< InputImageType, InputImageType, OutputImageType >",
  "include_files": [
    "sitkBoundaryConditions.hxx"
  ],
  "inputs": [
    {
      "name": "Image",
      "type": "Image"
    },
    {
      "name": "KernelImage",
      "type": "Image",
      "no_size_check": true
    }
  ],
  "members": [
    {
      "name": "Normalize",
      "type": "bool",
      "default": "false",
      "doc": "",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Normalize the output image by the sum of the kernel components\n",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": ""
    },
    {
      "name": "BoundaryCondition",
      "enum": [
        "ZERO_PAD",
        "ZERO_FLUX_NEUMANN_PAD",
        "PERIODIC_PAD"
      ],
      "default": "itk::simple::ConvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
      "custom_itk_cast": "std::unique_ptr< ImageBoundaryCondition< InputImageType > > bc( CreateNewBoundaryConditionInstance< Self, FilterType >( m_BoundaryCondition ) ); filter->SetBoundaryCondition( bc.get() );\n"
    },
    {
      "name": "OutputRegionMode",
      "enum": [
        "SAME",
        "VALID"
      ],
      "default": "itk::simple::ConvolutionImageFilter::SAME",
      "custom_itk_cast": "filter->SetOutputRegionMode( typename FilterType::OutputRegionModeEnum( int( this->m_OutputRegionMode ) ) );"
    }
  ],
  "tests": [
    {
      "tag": "defaults",
      "description": "Basic convolution with gaussian",
      "settings": [],
      "tolerance": 0.0001,
      "inputs": [
        "Input/cthead1-Float.mha",
        "Input/Gaussian_1.5.nrrd"
      ]
    }
  ],
  "briefdescription": "Convolve a given image with an arbitrary image kernel.",
  "detaileddescription": "This filter operates by centering the flipped kernel at each pixel in the image and computing the inner product between pixel values in the image and pixel values in the kernel. The center of the kernel is defined as \\f$ \\lfloor (2*i+s-1)/2 \\rfloor \\f$ where \\f$i\\f$ is the index and \\f$s\\f$ is the size of the largest possible region of the kernel image. For kernels with odd sizes in all dimensions, this corresponds to the center pixel. If a dimension of the kernel image has an even size, then the center index of the kernel in that dimension will be the largest integral index that is less than the continuous index of the image center.\n\nThe kernel can optionally be normalized to sum to 1 using NormalizeOn() . Normalization is off by default.\n\n\\warning This filter ignores the spacing, origin, and orientation of the kernel image and treats them as identical to those in the input image.\n\n\nThis code was contributed in the Insight Journal paper:\n\n\"Image Kernel Convolution\" by Tustison N., Gee J. https://doi.org/10.54294/e292kx \n\n\\author Nicholas J. Tustison \n\n\n\\author James C. Gee",
  "itk_module": "ITKConvolution",
  "itk_group": "Convolution",
  "in_place": false
}
