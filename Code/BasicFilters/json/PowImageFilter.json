{
  "name" : "PowImageFilter",
  "template_code_filename" : "BinaryFunctorFilter",
  "template_test_filename" : "ImageFilter",
  "constant_type" : "double",
  "number_of_inputs" : 2,
  "doc" : "Some global documentation",
  "pixel_types" : "typelist::Append<BasicPixelIDTypeList, ComplexPixelIDTypeList>::Type",
  "members" : [],
  "tests" : [
    {
      "tag" : "defaults",
      "description" : "Simply run with default settings",
      "settings" : [],
      "tolerance" : 0.001,
      "inputs" : [
        "Input/RA-Float.nrrd",
        "Input/RA-Float.nrrd"
      ]
    }
  ],
  "briefdescription" : "Computes the powers of 2 images.",
  "detaileddescription" : "This class is templated over the types of the two input images and the type of the output image. Numeric conversions (castings) are done by the C++ defaults.\n\nThe output of the pow function will be cast to the pixel type of the output image.\n\nThe total operation over one pixel will be \\code\n* output_pixel = static_cast< TOutput >( std::pow(static_cast<RealType>(A),static_cast<RealType>(B)) );\n\n* \n\n\\endcode\n\nThe pow function can be applied to two images with the following: \\code\n* SetInput1 ( image1 );\n\n* SetInput2 ( image2 );\n\n* \n\n\\endcode\n\nAdditionally, this filter can be used to raise every pixel of an image to a power of a constant by using \\code\n* SetInput1 ( image1 );\n\n* SetConstant2 ( constant );\n\n* \n\n\\endcode"
}
