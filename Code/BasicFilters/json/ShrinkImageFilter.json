{
  "name": "ShrinkImageFilter",
  "template_code_filename": "ImageFilter",
  "template_test_filename": "ImageFilter",
  "number_of_inputs": 1,
  "doc": "\todo need single method to set all dims",
  "pixel_types": "NonLabelPixelIDTypeList",
  "public_declarations": "void SetShrinkFactor( unsigned int s ) { this->m_ShrinkFactors = std::vector<unsigned int>(3, s );  }",
  "members": [
    {
      "name": "ShrinkFactors",
      "type": "unsigned int",
      "default": "std::vector<unsigned int>(3, 1)",
      "dim_vec": true,
      "doc": "",
      "itk_type": "typename FilterType::ShrinkFactorsType",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Set the shrink factors. Values are clamped to a minimum value of 1. Default is 1 for all dimensions.",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Get the shrink factors."
    }
  ],
  "tests": [
    {
      "tag": "defaults",
      "description": "Test Shirnk with default parameters",
      "md5hash": "45a85203a8972250b0e0226b64312eef",
      "settings": [],
      "inputs": [
        "Input/VM1111Shrink-RGBFloat.nrrd"
      ]
    },
    {
      "tag": "by23",
      "description": "Test Shink by 23",
      "md5hash": "9d32115482a8d143520fff8ab423f73a",
      "settings": [
        {
          "parameter": "ShrinkFactors",
          "type": "unsigned int",
          "dim_vec": true,
          "value": [
            2,
            3
          ]
        }
      ],
      "inputs": [
        "Input/VM1111Shrink-RGB.png"
      ]
    },
    {
      "tag": "by4",
      "description": "Test Shink by 4",
      "md5hash": "06ef0d7d001245107721dee64feedf0e",
      "settings": [
        {
          "parameter": "ShrinkFactor",
          "type": "unsigned int",
          "no_get_method": true,
          "value": "4"
        }
      ],
      "inputs": [
        "Input/RA-Float.nrrd"
      ]
    }
  ],
  "briefdescription": "Reduce the size of an image by an integer factor in each dimension.",
  "detaileddescription": "ShrinkImageFilter reduces the size of an image by an integer factor in each dimension. The algorithm implemented is a simple subsample. The output image size in each dimension is given by:\n\noutputSize[j] = max( std::floor(inputSize[j]/shrinkFactor[j]), 1 );\n\nNOTE: The physical centers of the input and output will be the same. Because of this, the Origin of the output may not be the same as the Origin of the input. Since this filter produces an image which is a different resolution, origin and with different pixel spacing than its input image, it needs to override several of the methods defined in ProcessObject in order to properly manage the pipeline execution model. In particular, this filter overrides ProcessObject::GenerateInputRequestedRegion() and ProcessObject::GenerateOutputInformation() .\n\nThis filter is implemented as a multithreaded filter. It provides a DynamicThreadedGenerateData() method for its implementation.",
  "itk_module": "ITKImageGrid",
  "itk_group": "ImageGrid",
  "in_place": false
}
