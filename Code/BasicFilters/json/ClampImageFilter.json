{
  "name" : "ClampImageFilter",
  "template_code_filename" : "DualImageFilter",
  "template_test_filename" : "ImageFilter",
  "doc" : "",
  "number_of_inputs" : 1,
  "pixel_types" : "BasicPixelIDTypeList",
  "pixel_types2" : "BasicPixelIDTypeList",
  "custom_type2" : "const PixelIDValueEnum type2 = m_OutputPixelType;",
  "output_image_type" : "InputImageType2",
  "filter_type" : "itk::ClampImageFilter<InputImageType,OutputImageType>",
  "members" : [
    {
      "name" : "OutputPixelType",
      "type" : "PixelIDValueEnum",
      "default" : "itk::simple::sitkFloat32",
      "custom_itk_cast" : ""
    },
    {
      "name" : "LowerBound",
      "type" : "double",
      "default" : "-std::numeric_limits<double>::max()",
      "pixeltype" : "Output",
      "custom_itk_cast" : "typename OutputImageType::PixelType lower = itk::NumericTraits<typename OutputImageType::PixelType>::NonpositiveMin();\n  if ( lower <  this->m_LowerBound ) lower = static_cast<typename OutputImageType::PixelType>(this->m_LowerBound);",
      "briefdescriptionSet" : "",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    },
    {
      "name" : "UpperBound",
      "type" : "double",
      "default" : "std::numeric_limits<double>::max()",
      "pixeltype" : "Output",
      "custom_itk_cast" : "typename OutputImageType::PixelType upper = itk::NumericTraits<typename OutputImageType::PixelType>::max();\n  if ( upper >  this->m_UpperBound ) upper = static_cast<typename OutputImageType::PixelType>(this->m_UpperBound);\n  filter->SetBounds(lower,upper);",
      "briefdescriptionSet" : "",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : ""
    }
  ],
  "custom_methods" : [],
  "tests" : [
    {
      "tag" : "3d",
      "description" : "3D short to uint8",
      "md5hash" : "ef10c1f04b076750f91774505c5b4161",
      "settings" : [
        {
          "parameter" : "OutputPixelType",
          "value" : "itk::simple::sitkUInt8",
          "lua_value" : "SimpleITK.sitkUInt8",
          "python_value" : "SimpleITK.sitkUInt8",
          "ruby_value" : "Simpleitk::SitkUInt8",
          "java_value" : "PixelIDValueEnum.sitkUInt8",
          "tcl_value" : "$$sitkUInt8",
          "csharp_value" : "PixelIDValueEnum.sitkUInt8",
          "R_value" : "'sitkUInt8'"
        }
      ],
      "inputs" : [
        "Input/RA-Short.nrrd"
      ]
    },
    {
      "tag" : "3d_float",
      "description" : "3D float to short",
      "md5hash" : "22cdc0af7d51934a744b9c4fd4748cd1",
      "settings" : [
        {
          "parameter" : "OutputPixelType",
          "value" : "itk::simple::sitkInt16",
          "lua_value" : "SimpleITK.sitkInt16",
          "python_value" : "SimpleITK.sitkInt16",
          "ruby_value" : "Simpleitk::SitkInt16",
          "java_value" : "PixelIDValueEnum.sitkInt16",
          "tcl_value" : "$$sitkInt16",
          "csharp_value" : "PixelIDValueEnum.sitkInt16",
          "R_value" : "'sitkInt16'"
        }
      ],
      "inputs" : [
        "Input/RA-Slice-Float.nrrd"
      ]
    },
    {
      "tag" : "double",
      "description" : "ramp to clampe double",
      "tolerance" : 1e-06,
      "settings" : [
        {
          "parameter" : "OutputPixelType",
          "value" : "itk::simple::sitkFloat64",
          "lua_value" : "SimpleITK.sitkFloat64",
          "python_value" : "SimpleITK.sitkFloat64",
          "ruby_value" : "Simpleitk::SitkFloat64",
          "java_value" : "PixelIDValueEnum.sitkFloat64",
          "tcl_value" : "$$sitkFloat64",
          "csharp_value" : "PixelIDValueEnum.sitkFloat64",
          "R_value" : "'sitkFloat64'"
        },
        {
          "parameter" : "LowerBound",
          "value" : 0.25
        },
        {
          "parameter" : "UpperBound",
          "value" : 0.75
        }
      ],
      "inputs" : [
        "Input/Ramp-One-Zero-Float.nrrd"
      ]
    }
  ],
  "briefdescription" : "Casts input pixels to output pixel type and clamps the output pixel values to a specified range.",
  "detaileddescription" : "Default range corresponds to the range supported by the pixel type of the output image.\n\nThis filter is templated over the input image type and the output image type.\n\n\\author Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA de Jouy-en-Josas, France.\n\n\\see UnaryFunctorImageFilter \n\n\\see CastImageFilter \n\n\\par Wiki Examples:\n\n\\li All Examples \n\n\\li Cast an image from one type to another but clamp to the output value range"
}
