{
  "name": "MaskImageFilter",
  "template_code_filename": "DualImageFilter",
  "template_test_filename": "ImageFilter",
  "number_of_inputs": 0,
  "doc": "Some global documentation\n",
  "include_files": [
    "sitkToPixelType.hxx",
    "sitkNotEqualImageFilter.h"
  ],
  "pixel_types": "NonLabelPixelIDTypeList",
  "pixel_types2": "MaskedPixelIDTypeList",
  "custom_type2": "PixelIDValueEnum type2 = maskImage.GetPixelID();\n  if (!this->m_DualMemberFactory->HasMemberFunction( type1, type2, dimension ) && TypeListHasPixelIDValue<IntegerPixelIDTypeList>(type2)) { type2 = sitkUInt8; }",
  "inputs": [
    {
      "name": "Image",
      "type": "Image"
    },
    {
      "name": "MaskImage",
      "type": "Image",
      "custom_itk_cast": "auto maskingValue = this->m_MaskingValue;\n  typename FilterType::MaskImageType::ConstPointer image2;\n  if (inMaskImage->GetPixelID() != sitkUInt8) {\n   sitkWarningMacro( \"Support for pixel type \" << GetPixelIDValueAsString(inMaskImage->GetPixelID()) << \" for the MaskImage input has been deprecated and will be removed in future versions. Implicitly casting input to support \\'sitkUInt8\\' type. \" );   Image temp = NotEqual(*inMaskImage, this->m_MaskingValue);image2 = this->CastImageToITK<typename FilterType::MaskImageType>( temp );\n  } else {\n   image2 = this->CastImageToITK<typename FilterType::MaskImageType>( *inMaskImage );\n}\n  filter->SetMaskImage( image2 );"
    }
  ],
  "members": [
    {
      "name": "OutsideValue",
      "type": "double",
      "default": 0,
      "custom_itk_cast": "typename OutputImageType::PixelType v;  NumericTraits<typename OutputImageType::PixelType>::SetLength( v, image1->GetNumberOfComponentsPerPixel() );  ToPixelType( this->m_OutsideValue, v );  filter->SetOutsideValue( v );",
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Method to explicitly set the outside value of the mask. Defaults to 0",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": ""
    },
    {
      "name": "MaskingValue",
      "type": "double",
      "default": 0,
      "briefdescriptionSet": "",
      "detaileddescriptionSet": "Method to explicitly set the masking value of the mask. Defaults to 0",
      "briefdescriptionGet": "",
      "detaileddescriptionGet": "Method to get the masking value of the mask.",
      "custom_itk_cast": "filter->SetMaskingValue(maskingValue);"
    }
  ],
  "tests": [
    {
      "tag": "2d",
      "description": "2d",
      "settings": [],
      "md5hash": "c57d7fda3e42374881c3c3181d15bf90",
      "inputs": [
        "Input/STAPLE1.png",
        "Input/STAPLE2.png"
      ]
    },
    {
      "tag": "cthead1",
      "description": "cthead with different types",
      "settings": [],
      "md5hash": "0ef8943803bb4a21b2015b53f0164f1c",
      "inputs": [
        "Input/cthead1-Float.mha",
        "Input/cthead1-mask.png"
      ]
    },
    {
      "tag": "rgb",
      "description": "rgb",
      "settings": [
        {
          "parameter": "OutsideValue",
          "type": "double",
          "value": "10.0"
        }
      ],
      "md5hash": "3dad4a416a7b6a198a4a916d65d7654f",
      "inputs": [
        "Input/VM1111Shrink-RGB.png",
        "Input/VM1111Shrink-mask.png"
      ]
    },
    {
      "tag": "cthead1_maskvalue",
      "description": "cthead with mask value",
      "settings": [
        {
          "parameter": "MaskingValue",
          "type": "double",
          "value": "100.0"
        }
      ],
      "md5hash": "3eb703113d03f38e7b8db4b180079a39",
      "inputs": [
        "Input/cthead1.png",
        "Input/2th_cthead1.mha"
      ]
    }
  ],
  "briefdescription": "Mask an image with a mask.",
  "detaileddescription": "This class is templated over the types of the input image type, the mask image type and the type of the output image. Numeric conversions (castings) are done by the C++ defaults.\n\nThe pixel type of the input 2 image must have a valid definition of the operator != with zero. This condition is required because internally this filter will perform the operation\n\n\\code\nif pixel_from_mask_image != masking_value\n\n pixel_output_image = pixel_input_image\n\nelse\n\n pixel_output_image = outside_value\n\n\\endcode\n\n\nThe pixel from the input 1 is cast to the pixel type of the output image.\n\nNote that the input and the mask images must be of the same size.\n\n\\warning Any pixel value other than masking value (0 by default) will not be masked out.\n\n\n\\see MaskNegatedImageFilter",
  "itk_module": "ITKImageIntensity",
  "itk_group": "ImageIntensity",
  "in_place": true
}
