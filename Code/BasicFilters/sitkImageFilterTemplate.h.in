#ifndef __sitk${name}ImageFilter_h
#define __sitk${name}ImageFilter_h

#include <memory>

#include "sitkDualImageFilter.h"
$(if include_files and #include_files > 0 then
OUT = [[// Additional include files
$(for i=1,#include_files do OUT = OUT .. '#include "' .. include_files[i] .. '"' if i < #include_files then OUT = OUT .. '\n' end end)
// Done with additional include files]]
end)



namespace itk {
  namespace simple {

    /**
     * ${doc}
     */
    class ${name}ImageFilter : public $(if number_of_inputs == 2 then OUT=[[DualImageFilter]] else OUT=[[ImageFilter]] end) {
    public:
      typedef ${name}ImageFilter Self;

      /**
       * Default Constructor that takes no arguments and initializes
       * default parameters
       */
      ${name}ImageFilter();

      /** Custom public declarations */
      $(if public_declarations then OUT=[[${public_declarations}]] end)

      typedef ${pixel_types}  PixelIDTypeList;


      $(foreach members 
      $(if (not no_set_method) or (no_set_method == 0) then
      OUT = '/** Set ${name} */\
      Self& Set${name} ( ${type} t ) { this->m_${name} = t; return *this; };'
      end)
      $(if (not no_get_method) or (no_get_method == 0) then
      OUT = '/** Get ${name} */\
      ${type} Get${name}() { return this->m_${name}; };'
      end)
      )
      // Print ourselves out
      std::string ToString() const;

      Image::Pointer Execute ( Image::Pointer $(if number_of_inputs == 2 then OUT=[[, Image::Pointer]] end) );
      $(if members and #members > 0 then
        OUT=[[Image::Pointer Execute ( Image::Pointer $(if number_of_inputs == 2 then OUT=', Image::Pointer' end) $(foreach members ,${type} in${name} ) );]]
      end)

      $(if custom_methods then
      OUT = [[

      //
      // Convenience Methods
      //

      $(foreach custom_methods
/** ${doc} */
      ${return_type} ${name}( $(foreach parameters ${type} ${var_name}$(if last == 0 then OUT=',' end) ))
        {
        ${body}
        };
      )
      ]]
      end)

    private:

      $(if number_of_inputs == 2 then
        OUT=[[
              typedef Image::Pointer (Self::*MemberFunctionType)( Image::Pointer, Image::Pointer );
              template <class TImageType> Image::Pointer ExecuteInternal ( Image::Pointer image1, Image::Pointer image2 );
              friend struct detail::MemberFunctionAddressor<MemberFunctionType>;
              std::auto_ptr<detail::MemberFunctionFactory<MemberFunctionType> > m_MemberFactory;
              ]]
          else
            OUT=[[
              typedef Image::Pointer (Self::*MemberFunctionType)( Image::Pointer );
              template <class TImageType> Image::Pointer ExecuteInternal ( Image::Pointer image );
              friend struct detail::MemberFunctionAddressor<MemberFunctionType>;
              std::auto_ptr<detail::MemberFunctionFactory<MemberFunctionType> > m_MemberFactory;
                  ]]
              end)
      $(foreach members 
      /* ${doc} */
      ${type} m_${name};
      )

    };

    Image::Pointer ${name} ( Image::Pointer $(if number_of_inputs == 2 then OUT=', Image::Pointer' end) $(when members $(foreach members ,$(if full_type then OUT=[[${full_type}]] else OUT=[[${type}]] end) in${name} = ${default}) ) );

  }
}
#endif
