#include "itkImage.h"
#include "itkVectorImage.h"
#include "itkLabelMap.h"
#include "itkLabelObject.h"
#include "itkNumericTraits.h"
#include "itkNumericTraitsVariableLengthVectorPixel.h"

#include "sitk${name}ImageFilter.h"
#include "itk${name}ImageFilter.h"

#include "itkNthElementImageAdaptor.h"
#include "itkCastImageFilter.h"
#include "itkImageToVectorImageFilter.h"
#include "itkVectorImageToImageAdaptor.h"

#include "itkFlatStructuringElement.h"

namespace itk {
namespace simple {

//-----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
${name}ImageFilter::${name}ImageFilter ()
{
  this->m_BVectorRadius = false;
  this->m_KernelRadius = 1;
  this->m_KernelType = Ball;
$(foreach members
$(if default then
OUT = [[
  this->m_${name} = ${default};]] end)
)
  this->m_MemberFactory.reset( new detail::MemberFunctionFactory<MemberFunctionType>( this ) );

  // Define the pixels types supported by this filter
  typedef ${pixel_types}  PixelIDTypeList;

  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 3 > ();
  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 2 > ();

//  typedef typename typelist::MakeTypeList< VectorPixelID<uint8_t> >::Type VTL;
//  this->m_MemberFactory->RegisterMemberFunctions< VTL, 2, VectorAddressor<MemberFunctionType> > ();

}

//
// ToString
//
std::string ${name}ImageFilter::ToString() const
{
  std::ostringstream out;
  out << "itk::simple::${name}ImageFilter\n";
  out << "  KernelRadius: " << this->m_KernelRadius << std::endl;
  out << "  KernelType: ";
  switch ( this->m_KernelType )
    {
    case Self::Annulus:
      std::cout << "Annulus";
      break;
    case Self::Ball:
      std::cout << "Ball";
      break;
    case Self::Box:
      std::cout << "Box";
      break;
    case Self::Cross:
      std::cout << "Cross";
      break;
    default:
      sitkExceptionMacro( "LogicError: invalid Kernel type" );
    }
  std::cout << std::endl;

$(foreach members
$(if dim_vec and dim_vec == 1 then
OUT = '  out << "  ${name}: ";\
  printStdVector(this->m_${name}, out);\
  out << std::endl;'
elseif (not no_print) or (not no_print == 1) then
OUT = '  out << "  ${name}: " << this->m_${name} << std::endl;'
end)
)
  return out.str();
}

//
// Set/Get Member Properties
//

${name}ImageFilter::Self& ${name}ImageFilter::SetKernelRadius(uint32_t r)
{
  this->m_BVectorRadius = false;
  this->m_KernelRadius = r;
  return *this;
}
${name}ImageFilter::Self& ${name}ImageFilter::SetKernelRadius(const std::vector<uint32_t>  &r )
{
  this->m_BVectorRadius = true;
  this->m_VectorKernelRadius = r;
  return *this;
}
std::vector<uint32_t> ${name}ImageFilter::GetKernelRadius() const
{

  if ( !this->m_BVectorRadius )
    {
    // copy scalar radius to std vector
    return std::vector<uint32_t>( 1, this->m_KernelRadius);
    }
  return this->m_VectorKernelRadius;
}
${name}ImageFilter::Self& ${name}ImageFilter::SetKernelType(KernelType t)
{
  this->m_KernelType = t;
  return *this;
}
${name}ImageFilter::KernelType ${name}ImageFilter::GetKernelType() const
{
  return this->m_KernelType;
}

//$(if members and #members > 0 then
OUT = [[

Image* ${name}ImageFilter::Execute ( Image* image1$(if number_of_inputs==2 then OUT=', Image* image2' end)$(foreach members ,
  ${type} in${name}) )
{
$(foreach members
$(if (not no_set_method) or (no_set_method == 0) then
OUT = '  this->Set${name} ( in${name} );'
end)
)
  return this->Execute ( image1 $(if number_of_inputs==2 then OUT=', image2' end) );
}
]]
end)
Image* ${name}ImageFilter::Execute ( Image* image1$(if number_of_inputs==2 then OUT=[[, Image* image2]] end) )
{

  PixelIDValueType type = image1->GetPixelIDValue();
  unsigned int dimension = image1->GetDimension();$(if number_of_inputs and number_of_inputs == 2 then
OUT=[[


  // todo need better error handling and potential type conversion
  if ( type != image2->GetPixelIDValue() ||
       dimension != image2->GetDimension() ||
       image1->GetWidth() != image2->GetWidth() ||
       image1->GetHeight() != image2->GetHeight() ||
       image1->GetDepth() != image2->GetDepth() )
    {
      sitkExceptionMacro ( "Both images for ${name}ImageFilter don't match type or dimension!" );
    }]] end)

  return this->m_MemberFactory->GetMemberFunction( type, dimension )( image1 $(if number_of_inputs==2 then OUT=[[, image2]] end) );
}


//----------------------------------------------------------------------------

//
// ExecuteInternal
//
template <class TImageType>
Image* ${name}ImageFilter::ExecuteInternal ( Image* inImage1 $(if number_of_inputs==2 then OUT=[[, Image* inImage2]] end) )
{
  // Define the input and output image types
  typedef TImageType     InputImageType;
  $(if output_pixel_type then
  OUT=[[// Define output image type
  typedef itk::Image< ${output_pixel_type}, InputImageType::ImageDimension > OutputImageType;]]
  elseif real_type_output==1 then
  OUT=[[// Real output type
  typedef itk::Image< typename itk::NumericTraits< typename InputImageType::PixelType >::RealType,
    InputImageType::ImageDimension > OutputImageType;]]
  else
  OUT=[[typedef InputImageType OutputImageType;]]
  end)

  // Get the a pointer to the ITK image contained in image1
  typename InputImageType::Pointer image1 =
    dynamic_cast <InputImageType*> ( inImage1->GetImageBase().GetPointer() );

  // Check that ITK image pointer was properly retrieved
  if ( image1.IsNull() )
    {
    sitkExceptionMacro( "Unexpected template dispatch error!" );
    }$(if number_of_inputs == 2 then
OUT=[[


  // Get the a pointer to the ITK image contained in image2
  typename InputImageType::Pointer image2 =
  dynamic_cast <InputImageType*> ( inImage2->GetImageBase().GetPointer() );

  // Check that ITK image pointer was properly retrieved
  if ( image2.IsNull() )
    {
    sitkExceptionMacro( "Unexpected template dispatch error!" );
    }]]
end)

  // Use correct kernel types
  typedef itk::FlatStructuringElement< InputImageType::ImageDimension > ITKKernelType;
  typedef itk::${name}ImageFilter<InputImageType,$(if number_of_inputs == 2 then OUT=[[ InputImageType,]] end)$(if additional_template_types then OUT=[[ $(foreach additional_template_types ${type},)]]end)$(if not no_output_type then OUT=[[ OutputImageType,]] end) ITKKernelType> FilterType;

  ITKKernelType kernel;
  typename ITKKernelType::SizeType radius;

  // set the radius via vector or scalar
  if ( this->m_BVectorRadius )
    {
    for ( unsigned int i = 0; i < InputImageType::ImageDimension; ++i )
      {
      if ( i < this->m_VectorKernelRadius.size() )
        {
        radius[i] = this->m_VectorKernelRadius[i];
        }
      else
        {
        radius[i] = 1;
        }
      }
    }
  else
    {
    radius.Fill( this->m_KernelRadius );
    }
  switch (m_KernelType)
    {
    case Annulus:
      kernel = ITKKernelType::Annulus( radius, 1, false );
      break;
    case Ball:
      kernel = ITKKernelType::Ball( radius );
      break;
    case Box:
      kernel = ITKKernelType::Box( radius );
      break;
    case Cross:
      kernel = ITKKernelType::Cross( radius );
      break;
    default:
      sitkExceptionMacro( "Logic Error: Unknown Kernel Type" );
    }

  typename FilterType::Pointer filter = FilterType::New();

$(if number_of_inputs == 2 then
OUT=[[
  filter->SetInput1( image1 );
  filter->SetInput2( image2 );
]]
else
OUT=[[
  filter->SetInput( image1 );
]]
end)$(foreach members
  $(if custom_itk_cast then
    OUT = '${custom_itk_cast}'
  elseif dim_vec and dim_vec == 1 then
    OUT = [[${itk_type} itkVec${name};
    for (unsigned int i = 0; i < inImage1->GetDimension(); ++i)
      {
      itkVec${name}[i] = this->Get${name}()[i];
      }
    filter->Set${name}( itkVec${name} );]]
    elseif(not no_set_method) or (no_set_method == 0) then
    OUT = 'filter->Set${name} ( this->m_${name} );'
    end)
)
  filter->SetKernel( kernel );
  filter->Update();
  Image* out = new Image( filter->GetOutput() );
  return out;

}


//
// ExecuteInternalVectorImage
//
template <class TImageType>
Image* ${name}ImageFilter::ExecuteInternalVectorImage ( Image* inImage1 $(if number_of_inputs==2 then OUT=[[, Image* inImage2]] end) )
{
  // Define the input and output image types
  typedef TImageType     InputImageType;

  typedef itk::Image< typename InputImageType::InternalPixelType, InputImageType::ImageDimension > ComponentImageType;


  // Get the a pointer to the ITK image contained in image1
  typename InputImageType::Pointer image1 =
    dynamic_cast <InputImageType*> ( inImage1->GetImageBase().GetPointer() );

  // Check that ITK image pointer was properly retrieved
  if ( image1.IsNull() )
    {
    sitkExceptionMacro( "Unexpected template dispatch error!" );
    }$(if number_of_inputs == 2 then
OUT=[[


  // Get the a pointer to the ITK image contained in image2
  typename InputImageType::Pointer image2 =
  dynamic_cast <InputImageType*> ( inImage2->GetImageBase().GetPointer() );

  // Check that ITK image pointer was properly retrieved
  if ( image2.IsNull() )
    {
    sitkExceptionMacro( "Unexpected template dispatch error!" );
    }]]
end)

  //
  // THE FOLLOWING LINES NEEDS WORK
  //
  typedef itk::VectorImageToImageAdaptor< typename InputImageType::InternalPixelType,  InputImageType::ImageDimension> ComponentAdaptorType;
  typename ComponentAdaptorType::Pointer nthAdaptor = ComponentAdaptorType::New();
  nthAdaptor->SetImage( image1 );
  nthAdaptor->SetExtractComponentIndex( 0 );

  typedef itk::CastImageFilter< ComponentAdaptorType, ComponentImageType > CastFilterType;
  typename CastFilterType::Pointer caster = CastFilterType::New();
//  caster->SetInput( nthAdaptor );
  caster->Update();

  std::auto_ptr<Image> componentImage(new Image( caster->GetOutput() ) );

  componentImage.reset( this->ExecuteInternal<ComponentImageType>( componentImage.get() ) );


  typedef itk::ImageToVectorImageFilter<ComponentImageType> ToVectorImageType;
  typename ToVectorImageType::Pointer toVector = ToVectorImageType::New();
  toVector->SetNthInput(0, dynamic_cast <ComponentImageType*>(componentImage->GetImageBase().GetPointer()) );

  toVector->Update();
  Image* out = new Image( toVector->GetOutput() );
  return out;

}


//-----------------------------------------------------------------------------

//
// Function to run the Execute method of this filter
//
Image* ${name} ( Image* imageA$(if number_of_inputs == 2 then OUT=', Image* imageB' end),
                 uint32_t inRadius,  ${name}ImageFilter::KernelType inKernel
                 $(when members $(foreach members , ${type} in${name})) )
{
  ${name}ImageFilter filter;
  return filter.SetKernelRadius( inRadius ).SetKernelType( inKernel ).Execute ( imageA$(if number_of_inputs == 2 then OUT=', imageB' end)$(when members $(foreach members , in${name})) );
}


//
// Function to run the Execute method of this filter
//
Image* ${name} ( Image* imageA$(if number_of_inputs == 2 then OUT=', Image* imageB' end),
                 std::vector<uint32_t> inVectorRadius,  ${name}ImageFilter::KernelType inKernel
                 $(when members $(foreach members , ${type} in${name})) )
{
  ${name}ImageFilter filter;
  return filter.SetKernelRadius( inVectorRadius ).SetKernelType( inKernel ).Execute ( imageA$(if number_of_inputs == 2 then OUT=', imageB' end)$(when members $(foreach members , in${name})) );
}

} // end namespace simple
} // end namespace itk
