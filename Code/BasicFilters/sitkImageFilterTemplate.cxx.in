#include "sitk${name}ImageFilter.h"
#include "itk${name}ImageFilter.h"

namespace itk {
namespace simple {

//----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
${name}ImageFilter::${name}ImageFilter ()
  {

  $(foreach members 
  m_${name} = ${default};
  )

  this->m_MemberFactory.reset( new detail::MemberFunctionFactory<MemberFunctionType>( this ) );

  this->m_MemberFactory->RegisterMemberFunctions< PixelTypeList, 3 > ();
  this->m_MemberFactory->RegisterMemberFunctions< PixelTypeList, 2 > ();
  }

//
// ToString
//
std::string ${name}ImageFilter::ToString() const
  {
  std::ostringstream out;
  out << "itk::simple::${name}ImageFilter\n";

  $(foreach members 
    out << "\t${name}: " << this->m_${name} << "\n";
  )

  return out.str();
  }
//
// Execute
//

$(if #members > 0 then
OUT=[[
Image::Pointer ${name}ImageFilter::Execute ( Image::Pointer image1 $(foreach members ,${type} in${name} ) )
  {

    $(foreach members 
      this->Set${name} ( in${name} );
      )
      return this->Execute ( image1 );
  }
]]
  end)

Image::Pointer ${name}ImageFilter::Execute ( Image::Pointer image1 )
  {
    ImageDataType type = image1->GetDataType();
    unsigned int dimension = image1->GetDimension();

    return this->m_MemberFactory->GetMemberFunction( type, dimension )( image1 );
  }

//----------------------------------------------------------------------------

//
// ExecuteInternal
//
template <class TImageType>
Image::Pointer ${name}ImageFilter::ExecuteInternal ( Image::Pointer inImage1 )
  {
  typedef TImageType     InputImageType;
  typedef InputImageType OutputImageType;

  typename InputImageType::Pointer image1 =
    dynamic_cast <InputImageType*> ( inImage1->GetImageBase().GetPointer() );

  if ( image1.IsNull() ) {
    // Take some action
    return NULL;
  }

  typedef itk::${name}ImageFilter<InputImageType, OutputImageType> FilterType;

  typename FilterType::Pointer filter = FilterType::New();
  filter->SetInput( image1 );

  $(foreach members 
    filter->Set${name} ( this->m_${name} );
  )
  filter->Update();

  Image::Pointer out = new Image( filter->GetOutput() );

  return out;
  }

} // end namespace simple
} // end namespace itk
