#include "sitkImage.txx"
#include "sitk${name}ImageFilter.h"
#include "itk${name}ImageFilter.h"


namespace itk {
namespace simple {

//----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
${name}ImageFilter::${name}ImageFilter ()
  {

  // Set basic member defaults
$(foreach members $(if default then OUT = '  m_${name} = ${default};\
' end))
  // Set up member function factory
  this->m_MemberFactory.reset( new detail::MemberFunctionFactory<MemberFunctionType>( this ) );

  // Register pixel types for 2D and 3D
  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 3 > ();
  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 2 > ();
  }

//
// ToString
//
std::string ${name}ImageFilter::ToString() const
  {
  std::ostringstream out;
  out << "itk::simple::${name}ImageFilter\n";

  // Print out basic members
$(foreach members
  $(if dim_vec and dim_vec == 1 then
    OUT = [[out << "\t${name}: ";
    printStdVector(this->m_${name}, out);
    out << std::endl;]]
  elseif (not no_print) or (not no_print == 1) then
    OUT = 'out << "\t${name}: " << this->m_${name} << std::endl;'
    end)
)

  // Print out SeedList
  out << "SeedList:" << std::endl;
  for (unsigned int i = 0; i < this->m_SeedList.size(); ++i)
    {
    out << "  ";
    printStdVector(this->m_SeedList[i], out);
    out << std::endl;
    }

  return out.str();
  }

//
// Execute
//
Image::Pointer ${name}ImageFilter::Execute (Image::Pointer image$(foreach members ,
  ${type} in${name}),
  std::vector< std::vector<unsigned int> > inSeedList )
  {
  // Set members
$(foreach members $(if (not no_set_method) or (no_set_method == 0) then
OUT = '  this->Set${name} ( in${name} );\
'
  end))
  // Set SeedList
  this->SetSeedList ( inSeedList );

  // Run the filter
  return this->Execute ( image  );
  }


Image::Pointer ${name}ImageFilter::Execute ( Image::Pointer image )
  {
  // Get information about imate type
  PixelIDValueType type = image->GetPixelIDValue();
  unsigned int dimension = image->GetDimension();

  // Run the apropriate internal execution member function
  return this->m_MemberFactory->GetMemberFunction( type, dimension )( image );
  }

//----------------------------------------------------------------------------

//
// ExecuteInternal
//
template <class TImageType>
Image::Pointer ${name}ImageFilter::ExecuteInternal ( Image::Pointer inImage )
  {
  // Define image types
  typedef TImageType     InputImageType;
  typedef InputImageType OutputImageType;

  // Get a pointer to the input itk image with the proper type
  typename InputImageType::Pointer image =
    dynamic_cast <InputImageType*> ( inImage->GetImageBase().GetPointer() );

  // Check to make sure cast worked
  if ( image.IsNull() )
    {
    sitkExceptionMacro( "Unexpected template dispatch error!" );
    }

  // Set up the itk version of the filter
  typedef itk::${name}ImageFilter<InputImageType , OutputImageType> FilterType;
  typename FilterType::Pointer filter = FilterType::New();

  // Set image input
  filter->SetInput( image );

  // Set basic parameters
$(foreach members
    $(if custom_itk_cast then
      OUT = '${custom_itk_cast}'
    elseif dim_vec and dim_vec == 1 then
      OUT = [[${itk_type} itkVec${name};
      for (unsigned int i = 0; i < inImage->GetDimension(); ++i)
        {
        itkVec${name}[i] = this->Get${name}()[i];
        }
      filter->Set${name}( itkVec${name} );]]
    elseif(not no_set_method) or (no_set_method == 0) then
      OUT = 'filter->Set${name} ( this->m_${name} );'
      end)
  )
  // Convert Seed List from std::vector< std::vector<unsigned int> >
  // to std::vector<itk::Index>
  filter->ClearSeeds();
  for (unsigned int i = 0; i < m_SeedList.size(); ++i)
    {
    typename InputImageType::IndexType idx;
    for (unsigned int j = 0; j < m_SeedList[i].size(); ++j)
      {
      idx[j] = (typename InputImageType::IndexType::IndexValueType)m_SeedList[i][j];
      }
    filter->AddSeed(idx);
    }

  // Run the itk filter
  filter->Update();

  // Return the sitk version of the result
  Image::Pointer out = new Image( filter->GetOutput() );
  return out;
  }

  // Create a function to run the Execute method of this filter
  Image::Pointer ${name} ( Image::Pointer imageA$(if number_of_inputs == 2 then OUT=', Image::Pointer imageB' end) $(when members $(foreach members ,$(if full_type then OUT=[[${full_type}]] else OUT=[[${type}]] end) in${name} ) ), std::vector< std::vector<unsigned int> > inSeedList ) {
    ${name}ImageFilter filter;
    $(when members
      $(foreach members
        filter.Set${name} ( in${name} );
        )
      )
      return filter.Execute ( imageA$(if number_of_inputs == 2 then OUT=', imageB' end)$(when members $(foreach members , in${name} ) ), inSeedList );
  }

} // end namespace simple
} // end namespace itk
