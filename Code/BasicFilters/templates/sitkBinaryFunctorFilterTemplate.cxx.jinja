
/*=========================================================================*/
/*
 *  Copyright NumFOCUS
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/

/*
 * WARNING: DO NOT EDIT THIS FILE!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
 * Please look at sitkBinaryFunctorFilterTemplate.cxx.jinja to make changes.
 */
{% import "macros.jinja" as macros %}
{% include "StandardIncludes.cxx.jinja" %}
{% include "AddExtraIncludes.cxx.jinja" %}
#include "sitkToPixelType.hxx"

namespace itk::simple {

//-----------------------------------------------------------------------------

// Default constructor that initializes parameters
{% include "ConstructorSignature.cxx.jinja" %}
{
  {% include "ConstructorMemberFunctionSetup.cxx.jinja" %}
  {% include "ConstructorVectorPixels.cxx.jinja" %}

  this->m_MemberFactory1.reset( new detail::MemberFunctionFactory<MemberFunction1Type>( this ) );
  this->m_MemberFactory1->RegisterMemberFunctions< PixelIDTypeList, 3 >();
  this->m_MemberFactory1->RegisterMemberFunctions< PixelIDTypeList, 2 >();

  this->m_MemberFactory2.reset( new detail::MemberFunctionFactory<MemberFunction2Type>( this ) );
  this->m_MemberFactory2->RegisterMemberFunctions< PixelIDTypeList, 3 >();
  this->m_MemberFactory2->RegisterMemberFunctions< PixelIDTypeList, 2 >();
}

{% include "DestructorDefinition.cxx.jinja" %}

{% include "CustomMethods.cxx.jinja" %}

// ToString
{% include "ToStringSignature.cxx.jinja" %}
{
{% include "ToStringBody.cxx.jinja" %}
{% include "ToStringReturn.cxx.jinja" %}
}

//
// Execute
//
{%- if members|length > 0 %}
Image {{ name }}::Execute ( const Image& image1, {{ constant_type }} constant{{ macros.member_parameters(members, number_of_inputs, name, inputs) }} )
{
  {% for member in members %}
    {%- if not member.no_set_method %}
      this->Set{{ member.name }} ( {{ member.name[0]|lower ~ member.name[1:] }} );
    {%- endif %}
  {% endfor %}
  return this->Execute ( image1, constant );
}

Image {{ name }}::Execute ( {{ constant_type }} constant, const Image& image2{{ macros.member_parameters(members, number_of_inputs, name, inputs) }} )
{
  {% for member in members %}
    {%- if not member.no_set_method %}
      this->Set{{ member.name }} ( {{ member.name[0]|lower ~ member.name[1:] }} );
    {%- endif %}
  {% endfor %}
  return this->Execute ( constant, image2 );
}
{% endif %}

{% include "ExecuteNoParameters.cxx.jinja" %}

Image {{ name }}::Execute ( {{ constant_type }} constant, const Image& image2 )
{
  PixelIDValueEnum type = image2.GetPixelID();
  unsigned int dimension = image2.GetDimension();
  return this->m_MemberFactory1->GetMemberFunction( type, dimension )( constant, image2 );
}

Image {{ name }}::Execute ( const Image& image1, {{ constant_type }} constant )
{
  PixelIDValueEnum type = image1.GetPixelID();
  unsigned int dimension = image1.GetDimension();
  return this->m_MemberFactory2->GetMemberFunction( type, dimension )( image1, constant );
}

Image {{ name }}::Execute ( Image&& image1, {{ constant_type }} constant )
{
  const Image temp(std::move(image1));
  auto autoResetInPlace = make_scope_exit([this]{this->m_InPlace=false;});
  if (temp.IsUnique())
    {
    m_InPlace = true;
    }
  return this->Execute( temp, constant );
}

//-----------------------------------------------------------------------------

// ExecuteInternal
{% include "ExecuteInternalSignature.cxx.jinja" %}
{
  {% include "ExecuteInternalTypedefs.cxx.jinja" %}
  {% include "ExecuteInternalGetImagePointers.cxx.jinja" %}
  {% include "ExecuteInternalITKFilter.cxx.jinja" %}
  {% include "ExecuteInternalSetITKFilterInputs.cxx.jinja" %}
  {% include "ExecuteInternalUpdateAndReturn.cxx.jinja" %}
}

template <class TImageType>
Image {{ name }}::ExecuteInternal ( {{ constant_type }} constant, const Image& inImage2 )
{
  {% include "ExecuteInternalTypedefs.cxx.jinja" %}
  // Get the pointer to the ITK image contained in image2
  typename InputImageType2::ConstPointer image2 = this->CastImageToITK<InputImageType2>( inImage2 );
  {% include "ExecuteInternalITKFilter.cxx.jinja" %}
  typename InputImageType::PixelType c;
  NumericTraits<typename InputImageType2::PixelType>::SetLength( c, image2->GetNumberOfComponentsPerPixel() );
  ToPixelType( constant, c );
  filter->SetConstant1( c );
  filter->SetInput2( image2 );
  {% include "ExecuteInternalSetITKFilterParameters.cxx.jinja" %}
  {% include "ExecuteInternalUpdateAndReturn.cxx.jinja" %}
}

template <class TImageType>
Image {{ name }}::ExecuteInternal ( const Image& inImage1, {{ constant_type }} constant )
{
  {% include "ExecuteInternalTypedefs.cxx.jinja" %}
  // Get the pointer to the ITK image contained in image1
  typename InputImageType::ConstPointer image1 = this->CastImageToITK<InputImageType>( inImage1 );
  {% include "ExecuteInternalITKFilter.cxx.jinja" %}
  typename InputImageType2::PixelType c;
  NumericTraits<typename InputImageType::PixelType>::SetLength( c, image1->GetNumberOfComponentsPerPixel() );
  ToPixelType( constant, c );
  filter->SetInput1( image1 );
  filter->SetConstant2( c );
  {% include "ExecuteInternalSetITKFilterParameters.cxx.jinja" %}
  {% include "ExecuteInternalUpdateAndReturn.cxx.jinja" %}
}

//-----------------------------------------------------------------------------

{% include "ExecuteInternalVectorImages.cxx.jinja" %}

{% if not no_procedure %}
  {%- include "ProceduralAPI.cxx.jinja" %}


Image {{ name | regex_replace('ImageFilter$', '') | regex_replace('Filter$', '') }} ( const Image& image1, {{ constant_type }} constant{{ macros.member_parameters(members, number_of_inputs, name, inputs) }} )
{
    {{ name }} filter;
    return filter.Execute ( image1, constant{% for member in members -%}
        {{ ", " ~member.name[0]|lower ~ member.name[1:] }}
    {%- endfor %} );
}

Image {{ name | regex_replace('ImageFilter$', '') | regex_replace('Filter$', '') }} ( Image&& image1, {{ constant_type }} constant{{ macros.member_parameters(members, number_of_inputs, name, inputs) }} )
{
    {{ name }} filter;
    return filter.Execute ( std::move(image1), constant{% for member in members -%}
        {{ ", " ~member.name[0]|lower ~ member.name[1:] }}
    {%- endfor %} );
}

Image {{ name | regex_replace('ImageFilter$', '') | regex_replace('Filter$', '') }} ( {{ constant_type }} constant, const Image& image2{{ macros.member_parameters(members, number_of_inputs, name, inputs) }} )
{
    {{ name }} filter;
    return filter.Execute ( constant, image2 {% for member in members -%}
        {{ ", " ~member.name[0]|lower ~ member.name[1:] }}
    {%- endfor %} );
}


{% endif %}

} // namespace itk::simple
