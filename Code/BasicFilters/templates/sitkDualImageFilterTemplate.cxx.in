/*=========================================================================
*
*  Copyright NumFOCUS
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
$(include DoNotEditWarning.cxx.in)

$(include StandardIncludes.cxx.in)
$(include AddExtraIncludes.cxx.in)

namespace itk {
namespace simple {

//-----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
$(include ConstructorSignature.cxx.in)
{

  this->m_DualMemberFactory.reset( new detail::DualMemberFunctionFactory<MemberFunctionType>( this ) );
$(if pixel_types2 then
  OUT =  [[  using PixelIDTypeList2 = ${pixel_types2};]]
end)$(if custom_register then
  OUT='  ${custom_register}'
else
OUT = [[

  this->m_DualMemberFactory->RegisterMemberFunctions< PixelIDTypeList, PixelIDTypeList2, 3 > ();
  this->m_DualMemberFactory->RegisterMemberFunctions< PixelIDTypeList, PixelIDTypeList2, 2 > ();
]]
end)

$(if vector_pixel_types_by_component then
  OUT=[[  using VectorByComponentsPixelIDTypeList = ${vector_pixel_types_by_component};
]]
  if vector_pixel_types_by_component2 then
  OUT = OUT..[[  using VectorByComponentsPixelIDTypeList2 = ${vector_pixel_types_by_component2};
]]
  else
  OUT = OUT..[[  using VectorByComponentsPixelIDTypeList2 = PixelIDTypeList2;
]]
  end
  OUT = OUT..[[
  using VectorAddressorType = detail::DualExecuteInternalVectorAddressor<MemberFunctionType>;
  this->m_DualMemberFactory->RegisterMemberFunctions< VectorByComponentsPixelIDTypeList, VectorByComponentsPixelIDTypeList2, 3, VectorAddressorType> ();
  this->m_DualMemberFactory->RegisterMemberFunctions< VectorByComponentsPixelIDTypeList, VectorByComponentsPixelIDTypeList2, 2, VectorAddressorType> ();]]
end)


}

$(include DestructorDefinition.cxx.in)

//
// ToString
//
$(include ToStringSignature.cxx.in)
{
$(include ToStringBody.cxx.in)
$(include ToStringReturn.cxx.in)
}

$(include CustomMethods.cxx.in)

//
// Execute
//
$(if no_return_image then OUT=[[void]] else OUT=[[Image]] end) ${name}::Execute ( $(include ImageParameters.in)$(include InputParameters.in) )
{
$(if true then
inputName1 = "image1"
if not (number_of_inputs >  0) and (#inputs > 0) then
  inputName1 = inputs[1].name:sub(1,1):lower() .. inputs[1].name:sub(2,-1)
end
OUT=[[
  const PixelIDValueEnum type1 = ]]..inputName1..[[.GetPixelID();
  const unsigned int dimension = ]]..inputName1..[[.GetDimension();
]]
end

local inputName2 = "image2"


for inum=2,number_of_inputs do
  OUT= OUT .. [[
  CheckImageMatchingDimension( ]] .. inputName .. [[, image]] .. inum .. [[, "image]] .. inum .. [[" );
]]
end

if inputs then
  for inum=2,#inputs do
    if inum == 2 then
      inputName2 = inputs[2].name:sub(1,1):lower() .. inputs[2].name:sub(2,-1)
    end
    if inputs[inum].type == "Image" and (not inputs[inum].optional or not no_optional) then
      local currentInputName = inputs[inum].name:sub(1,1):lower()..inputs[inum].name:sub(2,-1)
      OUT=OUT..[[
  CheckImageMatchingDimension(  ]] .. inputName1 .. [[, ]] .. currentInputName .. [[, "]] .. currentInputName .. [[" );
]]
      if not inputs[inum].no_size_check then
        OUT=OUT..[[
  CheckImageMatchingSize(  ]] .. inputName1 .. [[, ]] .. currentInputName .. [[, "]] .. currentInputName .. [[" );
]]
      end
    end
  end
end

if number_of_inputs >= 2 or (inputs and (#inputs >= 2)) then
  OUT=OUT..[[
  const PixelIDValueType type2 = ]]..inputName2..[[.GetPixelIDValue();]]
else
OUT=OUT..[[
  ${custom_type2}]]

end)

  return this->m_DualMemberFactory->GetMemberFunction( type1, type2, dimension )( $(for inum=1,number_of_inputs do
  if inum>1 then
    OUT=OUT .. ', '
  end
  OUT= OUT .. 'image' .. inum
end
if inputs then
  for inum=1,#inputs do
    if number_of_inputs>0 or inum>1 then
      OUT = OUT .. ", "
    end
    if  inputs[inum].optional and no_optional then
      OUT=OUT.."nullptr"
    else
      OUT=OUT.."&"..inputs[inum].name:sub(1,1):lower() .. inputs[inum].name:sub(2,-1)
    end
  end
end) );
}

$(if in_place then
  OUT=[[$(include ExecuteRValueReferenceNoParameters.cxx.in)]]
end)

//-----------------------------------------------------------------------------

$(include CustomCasts.cxx)

//-----------------------------------------------------------------------------

sitkClangDiagnosticPush();
sitkClangWarningIgnore("-Wunused-local-typedef");

//
// ExecuteInternal
//
template <class TImageType, class TImageType2>
$(if no_return_image then OUT=[[void]] else OUT=[[Image]] end) ${name}::DualExecuteInternal ( $(for inum=1,number_of_inputs do
  if inum>1 then
    OUT=OUT.. ', '
  end
  OUT= OUT .. 'const Image& inImage' .. inum
end
if inputs then
  for i = 1,#inputs do
    if (number_of_inputs > 0 or i > 1) then
      OUT = OUT .. ", "
    end
    OUT = OUT .. 'const ' .. inputs[i].type .. ' * in' .. inputs[i].name
  end
end ) )
{
  // Define the input and output image types
  using InputImageType = TImageType;
  using InputImageType2 = TImageType2;

  $(if output_image_type then
  OUT=[[//Define output image type
  using OutputImageType = ${output_image_type};]]
  elseif output_pixel_type then
  OUT=[[// Define output image type
  using OutputImageType =  itk::Image< ${output_pixel_type}, InputImageType::ImageDimension >;]]
  else
  OUT=[[using OutputImageType = InputImageType;]]
  end)

$(include ExecuteInternalGetImagePointers.cxx.in)

$(include ExecuteInternalITKFilter.cxx.in)

$(include ExecuteInternalSetITKFilterInputs.cxx.in)
$(include ExecuteInternalUpdateAndReturn.cxx.in)
}

$(if vector_pixel_types_by_component then
OUT=[[
//
// Dispatched methods to call DualExecuteInternal on each component of the VectorImage
//
template <class TImageType, class TImageType2> Image
${name}::DualExecuteInternalVector ( $(for inum=1,number_of_inputs do
  if inum>1 then
       OUT=OUT.. ', '
  end
OUT= OUT .. 'const Image& inImage' .. inum
end
if inputs then
  for i = 1,#inputs do
    if (number_of_inputs > 0 or i > 1) then
      OUT = OUT .. ", "
    end
    OUT = OUT .. 'const ' .. inputs[i].type .. ' * in' .. inputs[i].name
  end
end ) )
{
  using VectorInputImageType =  TImageType;
  using ComponentType = typename VectorInputImageType::InternalPixelType;
  using ComponentImageType = typename itk::Image<ComponentType, VectorInputImageType::ImageDimension>;
  // we must define the input and output image types
  // they should be the same as the scalar execute internal method
  using InputImageType = ComponentImageType;
]]
if vector_pixel_types_by_component2 then OUT = OUT..[[
  using VectorInputImageType2 = TImageType2;
  using ComponentType2 = typename VectorInputImageType2::InternalPixelType;
  using ComponentImageType2 = typename itk::Image<ComponentType2, VectorInputImageType2::ImageDimension>;
  using InputImageType2 = ComponentImageType2;]]
else
   OUT= OUT..[[
  using InputImageType2 = TImageType2;]]
end
if output_image_type then
OUT=OUT..[[
  //Define output image type
  using OutputImageType = ${output_image_type};]]
elseif output_pixel_type then
OUT=OUT..[[
  // Define output image type
  using OutputImageType = itk::Image< ${output_pixel_type}, InputImageType::ImageDimension >;]]
else
  OUT=OUT..[[
  // Define output image type
  using OutputImageType = InputImageType;]]
end

OUT=OUT..[[

  // Get the pointer to the ITK image contained in image1
  typename VectorInputImageType::ConstPointer image1 =
    this->CastImageToITK<VectorInputImageType>( ]]

if number_of_inputs > 0 then
  OUT=OUT..[[inImage1]]
elseif #inputs then
  OUT=OUT..'*in'..inputs[1].name
end

OUT=OUT..[[ );

  using ComponentExtractorType = itk::VectorIndexSelectionCastImageFilter< VectorInputImageType, ComponentImageType >;
  typename ComponentExtractorType::Pointer extractor = ComponentExtractorType::New();
  extractor->SetInput( image1 );

  using ToVectorFilterType = itk::ComposeImageFilter<OutputImageType>;
  typename ToVectorFilterType::Pointer toVector = ToVectorFilterType::New();

  unsigned int numComps = image1->GetNumberOfComponentsPerPixel();
  for ( unsigned int i = 0; i < numComps; ++i )
    {
    extractor->SetIndex( i );
    extractor->UpdateLargestPossibleRegion();
]]

if number_of_inputs > 0 then
  OUT=OUT..[[
    Image tmp = this->DualExecuteInternal<InputImageType,InputImageType2>( Image( extractor->GetOutput() )$(for inum=2,number_of_inputs do
                                                                                                                         OUT=OUT .. ', inImage' .. inum
                                                                                                                           end) );
]]
elseif #inputs then
OUT=OUT..[[
    const Image extractImage( extractor->GetOutput() );
    Image tmp = this->DualExecuteInternal<InputImageType,InputImageType2>( &extractImage$(for i = 2,#inputs do
                                                                                         OUT = OUT .. ", in" .. inputs[i].name
                                                                                           end) );
]]
end

OUT=OUT..[[
    typename OutputImageType::ConstPointer tempITKImage = this->CastImageToITK<OutputImageType>( tmp );

    toVector->SetInput( i, tempITKImage );
    }

  toVector->Update();

  return Image( toVector->GetOutput() );
}

sitkClangDiagnosticPop();

//-----------------------------------------------------------------------------
]]end)


//-----------------------------------------------------------------------------

$(if (not no_procedure) or (no_procedure == 1) then
OUT=[[$(include ProceduralAPI.cxx.in)]]
end)

} // end namespace simple
} // end namespace itk
