/*=========================================================================
*
*  Copyright NumFOCUS
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef sitk{{ name }}_h
#define sitk{{ name }}_h

{% include "DoNotEditWarning.h.jinja" %}

#include <memory>

#include "sitkBasicFilters.h"
#include "sitkImageFilter.h"

namespace itk::simple {

   /**\class {{ name }}
{% if briefdescription and briefdescription|length > 0 %}
\brief {{ briefdescription }}
{% endif %}
{% if detaileddescription and detaileddescription|length > 0 %}
{{ detaileddescription }}
{% endif %}
\sa itk::simple::{{ name|regex_replace('(ImageFilter|Filter)$', '') }} for the procedural interface
   */
    class SITKBasicFilters_EXPORT {{ name }}
      : public ImageFilter
    {
    public:
      using Self = {{ name }};

      /** Destructor */
      virtual ~{{ name }}();

      /** Default Constructor that takes no arguments and initializes
       * default parameters */
      {{ name }}();

      /** Define the pixels types supported by this filter */
      using PixelIDTypeList = {{ pixel_types }};

{% include "PublicDeclarations.h.jinja" %}
{% include "MemberGetSetDeclarations.h.jinja" %}
{% include "ClassNameAndPrint.h.jinja" %}

      /** Execute the filter on the input images */
      Image Execute(const std::vector<Image> &images);
{% for inum in range(1, 6) %}
      Image Execute(const Image& image1{% for jnum in range(2, inum+1) %}, const Image& image{{ jnum }}{% endfor %});
{% endfor %}

{% include "CustomMethods.h.jinja" %}

    private:

      /** Setup for member function dispatching */
      using MemberFunctionType = Image (Self::*)(const std::vector<Image> &);
      template <class TImageType> Image ExecuteInternal(const std::vector<Image> &images);

      {# vector_pixel_types_by_component is not supported for multi image filters #}
      {% if vector_pixel_types_by_component %}
      static_assert(false, "vector_pixel_types_by_component must not be set with multi image filters");
      {% endif %}

{% include "MemberFunctionDispatch.h.jinja" %}
{% include "PrivateMemberDeclarations.h.jinja" %}
};


   /**
{% if briefdescription and briefdescription|length > 0 %}
     * \brief {{ briefdescription }}
{% else %}
     * \brief itk::simple::{{ name }} Procedural Interface
{% endif %}
     *
     * This function directly calls the execute method of {{ name }}
     * in order to support a procedural API
     *
     * \sa itk::simple::{{ name }} for the object oriented interface
     * @{ */
     SITKBasicFilters_EXPORT Image {{ name|regex_replace('(ImageFilter|Filter)$', '') }}(const std::vector<Image> &images{% include "MemberParametersWithDefaults.jinja" %});
{% for inum in range(1, 6) %}
     SITKBasicFilters_EXPORT Image {{ name|regex_replace('(ImageFilter|Filter)$', '') }}(const Image& image1{% for jnum in range(2, inum+1) %}, const Image& image{{ jnum }}{% endfor %}{% include "MemberParametersWithDefaults.jinja" %});
{% endfor %}
     /** @{ */

}
#endif
