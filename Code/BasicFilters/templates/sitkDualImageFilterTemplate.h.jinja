/*=========================================================================
*
*  Copyright NumFOCUS
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef sitk{{ name }}_h
#define sitk{{ name }}_h

{% include "DoNotEditWarning.h.jinja" %}

{#- Import parameter macros for use in this template -#}
{% import "macros.jinja" as macros %}

#include <memory>

#include "sitkImageFilter.h"
#include "sitkDualMemberFunctionFactory.h"
#include "sitkBasicFilters.h"

namespace itk::simple {

{% include "ClassDeclaration.h.jinja" %}
{% include "PublicDeclarations.h.jinja" %}
{% include "MemberGetSetDeclarations.h.jinja" %}
{% include "ClassNameAndPrint.h.jinja" %}

{% include "ExecuteMethodNoParameters.h.jinja" -%}
{%- include "CustomMethods.h.jinja" %}

private:

  /** Setup for member function dispatching */
  {# Use parameter macros instead of includes -#}
  using MemberFunctionType = {{ "void" if no_return_image else "Image" }} (Self::*)(
  {{- macros.image_parameters(number_of_inputs) }}{{ macros.input_parameters_internal(inputs, number_of_inputs, name) -}}
  );

  friend struct detail::DualExecuteInternalAddressor<MemberFunctionType>;
  template <class TImageType1, class TImageType2> {{ "void" if no_return_image else "Image" }} DualExecuteInternal(
  {{- macros.image_parameters(number_of_inputs) }}{{ macros.input_parameters_internal(inputs, number_of_inputs, name) -}}
  );
  {% if vector_pixel_types_by_component %}
  friend struct detail::DualExecuteInternalVectorAddressor<MemberFunctionType>;
  template <class TImageType1, class TImageType2> {{ "void" if no_return_image else "Image" }} DualExecuteInternalVector(
  {{- macros.image_parameters(number_of_inputs) }}{{ macros.input_parameters_internal(inputs, number_of_inputs, name) -}}
  );
  {% endif %}

  std::unique_ptr<detail::DualMemberFunctionFactory<MemberFunctionType>> m_DualMemberFactory;

{% include "PrivateMemberDeclarations.h.jinja" %}
};

{% if not no_procedure %}
{% include "ProceduralAPI.h.jinja" %}
{% endif %}
}
#endif
