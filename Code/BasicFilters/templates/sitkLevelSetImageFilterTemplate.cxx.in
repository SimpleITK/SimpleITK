$(include DoNotEditWarning.cxx.in)

$(include StandardIncludes.cxx.in)

namespace itk {
namespace simple {

//-----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
$(include ConstructorSignature.cxx.in)
{
$(include ConstructorInitializeMembers.cxx.in)
$(include ConstructorMemberFunctionSetup.cxx.in)

$(include ConstructorVectorPixels.cxx.in)
}

//
// ToString
//
$(include ToStringSignature.cxx.in)
{
$(include ToStringBody.cxx.in)
$(include ToStringReturn.cxx.in)
}

//
// Execute
//$(include ExecuteWithParameters.cxx.in)
$(include ExecuteNoParameters.cxx.in)

//-----------------------------------------------------------------------------

//
// ExecuteInternal
//
$(include ExecuteInternalSignature.cxx.in)
{
  // Define the input type
  typedef TImageType     InputImageType;

$(include ExecuteInternalGetImagePointers.cxx.in)

  // Set up the ITK filter
  $(if output_pixel_type then
  OUT=[[// Define output image type
  typedef itk::${name}ImageFilter<InputImageType, InputImageType, ${output_pixel_type}> FilterType;]]
  else
  OUT=[[typedef itk::${name}ImageFilter<InputImageType, InputImageType> FilterType;]]
  end)
  typename FilterType::Pointer filter = FilterType::New();

$(if number_of_inputs == 2 then
OUT=[[
  filter->SetInput( image1 );
  filter->SetFeatureImage( image2 );
]]
else
OUT=[[
  filter->SetInput( image1 );
]]
end)$(foreach members
$(if custom_itk_cast then
OUT = '  ${custom_itk_cast}'
elseif dim_vec and dim_vec == 1 then
OUT = [[  ${itk_type} itkVec${name};
  for (unsigned int i = 0; i < inImage1.GetDimension(); ++i)
    {
    itkVec${name}[i] = this->Get${name}()[i];
    }
  filter->Set${name}( itkVec${name} );]]
elseif(not no_set_method) or (no_set_method == 0) then
OUT = '  filter->Set${name} ( this->m_${name} );'
end)
)
$(include ExecuteInternalUpdateAndReturn.cxx.in)
}

//-----------------------------------------------------------------------------

$(include ExecuteInternalVectorImages.cxx.in)
$(include FunctionalAPI.cxx.in)

} // end namespace simple
} // end namespace itk
