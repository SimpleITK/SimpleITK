/*=========================================================================*/
/*
 *  Copyright NumFOCUS
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/

{% include "DoNotEditWarning.cxx.jinja" %}
{% include "StandardIncludes.cxx.jinja" %}
{% include "AddExtraIncludes.cxx.jinja" %}

namespace itk::simple {

//-----------------------------------------------------------------------------

// Default constructor that initializes parameters
{% include "ConstructorSignature.cxx.jinja" %}
{
  this->m_DualMemberFactory.reset( new detail::DualMemberFunctionFactory<MemberFunctionType>( this ) );
  {% if pixel_types2 %}
  using PixelIDTypeList2 = {{ pixel_types2 }};
  {% endif %}
  {% if custom_register %}
  {{ custom_register }}
  {% else %}
  this->m_DualMemberFactory->RegisterMemberFunctions< PixelIDTypeList, PixelIDTypeList2, 3 >();
  this->m_DualMemberFactory->RegisterMemberFunctions< PixelIDTypeList, PixelIDTypeList2, 2 >();
  {% endif %}

  {% if vector_pixel_types_by_component %}
    using VectorByComponentsPixelIDTypeList = {{ vector_pixel_types_by_component }};
    {% if vector_pixel_types_by_component2 %}
      using VectorByComponentsPixelIDTypeList2 = {{ vector_pixel_types_by_component2 }};
    {% else %}
      using VectorByComponentsPixelIDTypeList2 = PixelIDTypeList2;
    {% endif %}
    using VectorAddressorType = detail::DualExecuteInternalVectorAddressor<MemberFunctionType>;
    this->m_DualMemberFactory->RegisterMemberFunctions< VectorByComponentsPixelIDTypeList, VectorByComponentsPixelIDTypeList2, 3, VectorAddressorType >();
    this->m_DualMemberFactory->RegisterMemberFunctions< VectorByComponentsPixelIDTypeList, VectorByComponentsPixelIDTypeList2, 2, VectorAddressorType >();
  {% endif %}
}

{% include "DestructorDefinition.cxx.jinja" %}

// ToString
{% include "ToStringSignature.cxx.jinja" %}
{
{% include "ToStringBody.cxx.jinja" %}
{% include "ToStringReturn.cxx.jinja" %}
}

{% include "CustomMethods.cxx.jinja" %}

// Execute
{{ "void" if no_return_image else "Image" }} {{ name }}::Execute (
  {% import "macros.jinja" as macros %}
  {{ macros.image_parameters(number_of_inputs) }}{{ macros.input_parameters(inputs, number_of_inputs, name, no_optional) }}
)
{
    {# Determine input names for type/dimension checks #}
    {% set ns = namespace(inputName1="image1", inputName2="image2") %}
    {% if not (number_of_inputs > 0) and inputs and inputs|length > 0 %}
        {% set ns.inputName1 = inputs[0].name[0]|lower ~ inputs[0].name[1:] %}
    {% endif %}
    const PixelIDValueEnum type1 = {{ ns.inputName1 }}.GetPixelID();
    const unsigned int dimension = {{ ns.inputName1 }}.GetDimension();

    {# Dimension/size checks for all image inputs #}
    {% for inum in range(2, number_of_inputs+1) %}
        CheckImageMatchingDimension( {{ ns.inputName1 }}, image{{ inum }}, "image{{ inum }}" );
    {% endfor %}
    {% if inputs %}
        {% for inum in range(1, inputs|length) %}
            {% set currentInput = inputs[inum] %}
            {% if inum == 1 %}{% set ns.inputName2 = currentInput.name[0]|lower ~ currentInput.name[1:] %}{% endif %}
            {% if currentInput.type == "Image" and (not currentInput.optional or not no_optional) %}
                {% set currentInputName = currentInput.name[0]|lower ~ currentInput.name[1:] %}
                CheckImageMatchingDimension( {{ ns.inputName1 }}, {{ currentInputName }}, "{{ currentInputName }}" );
                {% if not currentInput.no_size_check %}
                    CheckImageMatchingSize( {{ ns.inputName1 }}, {{ currentInputName }}, "{{ currentInputName }}" );
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endif %}

    {% if not custom_type2 and (number_of_inputs >= 2 or (inputs and inputs|length >= 2)) %}
        const PixelIDValueType type2 = {{ ns.inputName2 }}.GetPixelIDValue();
    {% elif custom_type2 %}
        {{ custom_type2 }}
    {% endif %}

    return this->m_DualMemberFactory->GetMemberFunction(type1, type2, dimension)(
        {%- for inum in range(1, number_of_inputs+1) -%}
            {%- if inum > 1 %}, {% endif -%}image{{ inum }}
        {%- endfor -%}
        {%- if inputs %}
            {%- for inum in range(inputs|length) %}
                {%- if number_of_inputs > 0 or inum > 0 %}, {% endif -%}
                {%- set inp = inputs[inum] %}
                {%- if inp.optional and no_optional %}nullptr{%- else -%}&{{ inp.name[0]|lower ~ inp.name[1:] }}{%- endif -%}
            {%- endfor -%}
        {%- endif -%}
    );
}

{% if in_place %}
  {% include "ExecuteRValueReferenceNoParameters.cxx.jinja" %}
{% endif %}

//-----------------------------------------------------------------------------

sitkClangDiagnosticPush();
sitkClangWarningIgnore("-Wunused-local-typedef");

// ExecuteInternal
template <class TImageType, class TImageType2>
{{ "void" if no_return_image else "Image" }} {{ name }}::DualExecuteInternal (
  {%- for inum in range(1, number_of_inputs+1) -%}
    {%- if inum > 1 %}, {% endif -%}const Image& inImage{{ inum }}
  {%- endfor -%}
  {%- if inputs %}
    {%- for i in range(inputs|length) %}
      {%- if number_of_inputs > 0 or i > 0 %}, {% endif -%}
      const {{ inputs[i].type if inputs[i].type else name + '::' + inputs[i].name + 'Type' }} * in{{ inputs[i].name }}
    {%- endfor -%}
  {%- endif -%}
)
{
  // Define the input and output image types
  using InputImageType = TImageType;
  using InputImageType2 = TImageType2;

  {% if output_image_type %}
    //Define output image type
    using OutputImageType = {{ output_image_type }};
  {% elif output_pixel_type %}
    // Define output image type
    using OutputImageType = itk::Image< {{ output_pixel_type }}, InputImageType::ImageDimension >;
  {% else %}
    using OutputImageType = InputImageType;
  {% endif %}

  {% include "ExecuteInternalGetImagePointers.cxx.jinja" %}
  {% include "ExecuteInternalITKFilter.cxx.jinja" %}
  {% include "ExecuteInternalSetITKFilterInputs.cxx.jinja" %}
  {% include "ExecuteInternalUpdateAndReturn.cxx.jinja" %}
}

{% if vector_pixel_types_by_component %}
//
// Dispatched methods to call DualExecuteInternal on each component of the VectorImage
//
template <class TImageType, class TImageType2> Image
{{ name }}::DualExecuteInternalVector (
  {%- for inum in range(1, number_of_inputs+1) -%}
    {%- if inum > 1 %}, {% endif -%}const Image& inImage{{ inum }}
  {%- endfor -%}
  {%- if inputs %}
    {%- for i in range(inputs|length) %}
      {%- if number_of_inputs > 0 or i > 0 %}, {% endif -%}
      const {{ inputs[i].type if inputs[i].type else name + '::' + inputs[i].name + 'Type' }} * in{{ inputs[i].name }}
    {%- endfor -%}
  {%- endif -%}
)
{
  using VectorInputImageType =  TImageType;
  using ComponentType = typename VectorInputImageType::InternalPixelType;
  using ComponentImageType = typename itk::Image<ComponentType, VectorInputImageType::ImageDimension>;
  // we must define the input and output image types
  // they should be the same as the scalar execute internal method
  using InputImageType = ComponentImageType;
  {% if vector_pixel_types_by_component2 %}
    using VectorInputImageType2 = TImageType2;
    using ComponentType2 = typename VectorInputImageType2::InternalPixelType;
    using ComponentImageType2 = typename itk::Image<ComponentType2, VectorInputImageType2::ImageDimension>;
    using InputImageType2 = ComponentImageType2;
  {% else %}
    using InputImageType2 = TImageType2;
  {% endif %}
  {% if output_image_type %}
    //Define output image type
    using OutputImageType = {{ output_image_type }};
  {% elif output_pixel_type %}
    // Define output image type
    using OutputImageType = itk::Image< {{ output_pixel_type }}, InputImageType::ImageDimension >;
  {% else %}
    // Define output image type
    using OutputImageType = InputImageType;
  {% endif %}

  // Get the pointer to the ITK image contained in image1
  typename VectorInputImageType::ConstPointer image1 =
    this->CastImageToITK<VectorInputImageType>( {% if number_of_inputs > 0 %}inImage1{% elif inputs %}*in{{ inputs[0].name }}{% endif %} );

  using ComponentExtractorType = itk::VectorIndexSelectionCastImageFilter< VectorInputImageType, ComponentImageType >;
  typename ComponentExtractorType::Pointer extractor = ComponentExtractorType::New();
  extractor->SetInput( image1 );

  using ToVectorFilterType = itk::ComposeImageFilter<OutputImageType>;
  typename ToVectorFilterType::Pointer toVector = ToVectorFilterType::New();

  unsigned int numComps = image1->GetNumberOfComponentsPerPixel();
  for ( unsigned int i = 0; i < numComps; ++i )
    {
    extractor->SetIndex( i );
    extractor->UpdateLargestPossibleRegion();
    {% if number_of_inputs > 0 %}
      Image tmp = this->DualExecuteInternal<InputImageType,InputImageType2>( Image( extractor->GetOutput() ){% for inum in range(2, number_of_inputs+1) %}, inImage{{ inum }}{% endfor %} );
    {% elif inputs %}
      const Image extractImage( extractor->GetOutput() );
      Image tmp = this->DualExecuteInternal<InputImageType,InputImageType2>( &extractImage{% for i in range(1, inputs|length) %}, in{{ inputs[i].name }}{% endfor %} );
    {% endif %}
    typename OutputImageType::ConstPointer tempITKImage = this->CastImageToITK<OutputImageType>( tmp );
    toVector->SetInput( i, tempITKImage );
    }

  toVector->Update();
  return Image( toVector->GetOutput() );
}
sitkClangDiagnosticPop();
//-----------------------------------------------------------------------------
{% endif %}

//-----------------------------------------------------------------------------
{% if not no_procedure %}
  {% include "ProceduralAPI.cxx.jinja" %}
{% endif %}

} // namespace itk::simple
