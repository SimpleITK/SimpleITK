/*=========================================================================
*
*  Copyright NumFOCUS
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef sitk{{ name }}_h
#define sitk{{ name }}_h

{% include "DoNotEditWarning.h.jinja" %}

#include <memory>

#include "sitkBasicFilters.h"
#include "sitkImageFilter.h"

{#- Import parameter macros for use in this template -#}
{% import "macros.jinja" as macros %}

namespace itk::simple {

{% include "ClassDeclaration.h.jinja" %}
{% include "PublicDeclarations.h.jinja" %}
{% include "MemberGetSetDeclarations.h.jinja" %}
{% include "ClassNameAndPrint.h.jinja" %}

{% include "ExecuteMethodNoParameters.h.jinja" %}
{% include "CustomMethods.h.jinja" %}

  /** Execute the filter with an image and a constant */
  Image Execute(const Image& image1, {{ constant_type }} constant);
#ifndef SWIG
  Image Execute(Image&& image1, {{ constant_type }} constant);
#endif
  Image Execute({{ constant_type }} constant, const Image& image2);

  {# Overloads with member parameters if present #}
  {% if members and members|length > 0 %}
  /** Execute the filter on an image and a constant with the given parameters */
Image Execute(const Image& image1, {{ constant_type }} constant{{ macros.member_parameters(members, number_of_inputs, name) }});
Image Execute({{ constant_type }} constant, const Image& image2{{ macros.member_parameters(members, number_of_inputs, name) }});
{% endif %}

{% include "ExecuteInternalMethod.h.jinja" %}

  using MemberFunction1Type = Image (Self::*)({{ constant_type }} constant, const Image& image2);
  template <class TImageType> Image ExecuteInternal({{ constant_type }} constant, const Image& image2);
  friend struct detail::MemberFunctionAddressor<MemberFunction1Type>;
  std::unique_ptr<detail::MemberFunctionFactory<MemberFunction1Type>> m_MemberFactory1;

  using MemberFunction2Type = Image (Self::*)(const Image& image1, {{ constant_type }} constant);
  template <class TImageType> Image ExecuteInternal(const Image& image1, {{ constant_type }} constant);
  friend struct detail::MemberFunctionAddressor<MemberFunction2Type>;
  std::unique_ptr<detail::MemberFunctionFactory<MemberFunction2Type>> m_MemberFactory2;

{% include "MemberFunctionDispatch.h.jinja" %}
{% include "PrivateMemberDeclarations.h.jinja" %}
};


{% include "ProceduralAPI.h.jinja" %}
SITKBasicFilters_EXPORT Image {{ name|regex_replace("(ImageFilter|Filter)$", "") }}(
  const Image& image1, {{ constant_type }} constant{% include "MemberParametersWithDefaults.jinja" %}
);
#ifndef SWIG
SITKBasicFilters_EXPORT Image {{ name|regex_replace("(ImageFilter|Filter)$", "") }}(
  Image&& image1, {{ constant_type }} constant{% include "MemberParametersWithDefaults.jinja" %}
);
#endif
SITKBasicFilters_EXPORT Image {{ name|regex_replace("(ImageFilter|Filter)$", "") }}(
  {{ constant_type }} constant, const Image& image2{% include "MemberParametersWithDefaults.jinja" %}
);
}
#endif
