/*=========================================================================
*
*  Copyright Insight Software Consortium
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef sitk${name}_h
#define sitk${name}_h

$(include DoNotEditWarning.h.in)

#include <memory>

#include "sitkBasicFilters.h"
#include "sitkImageFilter.h"

namespace itk {
  namespace simple {

$(include ClassDeclaration.h.in)
$(include PublicDeclarations.h.in)
$(include MemberGetSetDeclarations.h.in)
$(include ClassNameAndPrint.h.in)

$(include ExecuteMethodNoParameters.h.in)$(include ExecuteMethodWithParameters.h.in)$(include CustomMethods.h.in)
      /** Execute the filter with an image and a constant */
      Image Execute ( const Image& image1, ${constant_type} constant );
      Image Execute ( ${constant_type} constant, const Image& image2 );
$(if members and #members > 0 then
OUT=[[
      /** Execute the filter on an image and a constant with the given parameters */
      Image Execute ( const Image& image1, ${constant_type} constant$(include MemberParameters.in) );
      Image Execute ( ${constant_type} constant, const Image& image2$(include MemberParameters.in) );]]
end)

$(include ExecuteInternalMethod.h.in)

$(include MemberFunctionDispatch.h.in)
      typedef Image (Self::*MemberFunction1Type)( ${constant_type} constant, const Image& image2 );
      template <class TImageType> Image ExecuteInternal ( ${constant_type} constant, const Image& image2 );
      friend struct detail::MemberFunctionAddressor<MemberFunction1Type>;
      nsstd::auto_ptr<detail::MemberFunctionFactory<MemberFunction1Type> > m_MemberFactory1;

      typedef Image (Self::*MemberFunction2Type)( const Image& image1, ${constant_type} constant );
      template <class TImageType> Image ExecuteInternal ( const Image& image1, ${constant_type} constant );
      friend struct detail::MemberFunctionAddressor<MemberFunction2Type>;
      nsstd::auto_ptr<detail::MemberFunctionFactory<MemberFunction2Type> > m_MemberFactory2;

$(include PrivateMemberDeclarations.h.in)$(include ClassEnd.h.in)

$(include FunctionalAPI.h.in)
    SITKBasicFilters_EXPORT Image ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( const Image& image1, ${constant_type} constant$(include MemberParametersWithDefaults.in) );
    SITKBasicFilters_EXPORT Image ${name:gsub("ImageFilter$", ""):gsub("Filter$", "")} ( ${constant_type} constant, const Image& image2$(include MemberParametersWithDefaults.in) );
  }
}
#endif
