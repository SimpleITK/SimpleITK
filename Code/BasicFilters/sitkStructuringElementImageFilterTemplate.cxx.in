#include "sitk${name}ImageFilter.h"
#include "itk${name}ImageFilter.h"

#include "itkBinaryBallStructuringElement.h"
#include "itkFlatStructuringElement.h"
$(if real_type_output==1 then
OUT = [[#include "itkNumericTraits.h"]]
end)

namespace itk {
namespace simple {

//----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
${name}ImageFilter::${name}ImageFilter ()
  {

  $(foreach members
    $(if default then OUT = 'm_${name} = ${default};' end)
  )

  this->m_MemberFactory.reset( new detail::MemberFunctionFactory<MemberFunctionType>( this ) );

  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 3 > ();
  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 2 > ();
  }

//
// ToString
//
std::string ${name}ImageFilter::ToString() const
  {
  std::ostringstream out;
  out << "itk::simple::${name}ImageFilter\n";

  $(foreach members
    $(if (not no_print) or (not no_print == 1) then
      OUT = 'out << "\t${name}: " << this->m_${name} << std::endl;'
      end)
  )

  return out.str();
  }

//
// Execute
//

      $(if members and #members > 0 then
OUT = [[
        Image::Pointer ${name}ImageFilter::Execute ( Image::Pointer image1 $(foreach members ,${type} in${name} ) )
  {
    $(foreach members 
      $(if (not no_set_method) or (no_set_method == 0) then
      OUT = 'this->Set${name} ( in${name} );'
      end)
    )
    return this->Execute ( image1 );
  }
]]
end)

Image::Pointer ${name}ImageFilter::Execute ( Image::Pointer image1 )
  {

    PixelIDValueType type = image1->GetPixelIDValue();
    unsigned int dimension = image1->GetDimension();

    return this->m_MemberFactory->GetMemberFunction( type, dimension )( image1 );
  }

//----------------------------------------------------------------------------

//
// ExecuteInternal
//
template <class TImageType>
Image::Pointer ${name}ImageFilter::ExecuteInternal ( Image::Pointer inImage1 )
  {
  typedef TImageType     InputImageType;
  $(if real_type_output==1 then
  OUT=[[// Real output type
  typedef itk::Image< typename itk::NumericTraits< typename InputImageType::PixelType >::RealType,
    InputImageType::ImageDimension > OutputImageType;]]
  else
  OUT=[[typedef InputImageType OutputImageType;]]
  end)

  typename InputImageType::Pointer image1 =
    dynamic_cast <InputImageType*> ( inImage1->GetImageBase().GetPointer() );

  if ( image1.IsNull() )
    {
    sitkExceptionMacro( "Unexpected template dispatch error!" );
    }


  // Use correct kernel types
  if( this->GetKernelType() == BinaryBallKernel)
    {
    typedef itk::BinaryBallStructuringElement< typename InputImageType::PixelType,
                                               InputImageType::ImageDimension > ITKKernelType;
    typedef itk::${name}ImageFilter<InputImageType,
                                                  OutputImageType,
                                                  ITKKernelType> FilterType;
    ITKKernelType kernel;
    kernel.SetRadius( this->GetKernelRadius() );

    typename FilterType::Pointer filter = FilterType::New();

$(foreach members
    $(if custom_itk_cast then
      OUT = '${custom_itk_cast}'
    elseif(not no_set_method) or (no_set_method == 0) then
      OUT = 'filter->Set${name} ( this->m_${name} );'
    end)
)
    filter->SetKernel( kernel );
    filter->SetInput( image1 );
    filter->Update();
    Image::Pointer out = new Image( filter->GetOutput() );
    filter->GetOutput()->DisconnectPipeline();
    return out;
    }
  else if( this->GetKernelType() == FlatKernel )
    {
    typedef itk::FlatStructuringElement< InputImageType::ImageDimension > ITKKernelType;
    typedef itk::${name}ImageFilter<InputImageType,
                                                  OutputImageType,
                                                  ITKKernelType> FilterType;
    ITKKernelType kernel;
    kernel.SetRadius( this->GetKernelRadius() );

    typename FilterType::Pointer filter = FilterType::New();

$(foreach members
    $(if custom_itk_cast then
      OUT = '${custom_itk_cast}'
    elseif(not no_set_method) or (no_set_method == 0) then
      OUT = 'filter->Set${name} ( this->m_${name} );'
    end)
)
    filter->SetKernel( kernel );
    filter->SetInput( image1 );
    filter->Update();
    Image::Pointer out = new Image( filter->GetOutput() );
    filter->GetOutput()->DisconnectPipeline();
    return out;
    }
  else
    {
    sitkExceptionMacro("Unknown Kernel Type");
    }
  }

} // end namespace simple
} // end namespace itk
