#ifndef __sitk${name}ImageFilter_h
#define __sitk${name}ImageFilter_h

/*
 * WARNING: DO NOT EDIT THIS FILE!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
 * Please look at sitkRegionGrowingImageFilterTemplate.h.in to make changes.
 */

#include <memory>

#include "sitkDualImageFilter.h"

namespace itk {
  namespace simple {

    /** \class ${name}ImageFilter
     *
     * ${doc}
     */
    class ${name}ImageFilter : public $(if number_of_inputs == 2 then OUT=[[DualImageFilter]] else OUT=[[ImageFilter]] end) {
    public:
      typedef ${name}ImageFilter Self;

      /** Default Constructor that takes no arguments and initializes
       * default parameters */
      ${name}ImageFilter();

      /** Define the pixels types supported by this filter */
      typedef ${pixel_types}  PixelIDTypeList;
$(if public_declarations then
      OUT=[[
      /** Custom public declarations */
      ${public_declarations}
]]end)
$(foreach members
$(if (not no_set_method) or (no_set_method == 0) then
      OUT = '\
      /** Set ${name} */\
      Self& Set${name} ( ${type} t ) { this->m_${name} = t; return *this; }'
  if type == "bool" then
      OUT = OUT .. '\
\
      /** Set the value of ${name} to true or false respectfully. */\
      Self& ${name}On() { return this->Set${name}(true); }\
      Self& ${name}Off() { return this->Set${name}(false); }'
  end
end)
$(if (not no_get_method) or (no_get_method == 0) then
      OUT = '\
      /** Get ${name} */\
      ${type} Get${name}() { return this->m_${name}; }'
end)
)
      /** Set SeedList */
      Self& SetSeedList ( std::vector< std::vector<unsigned int> > t )
        {
        this->m_SeedList = t; return *this;
        }

      /** Get SeedList */
      std::vector< std::vector<unsigned int> > GetSeedList()
        {
        return this->m_SeedList;
        }

      /** ClearSeeds - Clear out all seeds in the list */
      Self& ClearSeeds( )
        {
        this->m_SeedList.clear();
        return *this;
        }

      /** SetSeed - Set list to a single seed */
      Self& SetSeed( std::vector<unsigned int> idx )
        {
        this->m_SeedList.clear();
        this->m_SeedList.push_back(idx);
        return *this;
        }

      /** AddSeed - Add a seed to the end of the list */
      Self& AddSeed( std::vector<unsigned int> idx )
        {
        this->m_SeedList.push_back(idx);
        return *this;
        }

      /** Print ourselves out */
      std::string ToString() const;

      /** Execute the filter on the input image$(if number_of_inputs == 2 then OUT=[[s]]end) */
      Image* Execute ( Image* $(if number_of_inputs == 2 then OUT=[[, Image*]] end) );$(if members and #members > 0 then
OUT=[[


      /** Execute the filter on the input image$(if number_of_inputs == 2 then OUT='s'end) with the given parameters */
      Image* Execute ( Image*$(if number_of_inputs == 2 then OUT=', Image*' end),
        std::vector< std::vector<unsigned int> > inSeedList$(foreach members ,
        ${type} in${name}) );]]end)$(if custom_methods and #custom_methods > 0 then
OUT = [[


$(foreach custom_methods
      /** ${doc} */
      ${return_type} ${name}( $(foreach parameters ${type} ${var_name}$(if last == 0 then OUT=', ' end)) )
        {
        ${body}
        };
)]]end)

    private:

$(if number_of_inputs == 2 then
OUT=[[
      /** Setup for member function dispatching */
      typedef Image* (Self::*MemberFunctionType)( Image*, Image* );
      template <class TImageType> Image* ExecuteInternal ( Image* image1, Image* image2 );
      friend struct detail::MemberFunctionAddressor<MemberFunctionType>;
      std::auto_ptr<detail::MemberFunctionFactory<MemberFunctionType> > m_MemberFactory;
]]
else
OUT=[[
      /** Setup for member function dispatching */
      typedef Image* (Self::*MemberFunctionType)( Image* );
      template <class TImageType> Image* ExecuteInternal ( Image* image );
      friend struct detail::MemberFunctionAddressor<MemberFunctionType>;
      std::auto_ptr<detail::MemberFunctionFactory<MemberFunctionType> > m_MemberFactory;
]]end)
$(foreach members
      /* ${doc} */
      ${type} m_${name};

)      /** List of interor seed points used to initialize the region growing segmentation */
      std::vector< std::vector<unsigned int> > m_SeedList;

    };


    /**
     * itk::simple::${name}ImageFilter Functional Interface
     *
     * This function directly calls the execute method of ${name}ImageFilter
     * in order to support a fully functional API
     */
    Image* ${name} ( Image* imageA$(if number_of_inputs == 2 then OUT=', Image* imageB' end),
      std::vector< std::vector<unsigned int> > inSeedList$(when members $(foreach members ,
      ${type} in${name} = ${default})) );

  } // end namespace simple
} // end namespace itk
#endif
